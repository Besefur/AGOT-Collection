#
# 	Custom loc for setting names and descs of wonders and upgrades
#
#	GetWonderName ................................... Fancy Name! Use to set/update the name of a Wonder
# 	GetWonderAdjCap ................................. An adjective for the Wonder, eg. "Great", "Bloody"
# 	GetWonderAdj .................................... An adjective for the Wonder, eg. "great", "bloody"
#	GetWonderTypeShortCap ........................... Building type: "Cathedral", "Pyramid", or "Harbor"
#	GetWonderTypeShort .............................. Building type: "cathedral", "pyramid", or "harbor"
#	GetWonderFluffNounCap ........................... Use with an 'of', to read things like "of <Shadows>"
#

#	GetWonderDesc ................................... Fancy Desc! Use to set/update the desc of a Wonder
#	GetWonderAgeDesc ................................
# 	GetWonderPurpose ................................
# 	GetRandomUpgradeDesc ............................



# A Fancy Name! Use this to set/update the name of a wonder (probably best done via on_actions after completing a stage or upgrade)
defined_text = {
	name = GetWonderName

	use_first_valid = yes # (Defaults to no)

	######### Very rare...
	text = {
		trigger = {
			wonder_stage = 3
			OR = {
				has_wonder_flag = wonder_name_5
				has_wonder_flag = wonder_name_6
				has_wonder_flag = wonder_name_7
			}
		}
		localisation_key = String_special_wonder_name # The Devils Workshop, The Citadel of Horrors etc
	}

	### Regular...
	text = {
		trigger = {
			wonder_stage = 3
			NOT = {
				has_game_rule = {
					name = supernatural_events
					value = off
				}
			}
			OR = {
				has_wonder_flag = wonder_name_5
				has_wonder_flag = wonder_name_6
			}
		}
		localisation_key = String_adj_wondertype_of_noun # Grand Cathedral of Light/Bloody Palace of Shadows, etc
	}
	text = {
		trigger = {
			wonder_stage = 3
			OR = {
				has_wonder_flag = wonder_name_2
				has_wonder_flag = wonder_name_3
				has_wonder_flag = wonder_name_4
				has_wonder_flag = wonder_name_5
				has_wonder_flag = wonder_name_6
			}
		}
		localisation_key = String_adj_wondertype_of_location # Grand Cathedral of Paris/Bloody Palace of Stockholm, etc
	}
	text = {
		trigger = {
			NOT = {
				wonder_stage = 2
			}
			OR = {
				has_wonder_flag = wonder_name_1
				has_wonder_flag = wonder_name_2
				has_wonder_flag = wonder_name_3
			}
		}
		localisation_key = String_location_wondertype # Stockholm Cathedral/Paris University, etc
	}
	#In case it cannot find anything...
    fallback_text = {
        localisation_key = String_location_wondertype # Simplest version
    }
}

defined_text = { #special wonders
	name = GetSpecialWonderName

	text = {
		trigger = {
			has_wonder_flag = holy_building
			any_upgrade_on_wonder = {
				count = 2
				has_wonder_upgrade_flag = scary
			}
		}
		localisation_key = String_the_evil_god_names_workshop
	}
	text = {
		trigger = {
			any_upgrade_on_wonder = {
				count = 3
				has_wonder_upgrade_flag = decorative
			}
		}
		localisation_key = String_jewel_of_the_province
	}

	fallback_text = {
		localisation_key = String_adj_wondertype_of_noun # The 'regular' high level one
	}
}


# An adjective for the Wonder, eg. "Great", "Bloody"
#Great, Grand, Holy, Magnificent, Glorious, Bloody, Fortified, Royal, Grand Royal, Silent
#Golden, Iron, Towering, Looming, Divine, Verdant, Soaring, Hallowed, Ancient, Old
defined_text = {
	name = GetWonderAdjCap

	use_first_valid = yes # (Defaults to no)

	text = {
		trigger = {
			wonder_stage = 4
			wonder_age = 300
		}
		localisation_key = String_Ancient
	}
	text = {
		trigger = {
			wonder_stage = 4
			num_of_wonder_upgrades = 5
		}
		localisation_key = String_Glorious
	}
	text = {
		trigger = {
			wonder_stage = 2
			num_of_wonder_upgrades = 4
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = defensive
				NOT = { has_wonder_upgrade_flag = decorative } #it can't be "Bells"
			}
		}
		localisation_key = String_Fortified
	}
	text = {
		trigger = {
			wonder_stage = 2
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = golden
			}
			num_of_wonder_upgrades = 4
		}
		localisation_key = String_Golden
	}
	text = {
		trigger = {
			wonder_stage = 3
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = nature
			}
			num_of_wonder_upgrades = 3
		}
		localisation_key = String_Verdant
	}
	text = {
		trigger = {
			wonder_stage = 2
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = towering
			}
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = scary
			}
			num_of_wonder_upgrades = 3
		}
		localisation_key = String_Looming
	}
	text = {
		trigger = {
			wonder_stage = 3
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = towering
			}
			num_of_wonder_upgrades = 3
		}
		localisation_key = String_Soaring
	}
	text = {
		trigger = {
			has_wonder_flag = holy_building
			wonder_stage = 3
			num_of_wonder_upgrades = 8
		}
		localisation_key = String_Hallowed
	}
	text = {
		trigger = {
			wonder_stage = 2
			num_of_wonder_upgrades = 3
			has_wonder_flag = holy_building
		}
		localisation_key = String_Holy
	}
	text = {
		trigger = {
			wonder_stage = 1
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = towering
			}
		}
		localisation_key = String_Towering
	}
	text = {
		trigger = { wonder_stage = 3 }
		localisation_key = String_Grand
	}
	text = {
		trigger = { wonder_stage = 1 }
		localisation_key = String_Great
	}
	text = {
		trigger = {
			wonder_age = 100
			NOT = { wonder_age = 200 }
		}
		localisation_key = String_Old
	}

	#In case it cannot find anything...
    fallback_text = {
        localisation_key = String_Cool #placeholder, to find errors
    }
}

# General descriptor. Note that it contains some words using initial vowel (be careful with grammar errors like "a ancient temple")
defined_text = {
	name = GetWonderAdj

	use_first_valid = yes # (Defaults to no)

	text = {
		trigger = {
			wonder_stage = 4
			wonder_age = 300
		}
		localisation_key = String_ancient
	}
	text = {
		trigger = {
			wonder_stage = 4
			num_of_wonder_upgrades = 5
		}
		localisation_key = String_glorious
	}
	text = {
		trigger = {
			wonder_stage = 2
			num_of_wonder_upgrades = 4
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = defensive
				NOT = { has_wonder_upgrade_flag = decorative } #it can't be "Bells"
			}
		}
		localisation_key = String_fortified
	}
	text = {
		trigger = {
			wonder_stage = 2
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = golden
			}
			num_of_wonder_upgrades = 4
		}
		localisation_key = String_golden
	}
	text = {
		trigger = {
			wonder_stage = 3
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = nature
			}
			num_of_wonder_upgrades = 3
		}
		localisation_key = String_verdant
	}
	text = {
		trigger = {
			wonder_stage = 2
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = towering
			}
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = scary
			}
			num_of_wonder_upgrades = 3
		}
		localisation_key = String_looming
	}
	text = {
		trigger = {
			wonder_stage = 3
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = towering
			}
			num_of_wonder_upgrades = 3
		}
		localisation_key = String_soaring
	}
	text = {
		trigger = {
			has_wonder_flag = holy_building
			wonder_stage = 3
			num_of_wonder_upgrades = 8
		}
		localisation_key = String_hallowed
	}
	text = {
		trigger = {
			wonder_stage = 2
			num_of_wonder_upgrades = 3
			has_wonder_flag = holy_building
		}
		localisation_key = String_holy
	}
	text = {
		trigger = {
			wonder_stage = 1
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = towering
			}
		}
		localisation_key = String_towering
	}
	text = {
		trigger = { wonder_stage = 3 }
		localisation_key = String_grand
	}
	text = {
		trigger = { wonder_stage = 1 }
		localisation_key = String_great
	}
	text = {
		trigger = {
			wonder_age = 100
			NOT = { wonder_age = 200 }
		}
		localisation_key = String_old
	}

	#In case it cannot find anything...
    fallback_text = {
        localisation_key = String_Cool #placeholder, to find errors
    }
}


defined_text = {
	name = GetWonderTypeShortCap # Basically, what kind of building this is: "Cathedral", or "Pyramid", or "Harbor"

	use_first_valid = yes # (Defaults to no)

	text = {
		trigger = {
			uses_dynamic_name_cow_trigger = yes
			wonder_stage = 1
			NOT = { wonder_stage = 3 }
		}
		localisation_key = String_cow_City1
	}
	text = {
		trigger = {
			uses_dynamic_name_cow_trigger = yes
			wonder_stage = 3
			NOT = { wonder_stage = 6 }
		}
		localisation_key = String_cow_City2
	}
	text = {
		trigger = {
			uses_dynamic_name_cow_trigger = yes
			wonder_stage = 6
			NOT = { wonder_stage = 9 }
		}
		localisation_key = String_cow_City3
	}
	text = {
		trigger = {
			uses_dynamic_name_cow_trigger = yes
			OR = {
				wonder_stage = 9
				wonder_stage = 10
			}
		}
		localisation_key = String_cow_City4
	}
	#In case it cannot find anything...
    fallback_text = {
        localisation_key = String_Great_Work
    }
}

# Without cap, for unceremonious speak (try to avoid a/an, or "amphitheater" will mess up):
defined_text = {
	name = GetWonderTypeShort # Basically, what kind of building this is: "cathedral", or "pyramid", or "harbor"

	use_first_valid = yes # (Defaults to no)

	text = {
		trigger = {
			has_city_of_wonders_trigger = yes
		}
		localisation_key = String_cow_city
	}

	#In case it cannot find anything...
    fallback_text = {
        localisation_key = String_great_work
    }
}

#Shadows, Light, Secrets, Death, Pain, Screams, Romance, Treasures, holy

defined_text = {
	name = GetWonderFluffNounCap

	text = {
		trigger = { has_wonder_flag = is_temple }
		localisation_key = String_Shadows
	}
	text = {
		trigger = { has_wonder_flag = is_temple }
		localisation_key = String_Light
	}

	text = {
		trigger = { has_wonder_flag = is_temple }
		localisation_key = String_Secrets
	}
	text = {
		trigger = { any_upgrade_on_wonder = { has_wonder_upgrade_flag = body_stash } }
		localisation_key = String_Secrets
	}
	text = {
		trigger = {
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = scary
			}
		}
		localisation_key = String_Death
	}
	text = {
		trigger = {
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = scary
			}
		}
		localisation_key = String_Pain
	}

	text = {
		trigger = {
			any_upgrade_on_wonder = {
				has_wonder_upgrade_flag = scary
			}
		}
		localisation_key = String_Screams
	}

	text = {
		trigger = {
			any_upgrade_on_wonder = {
				count = 3 #to do Add more romantic places as this isnt currently possible
				has_wonder_upgrade_flag = romantic
			}
		}
		localisation_key = String_Romance
	}

	text = {
		trigger = {
			any_upgrade_on_wonder = {
				count = 2
				has_wonder_upgrade_flag = valuable
			}
		}
		localisation_key = String_Treasures
	}


	#In case it cannot find anything...
    fallback_text = {
        localisation_key = String_Wonder_Province
    }
}


# Used when updating the desc of a wonder.
defined_text = {
	name = GetWonderDesc
	#Dependent on event-targets: upgrade_00, upgrade_01 and upgrade_02
	text = {
		trigger = { #for baby wonders (adds upgrade mention)
			has_wonder_upgrade = yes
			NOT = { num_of_wonder_upgrades = 3 }
			NOT = { wonder_age = 15 }
			NOT = {
				has_city_of_wonders_trigger = yes
			}
		}
		localisation_key = String_Wonder_Desc00
	}
	text = { #for wonders that build no upgrades, but stages instead: no upgrade addendum
		trigger = {
			has_wonder_upgrade = no
			NOT = {
				has_city_of_wonders_trigger = yes
			}
		}
		localisation_key = String_Wonder_Desc01
	}
	text = { #Variant 1: mentions an upgrade
		trigger = {
			num_of_wonder_upgrades = 2
			NOT = {
				has_city_of_wonders_trigger = yes
			}
		}
		localisation_key = String_Wonder_Desc02
	}
	text = { #Variant 2: mentions an upgrade
		trigger = {
			num_of_wonder_upgrades = 5
			NOT = {
				has_city_of_wonders_trigger = yes
			}
		}
		localisation_key = String_Wonder_Desc03
	}
}

defined_text = {
	name = GetWonderAgeDesc

	text = {
		trigger = { NOT = { wonder_age = 1 } }
		localisation_key = String_months
	}
	text = {
		trigger = {
			wonder_age = 1
			NOT = { wonder_age = 20 }
		}
		localisation_key = String_years
	}
	text = {
		trigger = {
			wonder_age = 20
			NOT = { wonder_age = 100 }
		}
		localisation_key = String_decades
	}
	text = {
		trigger = {
			wonder_age = 80
			NOT = { wonder_age = 100 }
		}
		localisation_key = String_almost_a_century
	}
	text = {
		trigger = {
			wonder_age = 100
			NOT = { wonder_age = 150 }
		}
		localisation_key = String_ages
	}
	text = {
		trigger = {
			wonder_age = 100
			NOT = { wonder_age = 150 }
		}
		localisation_key = String_more_than_a_hundred_years
	}
	text = {
		trigger = {
			wonder_age = 250
		}
		localisation_key = String_hundreds_of_years
	}
	text = {
		trigger = {
			wonder_age = 250
		}
		localisation_key = String_as_long_as_anyone_can_remember
	}
	text = {
		trigger = {
			wonder_age = 250
		}
		localisation_key = String_centuries
	}
	text = {
		trigger = {
			wonder_age = 350
		}
		localisation_key = String_time_immemorial
	}

	#In case it cannot find anything...
    fallback_text = {
        localisation_key = String_a_long_time
    }
}


defined_text = {
	name = GetWonderPurpose
	# Needs to be in a wonder scope!
	# All in past tense! Eg. <the wonder has> "inspired scholars and hardworking students" <for years>

	text = {
		trigger = { has_wonder_flag = inspires_piety }
		localisation_key = String_inspired_pious
	}
	text = {
		trigger = { has_wonder_flag = inspires_piety }
		localisation_key = String_safe_haven_for_lost_souls
	}
	text = {
		trigger = { has_wonder_flag = inspires_piety }
		localisation_key = String_a_place_of_comfort_for_believers
	}
	text = {
		trigger = {
			has_wonder_flag = inspires_relaxing
		}
		localisation_key = String_eased_the_burden
	}
	text = {
		trigger = {
			has_wonder_flag = inspires_contentedness
		}
		localisation_key = String_improved_lives
	}
	text = {
		trigger = { has_wonder_flag = inspires_greatness }
		localisation_key = String_encouraged_greatness_1
	}
	text = {
		trigger = { has_wonder_flag = inspires_greatness }
		localisation_key = String_encouraged_greatness_2
	}
	text = {
		trigger = {
			has_wonder_flag = inspires_learning
		}
		localisation_key = String_inspired_students
	}
	text = {
		trigger = {
			OR = {
				has_wonder_flag = inspires_learning
				any_upgrade_on_wonder = {
					has_wonder_upgrade_flag = inspires_learning
					wonder_upgrade_age = 100
				}
			}
		}
		localisation_key = String_encouraged_learning
	}
	fallback_text = {
		localisation_key = String_inspired_wonder
	}
}

defined_text = {
	name = GetRandomUpgradeDesc
	# Needs to be in an upgrade scope!
	# Present tense: Eg. <The> "[upgradeName] are said to keep demons at bay".
	text = {
		trigger = {
			has_wonder_upgrade_flag = scary
			has_wonder_upgrade_flag = is_singular
		}
		localisation_key = String_upgrade_sends_chills
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = scary
			has_wonder_upgrade_flag = is_plural
		}
		localisation_key = String_upgrade_send_chills
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = defensive
			has_wonder_upgrade_flag = is_singular
		}
		localisation_key = String_upgrade_promises_safety
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = defensive
			has_wonder_upgrade_flag = is_plural
		}
		localisation_key = String_upgrade_promises_safety
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = decorative
			has_wonder_upgrade_flag = is_singular
		}
		localisation_key = String_upgrade_is_a_work_of_art
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = decorative
			has_wonder_upgrade_flag = is_plural
		}
		localisation_key = String_upgrade_are_beautifully_made
	}
	text = {
		trigger = {
			has_wonder_upgrade = upgrade_roads
		}
		localisation_key = String_improves_accessibility
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = defensive
			NOT = { has_wonder_upgrade_flag = decorative }
		}
		localisation_key = String_contribute_to_heightened_security
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = heating
		}
		localisation_key = String_bring_luxury_during_colder_seasons
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = entertainment
		}
		localisation_key = String_acts_as_entertainment
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = towering
		}
		localisation_key = String_can_be_seen_from_far_away
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = produces_alcohol
			has_wonder_upgrade_flag = is_singular
		}
		localisation_key = String_rumored_to_be_the_best
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = air_bnb
		}
		localisation_key = String_offers_relaxation
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = contemplative
		}
		localisation_key = String_inspires_awe
	}
	text = {
		trigger = {
			has_wonder_upgrade_flag = body_stash
		}
		localisation_key = String_remains_a_rumor
	}

	fallback_text = {
		localisation_key = String_most_recently_added
	}
}



defined_text = {
	name = GetMythologicalBeast

	use_first_valid = yes # Defaults to no

	fallback_text = {
		localisation_key = String_MythologicalBeast
	}
}


# Because the regular one probably does not need the water shenanigans... (GetTerrain, that is)
defined_text = { #Needs a province scope
	name = GetWonderTerrain

	use_first_valid = yes # Defaults to no

	text = {
		trigger = {
			is_using_ocean_background_trigger = yes
		}
		localisation_key = string_coast
	}
	text = {
		trigger = {
			terrain = forest
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_forest
	}
	text = {
		trigger = {
			terrain = hills
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_hills
	}
	text = {
		trigger = {
			terrain = mountain
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_mountains
	}
	text = {
		trigger = {
			terrain = plains
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_plains
	}
	text = {
		trigger = {
			terrain = farmlands
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_farmlands
	}
	text = {
		trigger = {
			terrain = steppe
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_steppe
	}
	text = {
		trigger = {
			terrain = desert
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_desert
	}
	text = {
		trigger = {
			terrain = jungle
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_jungle
	}
	text = {
		trigger = {
			terrain = arctic
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_arctic
	}
	fallback_text = {
		localisation_key = string_terrain
	}
}

defined_text = { ### Needs a province scope - USE ONLY TOGETHER WITH GetWonderTerrain! ###
	name = GetInOnWonderTerrainCap

	use_first_valid = yes # Defaults to no

	text = {
		trigger = {
			is_using_ocean_background_trigger = yes
		}
		localisation_key = string_On
	}
	text = {
		trigger = {
			terrain = forest
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_In
	}
	text = {
		trigger = {
			terrain = hills
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_In
	}
	text = {
		trigger = {
			terrain = mountain
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_In
	}
	text = {
		trigger = {
			terrain = plains
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_On
	}
	text = {
		trigger = {
			terrain = farmlands
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_On
	}
	text = {
		trigger = {
			terrain = steppe
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_On
	}
	text = {
		trigger = {
			terrain = desert
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_In
	}
	text = {
		trigger = {
			terrain = jungle
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_In
	}
	text = {
		trigger = {
			terrain = arctic
			is_using_ocean_background_trigger = no
		}
		localisation_key = string_In
	}
	fallback_text = {
		localisation_key = string_In
	}
}


defined_text = {
	name = GetHagiaSophiaUse

	use_first_valid = yes # Defaults to no

	text = {
		trigger = {
			has_wonder_flag = Hagia_Sophia_orthodox_cult
			#always = yes
		}
		localisation_key = string_Hagia_Sophia_Orthodox
	}
	text = {
		trigger = {
			has_wonder_flag = Hagia_Sophia_catholic_cult
		}
		localisation_key = string_Hagia_Sophia_Latin
	}
	text = {
		trigger = {
			has_wonder_flag = Hagia_Sophia_muslim_cult
		}
		localisation_key = string_Hagia_Sophia_Muslim
	}


	fallback_text = {
		localisation_key = string_pride_of_constantinople
	}
}



### TEMPLATE
#defined_text = {
#	name = GetWonderAdj
#
#	use_first_valid = yes # Defaults to no
#
#	text = {
#		trigger = { has_wonder_upgrade = upgrade_spikes }
#		localisation_key = String_Bloody
#	}
#	text = {
#		trigger = { has_wonder_flag = is_temple }
#		localisation_key = String_temple
#	}
#}
#
