############################################################
##################### Duel System V.02 #####################
############################################################

#Separated into new file, because there was just too much... Mostly chronologically used! As in, the higher up in the file, the earlier in the progress of a duel chain of some kind is where it's used.
apply_degree_of_dishonorable_duel_effect = { #Needs to be run in the scope of the *opponent* to check things correctly.
	if = {
		limit = { # As long as the person issuing the duel does not have a mission to duel this target...
			NOT = {
				is_quest_target_of = FROM
				FROM = {
					OR = {
						has_quest = quest_warrior_lodge_duel_honor
						has_quest = quest_warrior_lodge_duel_deadly
					}
				}
			}
		}
		#Major dishonor
	    if = {
	        limit = {
	        	OR = {
	        		AND = { #target is old (but not immortal)...
	                	age = 80
	        			NOT = { trait = immortal }
	        		}
	               	AND = { #target is a child, while attacker is adult...
	               		is_adult = no
	               		event_target:combatant_1 = { is_adult = yes }
	               	}
	               	AND = { #target is less than ten years old (while attacker is not)...
		               	NOT = { age = 10 }
		               	event_target:combatant_1 = { age = 10 }
					}
					AND = { #target has a *serious* disease and has NOT been treated *well* for it...
						character_disease_trigger = yes
						well_treated_for_disease_trigger = no
					}
					AND = { #Target has ANY disease, and has been *badly* treated for it...
						has_disease_trigger = yes
						poorly_treated_for_disease_trigger = yes #this should exclude lovers_pox (as it doesn't get treated)
					}
					has_injury_trigger = yes #target has an injury (wounded, or severly injured)...
					has_severe_disability_trigger = yes #target has serious disability... (blind, mangled, etc)

					AND = { #Target has any disease, and has not been treated/treated well for it, but is ALSO suffering from something from the medium category...
						OR = {
							character_disease_trigger = yes
							OR = { #lovers_pox excluded
								trait = scurvy
								trait = dancing_plague
								trait = ill
								trait = leper
							}
						}
						well_treated_for_disease_trigger = no
						OR = {
							age = 60 #target is old
							is_maimed_trigger = yes #has a maimed trait
							has_medium_disability_trigger = yes #limits the character to some extent
						}
					}
				}
	        }
			#effect
			custom_tooltip = {
	            text = dishonorable_duel_major_tooltip
	            hidden_tooltip = {
	                event_target:combatant_1 = { #hand out opinion malus with appropriate realm characters..
	                    any_realm_character = {
	                        limit = {
	                            NOT = { character = event_target:combatant_1 }
	                            OR = {
	                                trait = honest
	                                trait = kind
	                                trait = just
	                            }
	                        }
	                        opinion = {
	                            modifier = opinion_dishonorable_duel_major
	                            who = event_target:combatant_1
	                            months = 36
	                        }
	                    }
	                }
	            }
	        }
		}
	    #Medium dishonor
	    else_if = {
	        limit = {
	      		OR = {
	                age = 60 #target is old
					has_medium_disability_trigger = yes #limits the character to some extent
					character_disease_trigger = yes #Target has a *serious* disease (disregarding treatments)

					AND = { #Target has any disease, and has not been treated/treated well for it, while ALSO suffering from something minor...
						OR = {
							character_disease_trigger = yes
							OR = { #lovers_pox excluded
								trait = scurvy
								trait = dancing_plague
								trait = ill
								trait = leper
							}
						}
						well_treated_for_disease_trigger = no
						OR = {
							age = 50 #target is old
							is_maimed_trigger = yes #has a maimed trait
						}
					}
				}
	        }
	        #effect
			custom_tooltip = {
	            text = dishonorable_duel_medium_tooltip
	            hidden_tooltip = {
	                event_target:combatant_1 = { #hand out opinion malus with appropriate realm characters..
	                    any_realm_character = {
	                        limit = {
	                            NOT = { character = event_target:combatant_1 }
	                            OR = {
	                                trait = honest
	                                trait = kind
	                                trait = just
	                            }
	                        }
	                        opinion = {
	                            modifier = opinion_dishonorable_duel
	                            who = event_target:combatant_1
	                            months = 36
	                        }
	                    }
	                }
	            }
	        }
		}

		#Minor dishonor
		else_if = {
	        limit = {
	            OR = {
	                age = 50 #target is old...
	                is_maimed_trigger = yes #has a maimed trait
	                has_bruises_trigger = yes
				}
	        }
	        #effect
	        custom_tooltip = {
	            text = dishonorable_duel_minor_tooltip
	            hidden_tooltip = {
	                event_target:combatant_1 = { #hand out opinion malus with appropriate realm characters..
	                    any_realm_character = {
	                        limit = {
	                            NOT = { character = event_target:combatant_1 }
	                            OR = {
	                                trait = honest
	                                trait = kind
	                                trait = just
	                            }
	                        }
	                        opinion = {
	                            modifier = opinion_dishonorable_duel_minor
	                            who = event_target:combatant_1
	                            months = 36
	                        }
	                    }
	                }
	            }
	        }
	    }
    }
}

apply_any_applicable_harsh_penalties_effect = {
	if = {
		limit = {
			NOT = {
				has_game_rule = {
	                name = dueling
	                value = unrestricted
	            }
			}
		}
		if = { #If BOTH a female target and a priest...!
			limit = {
				is_female = yes #She's a woman
				NOT = { is_member_of_roots_warrior_lodge_trigger = yes } #She is not a warrior

	            #FROM and ROOT do NOT have gender equality in some form
	            NAND = {
	                OR = {
	                    trait = brave #She is brave
	                    gender_equality_trigger = yes
	                    female_warrior_culture_trigger = yes
	                    is_nomadic = yes
	                }
	                event_target:combatant_1 = { #Same as "FROM" in this case
	                    OR = {
	                        gender_equality_trigger = yes
	                        female_warrior_culture_trigger = yes
	                        is_nomadic = yes
	                    }
	                }
	            }
	            is_priest = yes #They are a priest
	            NOT = { event_target:combatant_1 = { female_warrior_culture_trigger = yes } } #Attacker is NOT pagan
			}
			custom_tooltip = { text = dueling_inappropriate_target_tt }
			# Instead of blocking the action completely...
			event_target:combatant_1 = {
				show_scope_change = no
				give_nickname = nick_priest_hater
				add_character_modifier = {
					modifier = uncivilized_dueler
					years = 10
				}
			}
		}
		else_if = { #If you're fighting a woman, and it'd be frowned upon within your religion/culture/laws because patriarchy
			limit = {
				is_female = yes #She's a woman
				NOT = { is_member_of_roots_warrior_lodge_trigger = yes } #She is not a warrior

	            #FROM and ROOT do NOT have gender equality in some form
	            NAND = {
	                OR = {
	                    trait = brave #She is brave
	                    gender_equality_trigger = yes
	                    female_warrior_culture_trigger = yes
	                    is_nomadic = yes
	                }
	                event_target:combatant_1 = { #Same as "FROM" in this case
	                    OR = {
	                        gender_equality_trigger = yes
	                        female_warrior_culture_trigger = yes
	                        is_nomadic = yes
	                    }
	                }
	            }
			}
			custom_tooltip = { text = dueling_inappropriate_target_tt }
			# Instead of blocking the action completely...
			event_target:combatant_1 = {
				show_scope_change = no
				add_character_modifier = {
					modifier = uncivilized_dueler
					years = 10
				}
			}
		}
		else_if = { #If they are a priest of some kind, while challenger is not pagan (as pagans don't care), fighting priests is frowned upon...
			limit = {
				is_member_of_any_warrior_lodge_trigger = no #They are not a warrior
	            is_priest = yes #They are a priest
	            NOT = { event_target:combatant_1 = { female_warrior_culture_trigger = yes } } #Attacker is NOT pagan
			}
			custom_tooltip = { text = dueling_inappropriate_target_tt }
			event_target:combatant_1 = {
				show_scope_change = no
				add_character_modifier = {
					modifier = uncivilized_dueler
					years = 5
				}
				give_nickname = nick_priest_hater
			}
		}
	}
}
set_dueling_weapon_effect = {
	if = { #First check if this a serious duel with real weapons or not...
		limit = { has_character_flag = mock_duel }

		clear_event_target = dueling_weapon_1 #so you don't fight a practice duel with the Staff of Moses
		clear_event_target = dueling_weapon_2

		clr_character_flag = weapon_is_sword #clear all old weapons (if any)
		clr_character_flag = weapon_is_scimitar
		clr_character_flag = weapon_is_axe
		clr_character_flag = weapon_is_mace
		clr_character_flag = weapon_is_spear
		clr_character_flag = weapon_is_staff
		clr_character_flag = weapon_is_hand
		clr_character_flag = weapon_is_arakh
		clr_character_flag = weapon_is_stiletto

		#select a weapon...
		if = {
			limit = { has_character_flag = finger_dance_duel }
			set_character_flag = weapon_is_axe
		}
		else_if = {
			limit = {
				OR = {
					has_character_flag = stealing_spearwife
					has_character_flag = stealing_spearwife_target
				}
			}
			set_character_flag = weapon_is_hand
		}
		else = {
			random_list = {
				10 = { set_character_flag = weapon_is_sword }
				10 = { set_character_flag = weapon_is_spear }
				10 = { set_character_flag = weapon_is_staff }
				10 = {
					trigger = { NOT = { trait = one_handed } } #probably shouldn't use both hands...
					set_character_flag = weapon_is_hand
				}
			}
		}
	}
	else_if = { #If not, check if you have an artifact you can use...
		limit = {
			any_artifact = {
				is_dueling_weapon_artifact_and_equipped = yes
			}
		}
		random_artifact = {
			limit = { is_dueling_weapon_artifact_and_equipped = yes }
			if = {
				limit = { event_target:combatant_1 = { character = PREVPREV } }
				save_event_target_as = dueling_weapon_1 #for loc purposes, kept separate
			}
			else = { #means you're the defender/combatant_2
				save_event_target_as = dueling_weapon_2 #for loc purposes, kept separate
			}
		}
		clr_character_flag = weapon_is_sword #clear all old weapons (if any)
		clr_character_flag = weapon_is_scimitar
		clr_character_flag = weapon_is_axe
		clr_character_flag = weapon_is_mace
		clr_character_flag = weapon_is_spear
		clr_character_flag = weapon_is_staff
		clr_character_flag = weapon_is_hand
		clr_character_flag = weapon_is_arakh
		clr_character_flag = weapon_is_stiletto
	}

	else_if = { #If no artifact, check that you haven't already used a real weapon before...
		limit = {
			NOR = {
				has_character_flag = weapon_is_sword
				has_character_flag = weapon_is_scimitar
				has_character_flag = weapon_is_axe
				has_character_flag = weapon_is_mace
				has_character_flag = weapon_is_spear
				has_character_flag = weapon_is_arakh
				has_character_flag = weapon_is_stiletto
			}
		}
		clr_character_flag = weapon_is_staff #clear mock weapons (if any)
		clr_character_flag = weapon_is_hand

		random_list = { #select a weapon...
			40 = {
				trigger = {
					NOT = { culture = dothraki }
				}
				modifier = {
					factor = 2
					trait = knight
					culture_group = andal
				}
				set_character_flag = weapon_is_sword
			}
			40 = {
				trigger = {
					OR = {
						culture_group = ghiscari_group
						culture_group = jogos_nhai_group
						culture_group = nghai_group
						culture_group = moraqi_group
						culture_group = yi_ti_group
						culture_group = jade_islands_group
						culture_group = asshai_group
						culture_group = qarth_group
					}
				}
				set_character_flag = weapon_is_scimitar
			}
			10 = {
				trigger = {
					NOT = { culture = dothraki }
				}
				modifier = {
					factor = 50
					trait = bearded_priest
				}
				modifier = {
					factor = 10
					culture = norvosi
				}
				set_character_flag = weapon_is_axe
			}
			10 = {
				trigger = {
					is_nomadic = no
				}
				set_character_flag = weapon_is_mace
			}
			10 = {
				trigger = {
					NOT = { culture = dothraki }
				}
				modifier = {
					factor = 8
					OR = {
						culture_group = dornish
						capital_scope = { culture_group = dornish }
					}
				}
				set_character_flag = weapon_is_spear
			}
			80 = {
				trigger = {
					OR = {
						culture = myrman
						capital_scope = { culture = myrman }
					}
				}
				set_character_flag = weapon_is_stiletto
			}
			120 = {
				trigger = {
					culture = dothraki
				}
				set_character_flag = weapon_is_arakh
			}
		}
	}
	else = {
		#Do nothing, use the weapon-flag you already have! :)
	}
}

evaluate_extra_duel_result_score_effect = { # [SPECIAL CIRCUMSTANCES - OPTIONAL]

	################################################################
	# 2. SPECIAL FLAGS SET: Has a chance of opening up new text and
	#	 effects in the results... (for overview, see below)

	################################################################
	# intrigue_options_available
	# is_friendly_fight
	# is_family_fight
	# is_rival_fight
	# fight_could_spark_romance
	# fight_could_spark_rivalry
	# fight_could_spark_friendship
	################################################################

	if = {
		limit = {
			OR = {
				intrigue = 15
				trait = elusive_shadow
				trait = schemer
			}
		}
		set_character_flag = intrigue_options_available #currently only for the attacker
	}
	if = {
		limit = {
			event_target:combatant_2 = { is_friend = ROOT }
		}
		set_character_flag = is_friendly_fight
		event_target:combatant_2 = { set_character_flag = is_friendly_fight }
	}
	if = {
		limit = {
			event_target:combatant_2 = { is_close_relative = ROOT }
		}
		set_character_flag = is_family_fight
		event_target:combatant_2 = { set_character_flag = is_family_fight }
	}
	if = {
		limit = {
			event_target:combatant_2 = { is_rival = ROOT }
		}
		set_character_flag = is_rival_fight
		event_target:combatant_2 = { set_character_flag = is_rival_fight }
	}
	if = {
		limit = {
			event_target:combatant_2 = {
				NOT = { is_lover = ROOT }
				possibly_romantically_interested_in_each_other_trigger = yes
			}
		}
		set_character_flag = fight_could_spark_romance
		event_target:combatant_2 = { set_character_flag = fight_could_spark_romance }
	}
	if = {
		limit = {
			event_target:combatant_2 = {
				OR = {
					potentially_interested_in_rivaling_root_trigger = yes
					root_potentially_interested_in_rivaling_this_trigger = yes
				}
			}
		}
		set_character_flag = fight_could_spark_rivalry
		event_target:combatant_2 = { set_character_flag = fight_could_spark_rivalry }
	}
	if = {
		limit = {
			event_target:combatant_2 = {
				NOT = { is_friend = ROOT }
				opinion = { who = ROOT value = 5 }
				reverse_opinion = { who = ROOT value = 5 }
				this_has_terrible_opinion_modifier_of_root_trigger = no
				root_has_terrible_opinion_modifier_of_this_trigger = no
			}
		}
		set_character_flag = fight_could_spark_friendship
		event_target:combatant_2 = { set_character_flag = fight_could_spark_friendship }
	}
}

#For giving out a maimed trait in the end, and for localization purposes... (apply_selected_duel_injury_effect)
set_potential_injury_flag_effect = {
	### Flags to handle potential injury (flag does not mean guarantee!)...
	# injury_both_eyes
	# injury_eye
	# injury_hand
	# injury_leg
	# injury_face
	# injury_mangled_body
	# injury_maimed (only without Reaper's Due)
	# injury_could_be_lethal (only if you have all the other injuries already)
	clr_character_flag = injury_both_eyes
    clr_character_flag = injury_eye
    clr_character_flag = injury_hand
    clr_character_flag = injury_leg
    clr_character_flag = injury_face
    clr_character_flag = injury_mangled_body
	clr_character_flag = injury_groin
	clr_character_flag = injury_fingers
    clr_character_flag = injury_maimed
    clr_character_flag = injury_could_be_lethal
	if = {
		limit = { has_dlc = Reapers }
		random_list = {
			10 = { #the eyes
				trigger = { NOT = { trait = blinded } }
				if = { limit = { trait = one_eyed }
					set_character_flag = injury_both_eyes
				}
				else = {
					set_character_flag = injury_eye
				}
			}
			10 = {
				trigger = { NOT = { trait = one_handed } }
				modifier = {
					factor = 5
					has_character_flag = finger_dance_duel
				}
				set_character_flag = injury_hand
			}
			2 = {
				trigger = { NOT = { has_character_modifier = lost_fingers } }
				modifier = {
					factor = 25
					has_character_flag = finger_dance_duel
				}
				set_character_flag = injury_fingers
			}
			10 = {
				trigger = { NOT = { trait = one_legged } }
				set_character_flag = injury_leg
			}
			2 = {
				trigger = { NOT = { trait = disfigured } }
				set_character_flag = injury_face
			}
			1 = {
				trigger = { NOT = { trait = mangled } }
				set_character_flag = injury_mangled_body
			}
			1 = {
				trigger = {
					is_female = no
					NOT = { trait = eunuch }
				}
				set_character_flag = injury_groin
			}
			10 = { #Only in case you already have ALL the other maimed traits?
				trigger = {
					trait = blinded
					trait = one_handed
					trait = one_legged
					trait = disfigured
					trait = mangled
				}
				set_character_flag = injury_could_be_lethal
			}
		}
	}
	else = { #without Reapers, chance to get the old trait (unless you already have it)...
		if = {
			limit = { NOT = { trait = maimed } }
			set_character_flag = injury_maimed
		}
		else = {
			set_character_flag = injury_could_be_lethal
		}
	}
}
#For loc purposes, mainly (can run from the immediate of duel result events!)...
set_winner_flags_and_save_opponent_effect = {
	save_event_target_as = root_character #for custom loc purposes!
	if = { #this means you were the attacker...
        limit = { event_target:combatant_1 = { character = ROOT } }
        event_target:combatant_2 = { save_event_target_as = other_combatant }
        set_character_flag = is_victorious_attacker
    }
    else = { #This means you were the defender...
        event_target:combatant_1 = { save_event_target_as = other_combatant }
        set_character_flag = is_victorious_defender
    }
    if = {
    	limit = { event_target:combatant_1 = { has_character_flag = mock_duel } }
    	sound_effect = legendary_gathering_win
    }
    else_if = {
    	limit = { event_target:combatant_1 = { has_character_flag = is_battlefield_duel } }
    	sound_effect = win_battle
    }
    else = {
    	sound_effect = duel_win
    }
    event_target:other_combatant = { save_event_target_as = kinslayer_target } #to check for kinslayer, later on
}
set_loser_flags_and_save_opponent_effect = {
	save_event_target_as = root_character
	if = { #this means you were the attacker...
   		limit = { event_target:combatant_1 = { character = ROOT } }
        event_target:combatant_2 = { save_event_target_as = other_combatant }
        set_character_flag = is_defeated_attacker
    }
    else = { #This means you were the defender...
        event_target:combatant_1 = { save_event_target_as = other_combatant }
        set_character_flag = is_defeated_defender
    }
    if = {
    	limit = {
    		event_target:combatant_1 = { has_character_flag = mock_duel }
    	}
    	sound_effect = legendary_gathering_lose
    }
    else_if = {
    	limit = { event_target:combatant_1 = { has_character_flag = is_battlefield_duel } }
    	sound_effect = lose_battle
    }
    else = {
    	sound_effect = duel_lose
    }
    event_target:other_combatant = { save_event_target_as = kinslayer_target } #to check for kinslayer, later on
}
apply_selected_duel_injury_effect = { #To be used in combination with set_potential_injury_flag_effect...
	if = { #if mild injury
    	limit = { has_character_flag = mildly_injured }
    	apply_duel_wounded_effect = yes
		clr_character_flag = mildly_injured
	}
	else_if = {
		limit = { has_character_flag = severely_injured }
		add_severely_injured_effect = yes
	}
	else = { #if more than mildly/severely injured
		trigger_switch = {
	        on_trigger = has_character_flag
	        injury_both_eyes = { remove_trait = one_eyed add_trait = blinded }
	        injury_eye = { add_trait = one_eyed }
	        injury_hand = { add_trait = one_handed }
	        injury_leg = { add_trait = one_legged }
	        injury_face = { add_trait = disfigured }
	        injury_mangled_body = { add_trait = mangled }
	        injury_maimed = { add_trait = maimed }
			injury_groin = { add_trait = eunuch }
			injury_fingers = { add_character_modifier = { name = lost_fingers duration = -1 } }
	    }

		#after all severe injuries...
		add_trait = severely_injured
		resolve_severely_injured_effect = yes

		if = { #In case character has *all* the maimed traits already...
			limit = {
				has_character_flag = injury_could_be_lethal #if scope is so injured they are likely to die from it
				character = ROOT #will only show if the current scope is ROOT
			}
			custom_tooltip = {
				text = you_crawl_off_and_die_tt
			}
		}
		clr_character_flag = actually_injured
	}
	if = {
		limit = { has_character_flag = duel_tactic_animal_DEATH }
		if = {
			limit = { trait = direwolf }
			remove_trait = direwolf
		}
		else_if = {
			limit = { trait = wolf }
			remove_trait = wolf
		}
		else_if = {
			limit = { trait = eagle }
			remove_trait = eagle
		}
		else_if = {
			limit = { trait = shadowcat }
			remove_trait = shadowcat
		}
		else_if = {
			limit = { trait = snowbear }
			remove_trait = snowbear
		}
		else_if = {
			limit = { trait = brownbear }
			remove_trait = brownbear
		}
		else_if = {
			limit = { trait = crow }
			remove_trait = crow
		}
		else_if = {
			limit = { trait = boar }
			remove_trait = boar
		}
		else_if = {
			limit = { trait = dog }
			remove_trait = dog
		}
		else_if = {
			limit = { has_character_modifier = pet_hunting_dog }
			remove_character_modifier = pet_hunting_dog
		}
		else_if = {
			limit = { has_character_modifier = pet_cat }
			remove_character_modifier = pet_cat
		}
		else_if = {
			limit = { has_character_modifier = nomad_warhorse }
			remove_character_modifier = nomad_warhorse
		}
		else_if = {
			limit = { has_character_modifier = pet_owl }
			remove_character_modifier = pet_owl
		}
		else_if = {
			limit = { has_character_modifier = pet_hunting_eagle }
			remove_character_modifier = pet_hunting_eagle
		}
		clr_character_flag = duel_tactic_animal_DEATH
		hidden_tooltip = {
			remove_character_modifier = formidable_animal_companion
			remove_character_modifier = animal_companion
			clr_character_flag = duel_tactic_animal
		}
	}
	clr_character_flag = injury_both_eyes
    clr_character_flag = injury_eye
    clr_character_flag = injury_hand
    clr_character_flag = injury_leg
    clr_character_flag = injury_face
    clr_character_flag = injury_mangled_body
	clr_character_flag = injury_groin
	clr_character_flag = injury_fingers
    clr_character_flag = injury_maimed
    clr_character_flag = injury_could_be_lethal
}

apply_duel_wounded_effect = { #To be used in particular in mock-duels (flag check before this effect!)...
	trigger_switch = {
        on_trigger = has_character_flag
        injury_both_eyes = {
			add_character_modifier = {
				modifier = black_eye
				months = 1
			}
        }
        injury_eye = {
        	add_character_modifier = {
				modifier = black_eye
				months = 1
			}
        }
        injury_hand = {
			if = {
				limit = { has_character_flag = finger_dance_duel }
				add_character_modifier = {
					modifier = cut_hand
					months = 1
				}
			}
			else = {
				add_character_modifier = {
					modifier = swollen_wrist
					months = 1
				}
			}
        }
        injury_leg = {
        	add_character_modifier = {
				modifier = swollen_ankle
				months = 1
			}
        }
        injury_face = {
        	add_character_modifier = {
				modifier = concussion
				months = 1
			}
        }
        injury_mangled_body = {
        	add_character_modifier = {
				modifier = cracked_ribs
				months = 1
			}
        }
        injury_maimed = {
        	add_character_modifier = {
				modifier = badly_bruised
				months = 1
			}
        }
		injury_groin = {
			fertility = -0.05
			add_character_modifier = {
				modifier = bruised_groin
				months = 1
			}
		}
		injury_fingers = {
			add_character_modifier = {
				modifier = cut_hand
				months = 1
			}
        }
        injury_could_be_lethal = {
        	apply_random_minor_injury_effect = yes
        }
    }
}

apply_random_minor_injury_effect = {
	random_list = {
		10 = {
			add_character_modifier = {
				modifier = black_eye
				months = 10
			}
		}
		10 = {
			add_character_modifier = {
				modifier = badly_bruised
				months = 10
			}
		}
		10 = {
			add_character_modifier = {
				modifier = swollen_wrist
				months = 10
			}
		}
		10 = {
			add_character_modifier = {
				modifier = swollen_ankle
				months = 10
			}
		}
		10 = {
			add_character_modifier = {
				modifier = sore_muscles
				months = 10
			}
		}
		10 = {
			add_character_modifier = {
				modifier = cracked_ribs
				months = 10
			}
		}
		10 = {
			add_character_modifier = {
				modifier = concussion
				months = 10
			}
		}
		10 = {
			add_character_modifier = {
				modifier = cut_hand
				months = 10
			}
		}
	}
}

#Checks some goodies, adds prestige, progresses achievement, kinslayer, shows relevant tooltips, etc...
apply_generic_duel_victory_effect = {
	if = { limit = { has_character_flag = mock_duel }
    	prestige = 15
    	#Run appropriate effects for joining or not joining the society
	}
	else = {
		if = { limit = { has_character_flag = is_rival_fight }
			prestige = 100
		}
		else = {
			prestige = 50
		}
	}
	if = {
		limit = { has_character_flag = someone_died }
		add_kinslayer_trait_effect = yes #requires event_target:kinslayer_target (set in set_winner/loser_flags_and_save_opponent_effect)
	}
	if = {
		limit = {
			NOT = { has_character_flag = mock_duel } #should not happen if mock_duel
			event_target:other_combatant = { #if they were so injured they were likely to die if injured
				has_character_flag = injury_could_be_lethal
			}
		}
		custom_tooltip = { text = they_crawl_off_and_die_tt }
	}
	if = {
		limit = {
			OR = {
				has_character_flag = is_victorious_attacker
				has_character_flag = is_victorious_defender
			}
		}

		add_character_modifier = {
			modifier = recent_duel_victory
			months = 12 #also clears upon new duel!
		}
		# hidden_effect = { character_event = { id = 720 } } # Bring it On achievement check event
	}
}


apply_generic_duel_defeat_effect = { #Is this even needed? Might be handled by apply_selected_duel_injury_effect
	if = {
    	limit = { has_character_flag = mock_duel }
    	###Run appropriate effects for joining or not joining the society
	}
	if = {
    	limit = { has_character_flag = someone_died }
		#"#any effects that might need to be added?
	}
	if = {
		limit = {
			OR = {
				has_character_flag = is_defeated_attacker
				has_character_flag = is_defeated_defender
			}
		}
		##something
	}
}

handle_claim_duel_result_effect = {
	if = { # Only for CLAIM duels...
		limit = { event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 } }
		if = {  # if you are the *attacker* ...
			limit = { event_target:combatant_1 = { character = PREV } }
			if = {
				limit = {
					OR = { # and you *won*...
						has_character_flag = is_victorious_attacker
						has_character_flag = is_victorious_defender
					}
				}
				if = { # And there are multiple titles you want...
					limit = { has_character_flag = wants_multiple_titles_from@event_target:combatant_2 }
					log = "[This.GetBestName] - I am the victorious winner and I grab titles!"
					custom_tooltip = {
						text = you_take_their_titles_and_all_under_it_tt
						event_target:combatant_2 = { # Grab titles from target...!
							while = {
								limit = {
									event_target:combatant_2 = {
										any_demesne_title = {
											event_target:combatant_1 = { has_strong_claim = PREV }
										}
									}
								}
								random_demesne_title = {
									limit = { event_target:combatant_1 = { has_strong_claim = PREV } }
									event_target:combatant_1 = {
										usurp_title = {
											target = PREV
											type = duel
										}
										vassalize_or_take_under_title = {
											title = PREV
											enemy = event_target:combatant_2
											type = duel
										}
									}
								}
								log = "[This.GetBestName] is grabbed by [combatant_1.GetBestName]"
							}
						}
					}
				}
				else_if = { # If it's only a matter of ONE title, usurp that one...
					limit = { has_character_flag = wants_single_title_from@event_target:combatant_2 }
					custom_tooltip = {
						text = you_take_their_title_and_all_under_it_attacker_tt
						event_target:target_title = {
							event_target:combatant_1 = {
								usurp_title = {
									target = event_target:target_title # Grab this one title...!
									type = duel
								}
								vassalize_or_take_under_title = {
									title = PREV
									enemy = event_target:combatant_2
									type = duel
								}
							}
						}
					}
				}
			}
			else = { #means you lost...
				if = {
					limit = { has_character_flag = wants_single_title_from@event_target:combatant_2 }
					custom_tooltip = {
						text = your_claim_is_lost_attacker_tt
						remove_claim = event_target:target_title
					}
				}
				else = {
					custom_tooltip = {
						text = your_claims_are_lost_tt
						event_target:combatant_2 = {
							any_demesne_title = {
								limit = { event_target:combatant_1 = { has_strong_claim = PREV } }
								event_target:combatant_1 = { remove_claim = PREV }
							}
						}
					}

				}

				if = { #If defender happens to have claims of their own, *they* take titles....
					limit = {
						event_target:combatant_1 = {
							any_demesne_title = {
								event_target:combatant_2 = { has_strong_claim = PREV }
							}
						}
					}
					custom_tooltip = { text = they_take_your_titles_tt }
				}
			}
		}

	###	#################################### #### #### ####

		else_if = { # If you are the *defender*...
			limit = { event_target:combatant_2 = { character = PREV } }
			if = {
				limit = {
					OR = { #and you *won*...
						has_character_flag = is_victorious_attacker
						has_character_flag = is_victorious_defender
					}
				}
				if = { #If defender happens to have claims of their own, *they* take titles....
					limit = {
						event_target:combatant_1 = {
							any_demesne_title = {
								event_target:combatant_2 = { has_strong_claim = PREV }
							}
						}
					}

					if = { # If claims on *multiple* titles...
						limit = {
							event_target:combatant_1 = {
								any_demesne_title = {
									count > 1
									event_target:combatant_2 = { has_strong_claim = PREV }
								}
							}
						}
						custom_tooltip = {
							text = you_take_their_titles_and_all_under_it_tt
							event_target:combatant_1 = { # Grab titles from target...!
								while = {
									limit = {
										any_demesne_title = {
											event_target:combatant_2 = { has_strong_claim = PREV }
										}
									}
									random_demesne_title = {
										limit = { event_target:combatant_2 = { has_strong_claim = PREV } }
										event_target:combatant_2 = {
											usurp_title = {
												target = PREV
												type = duel
											}
											vassalize_or_take_under_title = {
												title = PREV
												enemy = event_target:combatant_1
												type = duel
											}
										}
									}
									log = "[This.GetBestName] is grabbed by [combatant_2.GetBestName]"
								}
							}
						}
					}
					else = { # Only one claim...
						custom_tooltip = {
							text = you_take_their_title_and_all_under_it_defender_tt
							event_target:combatant_1 = {
								random_demesne_title = {
									limit = { event_target:combatant_2 = { has_strong_claim = PREV } }
									event_target:combatant_2 = {
										usurp_title = {
											target = PREV
											type = duel
										}
										vassalize_or_take_under_title = {
											title = PREV
											enemy = event_target:combatant_1
											type = duel
										}
									}
								}
							}
						}
					}
				}
			}
			else = { # you *lost*...
				log = "CLAIM DUEL: I am [This.GetBestName] and all my titles (like [This.PrimaryTitle.GetName]) are belong to [combatant_1.GetBestName]"
				if = { # Attacker has claims, and they take the titles they came for....
					limit = {
						event_target:combatant_2 = {
							any_demesne_title = {
								event_target:combatant_1 = { has_strong_claim = PREV }
							}
						}
					}
					custom_tooltip = { text = they_take_your_titles_tt }
				}
				if = {
					limit = { #If losing defender has claims on any titles of the attacker...
						event_target:combatant_1 = {
							any_demesne_title = {
								event_target:combatant_2 = { has_strong_claim = PREV }
							}
						}
					}
					custom_tooltip = {
						text = your_claims_are_lost_tt
						event_target:combatant_1 = {
							any_demesne_title = {
								limit = { event_target:combatant_2 = { has_strong_claim = PREV } }
								event_target:combatant_2 = { remove_claim = PREV }
							}
						}
					}
				}
			}
		}
	}
}

remove_all_claims_for_combatant_1_effect = {
	if = {
		limit = { has_character_flag = wants_single_title_from@event_target:combatant_2 }
		custom_tooltip = {
			text = your_claim_is_lost_attacker_tt
			remove_claim = event_target:target_title
		}
	}
	else = {
		custom_tooltip = {
			text = your_claims_are_lost_tt
			event_target:combatant_2 = {
				any_demesne_title = {
					limit = { event_target:combatant_1 = { has_strong_claim = PREV } }
					event_target:combatant_1 = { remove_claim = PREV }
				}
			}
		}

	}
}

remove_all_claims_for_combatant_2_effect = {
	custom_tooltip = {
		text = your_claims_are_lost_tt
		event_target:combatant_1 = {
			any_demesne_title = {
				limit = { event_target:combatant_2 = { has_strong_claim = PREV } }
				event_target:combatant_2 = { remove_claim = PREV }
			}
		}
	}
}

apply_merciful_modifier_effect = { #For Claim Duels
	if = { #for attacker...
		limit = { character = event_target:combatant_1 }
		add_character_modifier = {
            modifier = merciful_attacker
            years = 5
        }
	}
	else = { #for defender...
		if = {
			limit = {
				sibling = event_target:combatant_1
				is_female = yes
			}
			add_character_modifier = {
	            modifier = merciful_sister
	            years = 5
	        }
		}
		else_if = {
			limit = {
				sibling = event_target:combatant_1
				is_female = no
			}
			add_character_modifier = {
	            modifier = merciful_brother
	            years = 5
	        }
		}
		else = {
			add_character_modifier = {
	            modifier = merciful_defender
	            years = 5
	        }
		}
	}

}

handle_warrior_lodge_induction_effect = { #Will only affect those trying to join warrior lodges...
	hidden_effect = {
		if = {
        	limit = { has_character_flag = awaiting_initiation_trial }
        	if = {
        		limit = { has_character_flag = mildly_injured }
        		set_character_flag = was_mildly_injured
        	}
        	if = {
        		limit = { has_character_flag = actually_injured }
        		set_character_flag = was_actually_injured
        	}
			set_character_flag = medium_reward
			if = {
				limit = {
					NOT = { has_character_flag = duel_ended_in_draw }
					is_maimed_trigger = no
				}
				set_character_flag = medium_reward
			}
        	# if = {
        		# limit = {
        			# OR = {
						# has_character_flag = is_victorious_attacker
						# has_character_flag = is_victorious_defender
        			# }
        			# NOR = {
        				# has_character_flag = stalemate_won
						# has_character_flag = stalemate_lost
        			# }
        		# }
        		# #Medium power boon upon joining
        		# set_character_flag = medium_reward
				# #Small chance of befriending your duel target
				# #Small chance of becoming rivals with your target
				# #Small chance of getting wounded

        	# }
        	# if = {
        		# limit = {
					# OR = {
						# has_character_flag = stalemate_won
						# has_character_flag = stalemate_lost
					# }
        		# }
        		# #Low power boon upon joining
        		# set_character_flag = minor_reward
				# #Big chance of befriending your duel target
				# #Big chance of becoming rivals with your target
				# #Medium chance of getting wounded
        	# }
        	if = {
        		limit = { has_character_modifier = warrior_lodge_failed_joining_cd }
        		set_character_flag = duel_fled
        	}

        	character_event = { id = HF.10011 }
        }
		FROM = {
			if = {
				limit = { has_character_flag = awaiting_initiation_trial }
				if = {
					limit = { is_maimed_trigger = yes }
					set_character_flag = was_actually_injured
				}
				else = {
					set_character_flag = was_mildly_injured
				}
				# if = {
					# limit = {
						# OR = {
							# has_character_flag = is_defeated_attacker
							# has_character_flag = is_defeated_defender
						# }
						# NOR = {
							# has_character_flag = stalemate_won
							# has_character_flag = stalemate_lost
						# }
					# }
					# #Small chance of befriending your duel target
					# #Small chance of becoming rivals with your target
					# #High chance of getting wounded

				# }
				if = {
					limit = { has_character_modifier = warrior_lodge_failed_joining_cd }
					set_character_flag = duel_fled
				}

				character_event = { id = HF.10011 }
			}
		}
	}
}

handle_poison_effect = { #shows tooltips, etc
	if = {
		limit = {
			has_character_flag = add_duel_xp
			OR = {
				event_target:combatant_1 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					event_target:combatant_2 = {
						has_character_flag = defender_using_poison@event_target:combatant_1 #and they tried to poison you
					}
				}
				event_target:combatant_2 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					event_target:combatant_1 = {
						has_character_flag = attacker_using_poison@event_target:combatant_2 #and they tried to poison you
					}
				}
			}
			OR = {	#and you lost
				has_character_flag = is_defeated_attacker
				has_character_flag = is_defeated_defender
			}
			NOT = { has_character_flag = someone_died }	#but no one died
		}
		custom_tooltip = { text = suspect_foul_play_tt }
	}
	else_if = {
		limit = {
			has_character_flag = add_duel_xp
			OR = {
				event_target:combatant_1 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					event_target:combatant_2 = {
						has_character_flag = defender_using_poison@event_target:combatant_1 #and they tried to poison you
					}
				}
				event_target:combatant_2 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					event_target:combatant_1 = {
						has_character_flag = attacker_using_poison@event_target:combatant_2 #and they tried to poison you
					}
				}
			}
			OR = {	#and you lost
				has_character_flag = is_defeated_attacker
				has_character_flag = is_defeated_defender
			}
			has_character_flag = someone_died #and you died
		}
		custom_tooltip = { text = definitely_foul_play_tt }
	}
	else_if = {
		limit = {
			has_character_flag = add_duel_xp
			OR = {
				event_target:combatant_1 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					has_character_flag = attacker_using_poison@event_target:combatant_2 #and you tried to poison opponent
				}
				event_target:combatant_2 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					has_character_flag = defender_using_poison@event_target:combatant_1 #and you tried to poison opponent
				}
			}
			OR = {	#but you lost
				has_character_flag = is_defeated_attacker
				has_character_flag = is_defeated_defender
			}
			NOT = { has_character_flag = someone_died }	#and no one died
		}
		custom_tooltip = { text = so_much_for_poison_tt }
	}
	else_if = {
		limit = {
			has_character_flag = add_duel_xp
			OR = {
				event_target:combatant_1 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					has_character_flag = attacker_using_poison@event_target:combatant_2 #and you tried to poison opponent
				}
				event_target:combatant_2 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					has_character_flag = defender_using_poison@event_target:combatant_1 #and you tried to poison opponent
				}
			}
			OR = { #and you won
				has_character_flag = is_victorious_attacker
				has_character_flag = is_victorious_defender
			}
			NOT = { has_character_flag = someone_died }	#but no one died
		}
		custom_tooltip = { text = poison_was_only_mildly_effective_tt }
	}
	else_if = {
		limit = {
			has_character_flag = add_duel_xp
			OR = {
				event_target:combatant_1 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					has_character_flag = attacker_using_poison@event_target:combatant_2 #and you tried to poison opponent
				}
				event_target:combatant_2 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					has_character_flag = defender_using_poison@event_target:combatant_1 #and you tried to poison opponent
				}
			}
			OR = { #and you won
				has_character_flag = is_victorious_attacker
				has_character_flag = is_victorious_defender
			}
			has_character_flag = someone_died #and someone died
		}
		custom_tooltip = { text = poison_was_very_effective_tt }
	}
	else_if = {
		limit = {
			OR = {
				event_target:combatant_1 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					has_character_flag = attacker_using_poison@event_target:combatant_2 #and you tried to poison opponent
				}
				event_target:combatant_2 = { #if you are the person seeing the event
					character = ROOT
					character = PREV
					has_character_flag = defender_using_poison@event_target:combatant_1 #and you tried to poison opponent
				}
			}
			OR = {	#but you lost
				has_character_flag = is_defeated_attacker
				has_character_flag = is_defeated_defender
			}
			has_character_flag = someone_died #and you died
		}
		custom_tooltip = { text = so_much_for_poison_tt }
	}
}

clean_up_after_duel_effect = { #Runs for both combatant_1 and 2
	#handle_poison_effect = yes
	# if = {
		# limit = {
			# has_character_flag = add_duel_xp
			# NAND = {
				# has_character_flag = someone_died
				# OR = {
					# has_character_flag = is_defeated_attacker
					# has_character_flag = is_defeated_defender
				# }
			# }
		# }
		# increase_duel_exp_modifier_effect = yes
	# }
	hidden_tooltip = {
		if = { #Give troops to winner of event-duel.
			limit = {
				has_character_flag = flag_pirate_fighting_mercenary_leader
			}
			character_event = { id = HF.23218 }
		}
		# if = { #Courtier wrestles regency.
			# limit = {
				# has_character_flag = flag_courtier_challenging_regent
				# OR = {
					# has_character_flag = is_victorious_attacker
					# has_character_flag = is_victorious_defender
				# }
			# }
			# character_event = { id = 61229 }
		# }
	}
	# if = {
		# limit = { NOT = { has_character_flag = skip_blood_effect } }
		# add_blood_splatter_effect = yes
		# clr_character_flag = skip_blood_effect
	# }


	if = {
		limit = {
			is_alive = yes
		}
		hidden_effect = {
			set_variable = { #Reset duel score
				which = duel_result_score #50
				value = 0 #set to zero so can be cleared on save
			}

			handle_warrior_lodge_induction_effect = yes
		}
	}

	resolve_legendary_duel_effect = yes #if this was part of legendary journey (Warrior Lodge only)

	rank_up_to_hero_level_effect = yes
	clr_duel_missions_effect = yes
}
clr_duel_missions_effect = {
	### For warrior lodge mission duels...
	if = {
		limit = { has_character_flag = failed_mission }
		detract_society_currency_medium_effect = yes
		clr_quest = { id = quest_warrior_lodge_duel_deadly failure = yes }
		clr_character_flag = failed_mission
	}
	else = { #means you succeeded your mission!
		if = {
			limit = { event_target:combatant_1 = { character = PREV } } #if you are the attacker...
			if = {
				limit = {
	                has_quest = quest_warrior_lodge_duel_honor
	                quest_target = { character = event_target:combatant_2 }
				}
				if = {
					limit = {
						OR = {
							has_character_flag = is_victorious_attacker
							has_character_flag = is_victorious_defender
						}
					}
					if = { #this missions gives more reward for deadly outcomes...
						limit = { has_character_flag = someone_died }
						add_society_currency_major_effect = yes
					}
					else = {
						add_society_currency_medium_effect = yes
					}
				}
				else = {
					add_society_currency_minor_effect = yes
				}
				clr_quest = quest_warrior_lodge_duel_honor
			}
			else_if = {
				limit = {
					has_quest = quest_warrior_lodge_duel_deadly
	                quest_target = { character = event_target:combatant_2 }
				}
				if = {
					limit = {
						OR = {
							has_character_flag = is_victorious_attacker
							has_character_flag = is_victorious_defender
						}
					}
					if = { #this missions gives more reward for deadly outcomes...
						limit = { has_character_flag = someone_died }
						add_society_currency_major_effect = yes
					}
					else = {
						add_society_currency_medium_effect = yes
					}
				}
				else = {
					detract_society_currency_minor_effect = yes
				}
				clr_quest = quest_warrior_lodge_duel_deadly
			}
		}
		else = { #Means you are player 2/defender...
			if = {
				limit = {
	                has_quest = quest_warrior_lodge_duel_honor
	                quest_target = { character = event_target:combatant_1 }
				}
				if = {
					limit = {
						OR = {
							has_character_flag = is_victorious_attacker
							has_character_flag = is_victorious_defender
						}
					}
					add_society_currency_medium_effect = yes
				}
				else = {
					add_society_currency_minor_effect = yes
				}
				clr_quest = quest_warrior_lodge_duel_honor
			}
			else_if = {
				limit = {
					has_quest = quest_warrior_lodge_duel_deadly
	                quest_target = { character = event_target:combatant_1 }
				}
				if = {
					limit = {
						OR = {
							has_character_flag = is_victorious_attacker
							has_character_flag = is_victorious_defender
						}
					}
					add_society_currency_medium_effect = yes
				}
				else = {
					detract_society_currency_minor_effect = yes
				}
				clr_quest = quest_warrior_lodge_duel_deadly
			}
		}
	}
}

rank_up_to_hero_level_effect = {
	### For warrior lodge rank-up duels...
	if = {
		limit = { has_character_flag = fighting_to_rank_up } #ensures it only runs for the player...
		if = { #If the target is still alive...
			limit = { FROM = { is_alive = yes } }
			FROM = {
				character_event = { id = HF.10061 } #Send outcome ping to the duel target...
			}
		}
		else = {
			FROM = { #choose a hero target to deliver the news instead...
				any_society_member = {
					limit = {
						society_rank == 4
					}
					score_value = { #Prioritizes selecting some kind of warrior...
						value = 10
						good_soldier_outcome_score = yes
					}
					save_event_target_as = hero_character
					character_event = { id = HF.10061 } #Send outcome...
				}
			}
		}
	}
	else_if = {
		limit = { FROM = { has_character_flag = fighting_to_rank_up } }
		FROM = { letter_event = { id = HF.10063 } }
	}
}

send_notifications_after_champion_stand_in_effect = {
	if = {
		limit = {
			has_character_flag = is_battlefield_duel
			event_target:commander_to_the_rescue = { character = PREV } #if you are the rescuer...
		}
		if = {
			limit = {
				NOR = {
					has_character_flag = is_defeated_attacker
					has_character_flag = is_defeated_defender
				}
			}
			set_character_flag = won_battlefield_duel
		}
		else = {
			set_character_flag = lost_battlefield_duel
		}
		hidden_effect = {
			if = {
				limit = {
					home_commander_and_liege_are_different_characters = yes
				}
				event_target:home_commander = {
					character_event = { id = HFP.11040 } #Let the original *commander* know what happened...
				}
				event_target:home_liege = {
					character_event = { id = HFP.11041 } #Let the original *liege* know what happened...
				}
			}
			else = {
				event_target:home_commander = {
					character_event = { id = HFP.11040 } #Let the original *commander* know what happened...
				}
			}
		}
	}
}

clr_duel_flags_effect = {
	hidden_effect = {
		#AGOT
		clr_character_flag = duel_ended_in_draw
		clr_character_flag = flag_duel_friendly
		clr_character_flag = flag_duel_to_the_death
		clr_character_flag = finger_dance_duel
		clr_character_flag = duel_can_be_draw
		#############################
		# Clear kill/mercy flags
		clr_character_flag = flag_killed_opponent
		clr_character_flag = flag_spared_opponent

        #Clears all flags...
		clr_character_flag = flag_antagonizer_duel
		clr_character_flag = mock_duel
		clr_character_flag = deadly_duel #not yet used?
		clr_character_flag = about_to_challenge_enemy_commander
		clr_character_flag = is_legendary_duel
		clr_character_flag = is_battlefield_duel
		clr_character_flag = battle_event_in_progess
		clr_character_flag = someone_died
		clr_character_flag = is_defeated_attacker
	    clr_character_flag = is_defeated_defender
	    clr_character_flag = is_victorious_attacker
	    clr_character_flag = is_victorious_defender
	    clr_character_flag = intrigue_options_available
	    clr_character_flag = is_friendly_fight
		clr_character_flag = is_family_fight
		clr_character_flag = is_rival_fight
		clr_character_flag = fight_could_spark_romance
		clr_character_flag = fight_could_spark_rivalry
		clr_character_flag = fight_could_spark_friendship
		clr_character_flag = injury_both_eyes
	    clr_character_flag = injury_eye
	    clr_character_flag = injury_hand
	    clr_character_flag = injury_leg
	    clr_character_flag = injury_face
	    clr_character_flag = injury_mangled_body
	    clr_character_flag = injury_maimed
	    clr_character_flag = injury_could_be_lethal
	    clr_character_flag = clumsy_double_KO
	    clr_character_flag = elegant_double_KO
	   	clr_character_flag = mildly_injured
	   	clr_character_flag = severely_injured
	    clr_character_flag = actually_injured
	    clr_character_flag = ignore_damage
		clr_character_flag = injury_kills
	    clr_character_flag = desc_A
        clr_character_flag = desc_B
        clr_character_flag = desc_C
        clr_character_flag = desc_D
        clr_character_flag = desc_E
        clr_character_flag = stalemate_won
        clr_character_flag = stalemate_lost
        clr_character_flag = add_duel_xp
		clr_character_flag = target_was_threatened
	    clr_character_flag = flag_duel_no_draws
		clr_character_flag = flag_pirate_fighting_mercenary_leader
		clr_character_flag = flag_courtier_challenging_regent
		clr_character_flag = claim_duel@event_target:combatant_2
		clr_character_flag = wants_multiple_titles_from@event_target:combatant_2
		clr_character_flag = wants_single_title_from@event_target:combatant_2
		clr_character_flag = is_spared_poisoner
		clr_character_flag = attacker_using_poison@event_target:combatant_2
		clr_character_flag = poison_can_fail_against@event_target:combatant_2
		clr_character_flag = defender_using_poison@event_target:combatant_1
		clr_character_flag = poison_can_fail_against@event_target:combatant_1
		clr_character_flag = use_tribal_victory_pic
		clr_character_flag = use_tribal_victory_pic
	}
}

# increase_duel_exp_modifier_effect = {  #Modifiers gotten at end-states a duel
	# if = {
		# limit = { has_duel_exp_modifier_trigger = yes }
		# custom_tooltip = { text = increase_duel_exp_tt }
		# hidden_effect = {
			# trigger_switch = {
				# on_trigger = has_character_modifier
				# duel_exp_1 = {
					# remove_character_modifier = duel_exp_1
					# add_character_modifier = {
			    		# name = duel_exp_2
			    		# duration = 2555
			    	# }
				# }
				# duel_exp_2 = {
					# remove_character_modifier = duel_exp_2
					# add_character_modifier = {
			    		# name = duel_exp_3
			    		# duration = 2555
			    	# }
				# }
				# duel_exp_3 = {
					# remove_character_modifier = duel_exp_3
					# add_character_modifier = {
			    		# name = duel_exp_4
			    		# duration = 2555
			    	# }
				# }
				# duel_exp_4 = {
					# remove_character_modifier = duel_exp_4
					# add_character_modifier = {
			    		# name = duel_exp_5
			    		# duration = 2555
			    	# }
				# }
				# duel_exp_5 = {
					# remove_character_modifier = duel_exp_5
					# add_character_modifier = {
			    		# name = duel_exp_6
			    		# duration = 2555
			    	# }
				# }
				# duel_exp_6 = {
					# remove_character_modifier = duel_exp_6
					# add_character_modifier = {
			    		# name = duel_exp_7
			    		# duration = 2555
			    	# }
				# }
				# duel_exp_7 = {
					# remove_character_modifier = duel_exp_7
					# add_character_modifier = {
			    		# name = duel_exp_8
			    		# duration = 2555
			    	# }
				# }
				# duel_exp_8 = {
					# add_character_modifier = {
			    		# name = duel_exp_8
			    		# duration = 2555
			    	# }
				# }
			# }
		# }
	# }
	# else = {
		# add_character_modifier = {
    		# name = duel_exp_1
    		# duration = 2555
    	# }
	# }
# }

spread_cowardice_trait_effect = { # Send an event to random subject, where they share in the guilt and shame and might be come Cowards themselves. Or angry, encouraging liege to stop being such a Coward.
	any_courtier_or_vassal = {
		limit = {
			age = 14
			NOT = { trait = craven }
			NOT = { has_character_flag = reacting_to_craven_duelist }
			NOT = {
    			has_opinion_modifier = {
					modifier = opinion_declined_my_duel
					who = PREV
				}
			}
			is_inaccessible_or_incapable_trigger = no
		}
		count = 1
		score_value = { #Prioritizes selecting an interesting courtier...
            value = 10
            interesting_courtier_selection_score = yes
        }
		set_character_flag = reacting_to_craven_duelist
		character_event = {
			id = HF.16000 days = 10 random = 5
		}
	}
}

increase_cowardly_status_effect = { # run in combatant_2/defender scope, with FROM as combatant_1/attacker
	add_character_modifier = { #hidden
		name = duels_declined #to track TOTAL amounts of challenges rejected
		duration = -1
		stacking = yes
		hidden = yes
	}

	if = {
		limit = {
			has_instances_of_character_modifier = {
				modifier = duels_declined
				amount = 3
			}
		}
	    hidden_effect = {
	    	if = {
	    		limit = { trait = craven }
	      		spread_cowardice_trait_effect = yes #Send event to random subject
	    	}
	    }
	}
	if = {
		limit = {
			has_instances_of_character_modifier = {
				modifier = duels_declined
				amount = 5
			}
		}
	    hidden_effect = {
	      	spread_cowardice_trait_effect = yes #Send event to random subject
	    }
	}
	if = {
		limit = {
			has_instances_of_character_modifier = {
				modifier = duels_declined
				amount = 5
			}
		}
	    hidden_effect = {
	      	spread_cowardice_trait_effect = yes #Send event to random subject
	    }
	}
	else_if = {
		limit = {
			has_instances_of_character_modifier = {
				modifier = duels_declined
				amount = 10
			}
		}
    	give_nickname = nick_the_cowardly
    	hidden_effect = {
	      	spread_cowardice_trait_effect = yes #Send event to random subject
	    }
	}
}

increase_troublemaker_status_effect = {
	add_character_modifier = { #hidden
		name = trigger_happy #to track TOTAL amounts of challenges issued
		duration = -1
		stacking = yes
		hidden = yes
	}
	if = {
		limit = {
			has_instances_of_character_modifier = {
				modifier = trigger_happy
				amount = 10
			}
		}
        give_nickname = nick_the_belligerent
	}
    else = {
    	#Do nothing
    }
}

increase_duel_exp_modifier_effect = {
	# Add the Duel Experience Modifier - It is very mild, so it can be given out multiple times
	custom_tooltip = { text = increase_duel_exp_tt }
	hidden_effect = {
		# You always get one level
		add_one_duel_experience_modifier = yes

		# If you're victorious, you gain one extra level, and two small chances for more
		if = {
			limit = {
				OR = {
					has_character_flag = is_victorious_attacker
					has_character_flag = is_victorious_defender
				}
			}
			add_one_duel_experience_modifier = yes
			small_chance_for_one_duel_experience_modifier = yes
			small_chance_for_one_duel_experience_modifier = yes
		}
		# If you're defeated you gain five small chances for more, as you may or may not pick something up
		if = {
			limit = {
				OR = {
					has_character_flag = is_defeated_attacker
					has_character_flag = is_defeated_defender
				}
			}
			small_chance_for_one_duel_experience_modifier = yes
			small_chance_for_one_duel_experience_modifier = yes
			small_chance_for_one_duel_experience_modifier = yes
			small_chance_for_one_duel_experience_modifier = yes
			small_chance_for_one_duel_experience_modifier = yes
		}

		# Apply hidden 'practical' duel experience, which can give you special modifiers
		if = {
			limit = {
				NOT = {
					has_character_flag = mock_duel # Mock duels gives you Personal Combat Skill, but do not bring any other benefits
				}
			}
			change_variable = { which = duel_experience_level value = 1 }
			if = { # Victories give more experience levels
				limit = {
					OR = {
						has_character_flag = is_victorious_attacker
						has_character_flag = is_victorious_defender
					}
				}
				change_variable = { which = duel_experience_level value = 1 }
			}
			if = { # Fighting Rivals give more experience levels
				limit = {
					has_character_flag = is_rival_fight
				}
				change_variable = { which = duel_experience_level value = 1 }
			}
			if = { # Duels in Battles give more experience
				limit = {
					has_character_flag = is_battlefield_duel
				}
				change_variable = { which = duel_experience_level value = 1 }
			}
			if = { # Sneaky experience is awarded when you use Intrigue
				limit = {
					has_character_flag = target_was_threatened # Applied when a cornering is successful
				}
				change_variable = { which = sneaky_duel_experience_level value = 1 }
			}
			if = { # Ruthless experience is awarded when you kill someone in a duel
				limit = {
					has_character_flag = someone_died
					OR = {
						has_character_flag = is_victorious_attacker
						has_character_flag = is_victorious_defender
					}
				}
				change_variable = { which = ruthlessness_level_check value = 1 }
			}
		}

	}
	# Renown increases the more you fight in real duels, makes you more respected (and sexy)
	hidden_effect = {
		set_variable = { which = duel_experience_level_check which = duel_experience_level }
		divide_variable = { which = duel_experience_level_check value = 5 }
		remove_character_modifiers = { modifier = duelist_renown amount = 999 }
		while = {
			limit = {
				check_variable = {
					which = duel_experience_level_check
					value >= 1
				}
			}
			add_character_modifier = {
				name = duelist_renown
				duration = -1
				stacking = yes
			}
			change_variable = {
				which = duel_experience_level_check
				value = -1
			}
		}
	}

	# Ruthlessness (If particularly violent and non-discriminating)
	hidden_effect = {
		set_variable = { which = ruthlessness_level_check which = ruthlessness_level_check }
		divide_variable = { which = ruthlessness_level_check value = 5 }
		remove_character_modifiers = { modifier = ruthless_duelist amount = 999 }
		while = {
			limit = {
				check_variable = {
					which = ruthlessness_level_check
					value >= 1
				}
			}
			add_character_modifier = {
				name = ruthless_duelist
				duration = -1
				stacking = yes
			}
			change_variable = {
				which = ruthlessness_level_check
				value = -1
			}
		}
	}
	# Sneaky Duelist (If Intrigue is used)
	hidden_effect = {
		set_variable = { which = sneaky_level_check which = sneaky_duel_experience_level }
		divide_variable = { which = sneaky_level_check value = 5 }
		remove_character_modifiers = { modifier = devious_duelist amount = 999 }
		while = {
			limit = {
				check_variable = {
					which = sneaky_level_check
					value >= 1
				}
			}
			add_character_modifier = {
				name = devious_duelist
				duration = -1
				stacking = yes
			}
			change_variable = {
				which = sneaky_level_check
				value = -1
			}
		}
	}

	# Particularly tenacious Duelists can gain the Duelist trait, but it's a low chance as it's so uber-powerful
	hidden_effect = {
		if = {
			limit = {
				check_variable = { which = duel_experience_level value = 15 }
				NOR = {
					has_character_flag = denied_duelist_trait
					lifestyle_traits = 1
				}
				any_kill_list_character = {
					death_reason = death_duel
				}
			}
			random = {
				chance = 5
				character_event = { id = HFP.400 days = 14 }
			}
		}
	}
	# Particularly Crafty, Ruthless and Experienced Duelists can gain a Legendary bloodline
	hidden_effect = {
		if = {
			limit = {
				has_dlc = "Holy Fury"
				trait = duelist
				check_variable = { which = duel_experience_level value = 50 }
				check_variable = { which = ruthlessness_level_check value = 20 }
				OR = {
					check_variable = { which = sneaky_duel_experience_level value = 10 }
					check_variable = { which = duel_experience_level value = 80 }
				}
				NOR = {
					any_owned_bloodline = {
						has_bloodline_flag = duelist_bloodline
					}
					has_character_flag = got_duelist_bloodline
				}
			}
			random = {
				chance = 20
				modifier = { # Increased chance if no bloodline present
					factor = 2.5
					NOT = {
						any_owned_bloodline = {
							always = yes
						}
					}
				}
				set_character_flag = got_duelist_bloodline
				character_event = { id = HFP.402 days = 14 }
			}
		}
	}
	if = { # Battle Experience is applied if you win a battlefield duel, as an added boon for your risk
		limit = {
			has_character_flag = is_battlefield_duel
			OR = {
				has_character_flag = is_victorious_attacker
				has_character_flag = is_victorious_defender
			}
		}
		increase_battle_experience_effect = yes
	}
}

increase_battle_experience_effect = { # This effect is called from Duel Experience, but it can also be used in especially cool battle options
	# Add the Battlefield Experience Modifier - It is more powerful than battle experience, so use sparingly
	custom_tooltip = { text = increase_battlefield_exp_tt }
	hidden_effect = {
		# You always get one level
		add_one_battlefield_experience_modifier = yes
		change_variable = { which = battlefield_experience_level value = 1 }

		if = { # But you can gain more the more you've fougt
			limit = {
				check_variable = { which = battlefield_experience_level value = 5 }
			}
			small_chance_for_one_battlefield_experience_modifier = yes
		}
		if = { # Keep fighting, learn more
			limit = {
				check_variable = { which = battlefield_experience_level value = 10 }
			}
			small_chance_for_one_battlefield_experience_modifier = yes
		}
		if = { # Real veterans are machines
			limit = {
				check_variable = { which = battlefield_experience_level value = 15 }
			}
			small_chance_for_one_battlefield_experience_modifier = yes
		}

		# Strategic Understanding increases your martial skill and boosts some command modifiers
		#custom_tooltip = { text = increase_strategic_understanding_tt } # Todo, how to show this?
		hidden_effect = {
			set_variable = { which = battlefield_experience_level_check which = battlefield_experience_level }
			divide_variable = { which = battlefield_experience_level_check value = 5 }
			remove_character_modifiers = { modifier = strategic_understanding amount = 999 }
			while = {
				limit = {
					check_variable = {
						which = battlefield_experience_level_check
						value >= 1
					}
				}
				add_character_modifier = {
					name = strategic_understanding
					duration = -1
					stacking = yes
				}
				change_variable = {
					which = battlefield_experience_level_check
					value = -1
				}
			}
		}

		# The Strategist Trait can be earned in Battle
		hidden_effect = {
			if = {
				limit = {
					check_variable = { which = battlefield_experience_level value = 10 }
					NOR = {
						has_character_flag = denied_strategist_trait
						lifestyle_traits = 1
					}
				}
				random = {
					chance = 5
					character_event = { id = HFP.401 days = 14 }
				}
			}
		}
	}
}

add_one_battlefield_experience_modifier = {
	add_character_modifier = {
		name = battlefield_experience
		duration = -1
		stacking = yes
	}
}

small_chance_for_one_battlefield_experience_modifier = {
	random = {
		chance = 30
		add_character_modifier = {
			name = battlefield_experience
			duration = -1
			stacking = yes
		}
	}
}

add_one_duel_experience_modifier = {
	add_character_modifier = {
		name = duel_experience
		duration = -1
		stacking = yes
	}
}

small_chance_for_one_duel_experience_modifier = {
	random = {
		chance = 30
		modifier = {
			factor = 0.5
			has_character_flag = mock_duel
		}
		add_character_modifier = {
			name = duel_experience
			duration = -1
			stacking = yes
		}
	}
}

big_chance_for_one_duel_experience_modifier = {
	random = {
		chance = 60
		modifier = {
			factor = 0.5
			has_character_flag = mock_duel
		}
		add_character_modifier = {
			name = duel_experience
			duration = -1
			stacking = yes
		}
	}
}

reset_warrior_lodge_joining_chain_effect = {
	hidden_effect = {
    	clr_character_flag = society_join_block
    	clr_character_flag = awaiting_initiation_trial
    	clr_character_flag = mock_duel
    	clr_character_flag = add_duel_xp
	}
}

#Used in battles (on_combat_pulse)
duel_enemy_commander_effect = {
    custom_tooltip = { text = chase_down_enemy_commander_tt }
	hidden_tooltip = { add_character_modifier = { name = battlefield_fight duration = 20 } }
	event_target:enemy_commander = {
		hidden_tooltip = { add_character_modifier = { name = battlefield_fight duration = 20 } }
		character_event = { id = battle.3 }
	}
}

find_cannon_fodder_commander_effect = { #run in immediate of events before duel_enemy_commander_effect to enable options! (use random chance?)
	if = { # Check for friendly commander to jump in and take the duel for you...
		limit = {
			any_unit_leader = { #Check if there is a unit leader with you, who doesn't hate you...
				ai = yes
				NOT = { character = ROOT }
				is_in_same_unit_as = ROOT
				NOT = { has_character_flag = battle_event_in_progess }
			}
		}
		any_unit_leader = { #This person takes the fight for you...
       		limit = {
       			ai = yes
       			NOT = { character = ROOT }
       			is_in_same_unit_as = ROOT
       			NOT = { has_character_flag = battle_event_in_progess }
       		}
       		score_value = { #Prioritizes selecting some kind of loved person...
                value = 1
                beloved_target_selection_score = yes
            }
            disallow_new_battle_events_effect = yes #to keep the tombola from spamming this character...
    		save_event_target_as = commander_cannon_fodder
    	}
	}
}


find_commander_to_the_rescue_effect = { #runs before duel_enemy_commander_effect. Won't always succeed.
	if = { # Check for friendly commander to jump in and take the duel for you...
		limit = {
			any_unit_leader = { #Check if there is a unit leader with you, who doesn't hate you...
				ai = yes
				NOT = { character = ROOT }
				is_in_same_unit_as = ROOT
				NOT = { has_character_flag = battle_event_in_progess }
				#this_has_terrible_opinion_modifier_of_root_extended_trigger = no
			}
		}
		random = {
			chance = 25
			any_unit_leader = { #This person takes the fight for you...
	       		limit = {
	       			ai = yes
	       			NOT = { character = ROOT }
	       			is_in_same_unit_as = ROOT
	       			NOT = { has_character_flag = battle_event_in_progess }
	       			#this_has_terrible_opinion_modifier_of_root_extended_trigger = no
	       		}
	       		score_value = { #Prioritizes selecting some kind of loved person...
	                value = 1
	                beloved_target_selection_score = yes
	            }
	    		save_event_target_as = commander_to_the_rescue
	    	}
		}
	}
}

#Used at the end of battle duels...
apply_battlefield_duel_opinions_effect = {
	if = {
		limit = {
			NOR = {
				has_character_flag = fight_could_spark_friendship
				has_character_flag = fight_could_spark_romance
			}
			FROM = {
				is_alive = yes
			}
		}
		reverse_opinion = {
		    modifier = opinion_injured_me_in_battle
		    who = FROM
		    months = 180
		}
	}
	else_if = {
		limit = {
			OR = {
				has_character_flag = fight_could_spark_friendship
				has_character_flag = fight_could_spark_romance
			}
			FROM = {
				is_alive = yes
			}
		}
		reverse_opinion = {
		    modifier = opinion_impressed_me_in_battle
		    who = FROM
		    months = 180
		}
	}
	else_if = { #If this was an "uneventful" battlefield-duel...
		limit = {
			has_character_flag = duel_ended_in_draw
			NOR = {
				has_character_flag = fight_could_spark_friendship
				has_character_flag = fight_could_spark_romance
			}
		}
		random = {
			chance = 20
			add_battle_PTSD_effect = yes #chance to send delayed follow-up event
		}
	}
}

add_battle_PTSD_effect = {
	if = {
		limit = { NOT = { has_character_flag = has_PTSD } }
		hidden_effect = {
			set_character_flag = has_PTSD
			character_event = { id = HFP.11019 days = 365 random = 50 } #PTSD follow up (normal version)
		}
	}
}

disallow_new_battle_events_effect = {
	set_character_flag = battle_event_in_progess
}

allow_new_battle_events_effect = {
	clr_character_flag = battle_event_in_progess
}

clr_battle_nickname_flags_effect = {
	clr_character_flag = the_astrologer
	clr_character_flag = the_great_beast
	clr_character_flag = the_artist_ruler
	clr_character_flag = the_ambitious
	clr_character_flag = the_bloody
	clr_character_flag = the_diplomat
	clr_character_flag = the_kind_hearted
	clr_character_flag = the_generous
	clr_character_flag = the_executioner
	clr_character_flag = iron_fist
	clr_character_flag = stone_fist
	clr_character_flag = the_bulwark
	clr_character_flag = the_tower
	clr_character_flag = the_wall_of_title
	clr_character_flag = the_underdog
	clr_character_flag = the_ground_warrior
	clr_character_flag = lord_lady_of_the_terrain
	clr_character_flag = lord_lady_ground
	clr_character_flag = the_terrain_commander
}

apply_opinion_reward_effect = {
	if = { #As long as you are not BOTH characters...
		limit = {
			enemy_commander_and_liege_are_different_characters = yes
		}

		if = {
			limit = { event_target:enemy_commander = { character = ROOT } } #if ROOT is the enemy-commander
			show_portrait = event_target:enemy_liege
			show_portrait = event_target:home_commander
			trigger_switch = {
				on_trigger = has_character_flag
				fought_worse_warrior@event_target:home_commander = { #if it was a worse commander you killed...
					tooltip = {
						opinion = {
			                who = event_target:enemy_liege
			                modifier = opinion_impressed
			                years = 10
			            }
		            }
		            reverse_opinion = {
		                who = event_target:enemy_liege
		                modifier = opinion_was_praised
		                years = 10
		            }
				}
				fought_even_warrior@event_target:home_commander = {  #if it was an evenly matched commander you killed...
					tooltip = {
						opinion = {
			                who = event_target:enemy_liege
			                modifier = opinion_thoroughly_impressed
			                years = 10
			            }
		            }
		            reverse_opinion = {
		                who = event_target:enemy_liege
		                modifier = opinion_was_thoroughly_praised
		                years = 10
		            }
				}
				fought_great_warrior@event_target:home_commander = { #if it was a better commander you killed...
					tooltip = {
						opinion = {
			                who = event_target:enemy_liege
			                modifier = opinion_wildly_impressed
			                years = 10
			            }
		            }
		            reverse_opinion = {
		                who = event_target:enemy_liege
		                modifier = opinion_was_wildly_praised
		                years = 10
		            }
				}
			}
		}
		else_if = {
			limit = { event_target:enemy_liege = { character = ROOT } } #if ROOT is the enemy-liege
			show_portrait = event_target:enemy_commander
			show_portrait = event_target:home_commander
			if = {
				limit = { event_target:enemy_commander = { is_alive = yes } }
				event_target:enemy_commander = { #scope setting to use the trigger-switch properly...
					show_scope_change = no
			        trigger_switch = {
						on_trigger = has_character_flag
						fought_worse_warrior@event_target:home_commander = { #if it was a worse commander you killed...
							ROOT = {
								show_scope_change = no
								tooltip = {
						            reverse_opinion = {
						                who = event_target:enemy_commander
						                modifier = opinion_was_praised
						                years = 10
						            }
					            }
								opinion = {
					                who = event_target:enemy_commander
					                modifier = opinion_impressed
					                years = 10
					            }
							}
						}
						fought_even_warrior@event_target:home_commander = { #if it was an evenly matched commander you killed...
							ROOT = {
								show_scope_change = no
								tooltip = {
						            reverse_opinion = {
						                who = event_target:enemy_commander
						                modifier = opinion_was_thoroughly_praised
						                years = 10
						            }
					            }
								opinion = {
					                who = event_target:enemy_commander
					                modifier = opinion_thoroughly_impressed
					                years = 10
					            }
							}
						}
						fought_great_warrior@event_target:home_commander = { #if it was a better commander you killed...
							ROOT = {
								show_scope_change = no
								tooltip = {
						            reverse_opinion = {
						                who = event_target:enemy_commander
						                modifier = opinion_was_wildly_praised
						                years = 10
						            }
					            }
								opinion = {
					                who = event_target:enemy_commander
					                modifier = opinion_wildly_impressed
					                years = 10
					            }
							}
						}
					}
				}
			}
		}
	}
	if = { #only clear if you are the commander... TODO_CD_MILLA: put this on a delay so it's not cleared before everyone has seen the result.
		limit = { event_target:enemy_commander = { character = ROOT } }
		event_target:enemy_commander = {
			clr_character_flag = fought_worse_warrior@event_target:home_commander
			clr_character_flag = fought_even_warrior@event_target:home_commander
			clr_character_flag = fought_great_warrior@event_target:home_commander
		}
	}
	character_event = { id = HFP.11044 days = 20 } #clean-up reward-flags (mostly for MP safety)
}
#For logging purposes...
debug_battle_death_counter_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_character_flag = is_battlefield_duel
			}
			change_variable = { which = global_deaths_in_battle value = 1 }
			liege = {
				set_character_flag = commanders_have_died_for_me
				change_variable = { which = my_commander_deaths_in_battle value = 1 }
			}
		}
	}
}

set_battle_duels_option_flag_effect = {
	#Clean-up from before, for safety...
    clr_character_flag = high_PCS_opt
    clr_character_flag = duel_enemy_opt
	clr_character_flag = duel_enemy_opt_gain_brave
    clr_character_flag = duel_enemy_opt_is_brave

	random_list = {
		100 = { #Special option: High Combat-rating only (no enemy commander present)
			trigger = {
				duelist_skill_is_high_group_trigger = yes
				NOT = { event_target:enemy_commander = { always = yes } }
			}
			set_character_flag = high_PCS_opt
		}
		100 = { #Special option: Duel enemy commander instead (if you have great combat rating)
			trigger = {
				NOT = { trait = brave }
				event_target:enemy_commander = {
					is_alive = yes
					OR = {
						duelist_skill_compared_to_prev_low_group_trigger = yes #Means the enemy commander is the worst dueler out of the two
						duelist_skill_is_high_group_trigger = yes
					}
				}
			}
			set_character_flag = duel_enemy_opt
		}
		1 = {
			trigger = { #Special option: Duel enemy commander instead (but you have terrible Combat Rating - blocks option above + gives Brave)
				NOT = { trait = brave }
				event_target:enemy_commander = {
					is_alive = yes
					OR = {
						duelist_skill_compared_to_prev_high_group_trigger = yes #Means the enemy commander is the better dueler out of the two
						duelist_skill_is_low_group_trigger = yes #Means you suck
					}
				}
			}
			set_character_flag = duel_enemy_opt_gain_brave
		}
		1 = {
			trigger = { #Special option: Duel enemy commander instead (you are Brave already - unlocks dueling regardless, but should block the two above)
				trait = brave
				event_target:enemy_commander = { is_alive = yes }
			}
			set_character_flag = duel_enemy_opt_is_brave
		}
	}
}