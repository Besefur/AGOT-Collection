# Targetted decisions are possible vs _all_ other characters and shown are in the Diplomacy View, not the Intrigue View. The taker is in the FROM scope.
#
# filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] ('self' MUST be set for decisions targetting only the taker, the other filter types can be set to lessen CPU load)
# ai_target_filter = [self/court/home_court/vassals/sub_realm/realm/dynasty/all] (which characters for which the AI evaluates the decision.)
#	court: all characters in the AI's host court, including prisoners, and characters currently away (wards, prisoners, etc)
#	home_court: all characters in the AI's home court, including prisoners, and characters currently away (wards, prisoners, etc)
#	vassals: direct vassal rulers of the AI's employer
#	sub_realm: all characters below the AI's employer
#	realm: all characters in the same top realm as the AI
#	dynasty: all members of the same dynasty
#	all: all living characters (Avoid if possible. VERY CPU-HEAVY!)
#

targeted_decisions = {
	seize_sword = { #Now works for all high quality artifacts. only works for ancestral artifacts, unless game rule is changed
		only_playable = yes
		ai_target_filter = court
		filter = court
		third_party_filter = artifacts
		ai_third_party_filter = artifacts
		third_party = ROOT
		diplomacy_icon = GFX_decision_valyrian_steel

		from_potential = {
			is_ruler = yes
		}

		potential = {
			prisoner = yes
			host = { character = FROM }
			NOT = { trait = dragon }
			any_artifact = {
				quality >= 3
			}
		}
		third_party_potential = {
			FROMFROM = {
				quality >= 3
			}
		}

		third_party_allow = {
			trigger_if = {
				limit = { NOT = { has_game_rule = { name = seize_valyrian_swords value = unrestricted } } }
				FROM = {
					show_scope_change = no
					OR = {
						custom_tooltip = {
							text = TOOLTIPseize_swordSTOLEN
							hidden_tooltip = { ROOT_FROMFROM = { has_artifact_flag = stolen_from_@PREV } }
						}
						custom_tooltip = {
							text = TOOLTIPseize_swordCLAIM
							hidden_tooltip = {
								NOT = { dynasty = ROOT }
								ROOT_FROMFROM = {
									NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
									any_artifact_owner = {
										dynasty = ROOT_FROM
										is_lowborn = no
										#ROOT_FROMFROM = { has_artifact_flag = heirloom_@PREV }
									}
								}
							}
						}
						custom_tooltip = {
							text = TOOLTIPseize_swordCLAIMTITLE
							hidden_tooltip = {
								ROOT_FROMFROM = { has_artifact_flag = title_heirloom_@ROOT_FROM }
							}
						}
						trigger_if = {
							limit = { has_game_rule = { name = seize_valyrian_swords value = less_restricted } }
							AND = {
								custom_tooltip = {
									text = TOOLTIPseize_swordTRAITOR
									hidden_tooltip = {
										OR = {
											has_opinion_modifier = { who = ROOT modifier = opinion_traitor }
											has_opinion_modifier = { who = ROOT modifier = opinion_rebel_traitor }
											has_opinion_modifier = { who = ROOT modifier = opinion_conspired_against_me }
											has_opinion_modifier = { who = ROOT modifier = opinion_joined_rebellion }
										}
									}
								}
								OR = {
									trait = selfish
									trait = arbitrary
									trait = greedy
									trait = envious
									trait = ruthless
								}
								NOR = {
									trait = kind
									trait = honorable
									trait = just
									trait = humble
								}
							}
						}
					}
				}
			}
		}
		allow = {
			prisoner = yes
			NOT = { has_character_modifier = getting_justice }
			NOT = { diplomatic_immunity = yes }
		}

		effect = {
			#hidden_tooltip = { add_trait = held_important_artifact }
			FROM = {
				show_scope_change = no
				ROOT_FROMFROM = {
					show_scope_change = no
					set_artifact_flag = stolen_from_@ROOT
					#set_artifact_flag = previous_holder_@ROOT
					clr_artifact_flag = stolen_from_@PREV
					transfer_artifact = { from = ROOT to = PREV }
					if = { #rename to ice
						limit = {
							OR = {
								artifact_type = widowswail
								artifact_type = oathkeeper
								artifact_type = ice
							}
							has_artifact_flag = forged_from_ice
							ROOT_FROM = { dynasty = 59 }
						}
						set_name = ice
						set_description = ice_desc_REMNANT
					}
				}
				if = { #Check for tyranny
					limit = {
						has_game_rule = { name = seize_valyrian_swords value = unrestricted }
						NOR = {
							custom_tooltip = {
								text = TOOLTIPseize_swordSTOLEN
								hidden_tooltip = { ROOT_FROMFROM = { has_artifact_flag = stolen_from_@PREV } }
							}
							custom_tooltip = {
								text = TOOLTIPseize_swordCLAIM
								hidden_tooltip = {
									NOT = { dynasty = ROOT }
									ROOT_FROMFROM = {
										NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
										any_artifact_owner = {
											dynasty = ROOT_FROM
											is_lowborn = no
											#ROOT_FROMFROM = { has_artifact_flag = heirloom_@PREV }
										}
									}
								}
							}
							has_opinion_modifier = { who = ROOT modifier = opinion_traitor }
							has_opinion_modifier = { who = ROOT modifier = opinion_rebel_traitor }
							has_opinion_modifier = { who = ROOT modifier = opinion_conspired_against_me }
							has_opinion_modifier = { who = ROOT modifier = opinion_joined_rebellion }
							custom_tooltip = {
								text = TOOLTIPseize_swordCLAIMTITLE
								hidden_tooltip = {
									ROOT_FROMFROM = { has_artifact_flag = title_heirloom_@ROOT_FROM }
								}
							}
						}
					}
					change_variable = { which = "tyrant" value = 5 }
					hidden_tooltip = { character_event = { id = maintenance.1 } }#tyrant trait
				}
			}
			opinion = {
				who = FROM
				modifier = opinion_stole_sword
				years = 100
			}
			FROM = {
				show_scope_change = no
				prestige = 50
			}
			hidden_tooltip = {
				character_event = { id = valyrian_steel.160 }
			}
		}

		ai_will_do = {
			factor = 1000

			modifier = { #Usually wont do if it will incur tyranny
				factor = 0
				has_game_rule = { name = seize_valyrian_swords value = unrestricted }
				FROM = {
					OR = {
						trait = kind
						trait = honorable
						trait = just
						trait = humble
						AND = { #limit excessive tyranny to idiots and lunatics
							check_variable = { which = "tyrant" value = 20 }
							NOR = {
								trait = wroth
								trait = lunatic
								diplomacy < 5
							}
						}
						NOR = {
							trait = selfish
							trait = arbitrary
							trait = greedy
							trait = envious
							trait = ruthless
						}
					}
					NOR = {
						custom_tooltip = {
							text = TOOLTIPseize_swordSTOLEN
							hidden_tooltip = { ROOT_FROMFROM = { has_artifact_flag = stolen_from_@PREV } }
						}
						custom_tooltip = {
							text = TOOLTIPseize_swordCLAIM
							hidden_tooltip = {
								NOT = { dynasty = ROOT }
								ROOT_FROMFROM = {
									NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
									any_artifact_owner = {
										dynasty = ROOT_FROM
										is_lowborn = no
										#ROOT_FROMFROM = { has_artifact_flag = heirloom_@PREV }
									}
								}
							}
						}
						has_opinion_modifier = { who = ROOT modifier = opinion_traitor }
						has_opinion_modifier = { who = ROOT modifier = opinion_rebel_traitor }
						has_opinion_modifier = { who = ROOT modifier = opinion_conspired_against_me }
						has_opinion_modifier = { who = ROOT modifier = opinion_joined_rebellion }
						custom_tooltip = {
							text = TOOLTIPseize_swordCLAIMTITLE
							hidden_tooltip = {
								ROOT_FROMFROM = { has_artifact_flag = title_heirloom_@ROOT_FROM }
							}
						}
					}
				}
			}
		}
	}
	give_valyrian_sword_to_son = {
		ai_target_filter = dynasty
		filter = all
		third_party_filter = artifacts
		ai_third_party_filter = artifacts
		third_party = FROM
		only_rulers = yes
		diplomacy_icon = GFX_decision_valyrian_steel

		from_potential = {
			is_ruler = yes
			any_artifact = {
				OR = {
					has_artifact_flag = valyrian_steel
					has_artifact_flag = valyrian_armour
				}
				OR = {
					NOT = { artifact_type = dawn }
					owner = { NOT = { dynasty = 16 } }
				}
			}
		}
		potential = {
			OR = {
				dynasty = FROM
				same_realm = FROM
				is_close_relative = FROM
			}
			NOT_mythical_creature_trigger = yes
			NOT = { character = FROM }
		}
		third_party_potential = {
			FROMFROM = {
				OR = {
					has_artifact_flag = valyrian_steel
					AND = { #AI wont give away valyrian armour
						has_artifact_flag = valyrian_armour
						ROOT_FROM = { ai = no }
					}
				}
				OR = {
					NOT = { artifact_type = dawn }
					owner = { NOT = { dynasty = 16 } }
				}
				OR = { #darksister must stay with targaryens
					NOT = { artifact_type = darksister }
					ROOT_FROM = { NOT = { dynasty = 496 } }
					ROOT = { dynasty = ROOT_FROM }
				}
				OR = { #lady forlorn must stay with corbrays
					NOT = { artifact_type = ladyforlorn }
					ROOT_FROM = { NOT = { dynasty = 176 } }
					ROOT = { dynasty = ROOT_FROM }
				}
				OR = { #sevens fury must stay with strongs
					NOT = { artifact_type = sevens_fury }
					ROOT_FROM = { NOT = { dynasty = 356 } }
					ROOT = { dynasty = ROOT_FROM }
				}
				OR = { #sevens fury must stay with strongs
					NOT = { artifact_type = rainbow_armor }
					ROOT_FROM = { NOT = { dynasty = 356 } }
					ROOT = { dynasty = ROOT_FROM }
				}
			}
		}

		third_party_allow = {

		}
		allow = {
			FROM = { has_regent = no }
		}
		effect = {

			FROM = {
				#hidden_tooltip = { add_trait = held_important_artifact }
				ROOT_FROMFROM = {
					if = { #if longclaw snow given to mormonts, convert to ordinary lnogclaw
						limit = {
							artifact_type = longclaw_snow
							ROOT = { dynasty = 102 }
						}
						set_picture = GFX_vs_longclaw
						set_name = longclaw
						set_description = longclaw_desc
					}
					#set_artifact_flag = previous_holder_@PREV
					transfer_artifact = { from = PREV to = ROOT }
				}
			}

			if = {
				limit = { dynasty = FROM }
				if = { #targaryen bastard may become blackfyre dynasty if given blackfyre
					limit = {
						FROMFROM = { artifact_type = blackfyre }
						trait = bastard
						dynasty = 496
						can_press_claims_trigger = yes
						NOR = {
							trait = eunuch
							trait = disinherited
							trait = drowned
						}
					}
					remove_trait = bastard
					add_trait = legit_bastard
					dynasty = 57
					set_dynasty_flag = has_dynamic_coa
					if = {
						limit = {
							has_bastard_nickname_trigger = yes
						}
						remove_nickname = yes
					}
				}
				opinion = {
					who = FROM
					modifier = opinion_gave_sword_to_me
					months = 360
				}
				if = { #darksister consequences, traditionally goes to targaryen warriors
					limit = {
						dynasty = 496
						FROMFROM = { artifact_type = darksister }
					}
					set_character_flag = given_darksister
					any_dynasty_member = {
						limit = {
							is_close_relative = FROM
							NOT = { character = ROOT }
							NOT = { character = FROM }
							OR = {
								trait = skilled_warrior
								trait = master_warrior
							}
						}
						opinion = {
							who = FROM
							modifier = opinion_didnt_give_sword_to_me
							months = 60
						}
					}
				}
				else_if = { #ladyforlorn consequences, traditionally goes to corbray warriors
					limit = {
						dynasty = 176
						FROMFROM = { artifact_type = ladyforlorn }
					}
					set_character_flag = given_ladyforlorn
					any_dynasty_member = {
						limit = {
							is_close_relative = FROM
							NOT = { character = ROOT }
							NOT = { character = FROM }
							OR = {
								trait = skilled_warrior
								trait = master_warrior
							}
						}
						opinion = {
							who = FROM
							modifier = opinion_didnt_give_sword_to_me
							months = 60
						}
					}
				}
				else_if = { #sevens fury consequences, traditionally goes to strong warriors
					limit = {
						dynasty = 356
						FROMFROM = { artifact_type = sevens_fury }
					}
					set_character_flag = given_sevens_fury
					any_dynasty_member = {
						limit = {
							is_close_relative = FROM
							NOT = { character = ROOT }
							NOT = { character = FROM }
							OR = {
								trait = skilled_warrior
								trait = master_warrior
							}
						}
						opinion = {
							who = FROM
							modifier = opinion_didnt_give_sword_to_me
							months = 60
						}
					}
				}
				else_if = { #rainbow_armor consequences, traditionally goes to strong warriors
					limit = {
						dynasty = 356
						FROMFROM = { artifact_type = rainbow_armor }
					}
					set_character_flag = given_rainbow_armor
					any_dynasty_member = {
						limit = {
							is_close_relative = FROM
							NOT = { character = ROOT }
							NOT = { character = FROM }
							OR = {
								trait = skilled_warrior
								trait = master_warrior
							}
						}
						opinion = {
							who = FROM
							modifier = opinion_didnt_give_sword_to_me
							months = 60
						}
					}
				}
				else = {
					FROM = {
						any_child = {
							limit = {
								OR = {
									is_primary_heir = yes
									AND = {
										martial = 10
										is_female = no
									}
								}
								NOT = { character = ROOT }
							}
							opinion = {
								who = FROM
								modifier = opinion_didnt_give_sword_to_me
								months = 60
							}
						}
					}
				}
			}
			if = {
				limit = { NOT = { dynasty = FROM } }
				opinion = {
					who = FROM
					modifier = opinion_gave_sword_to_me
					months = 360
					multiplier = 2
				}
				FROM = {
					any_dynasty_member = {
						limit = {
							is_alive = yes
							is_close_relative = FROM
							NOT = { character = FROM }
							NOT = { character = ROOT }
						}
						opinion = {
							who = FROM
							modifier = opinion_didnt_give_sword_to_me
							months = 60
						}
					}
				}
			}
			hidden_tooltip = {
				letter_event = { id = 250276 }
			}
		}
		ai_check_interval = 6
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.12 # Slow it down a bit
			}

			modifier = {
				factor = 0
				OR = {
					NOT = { is_child_of = FROM } #only give to own children
					FROM = { NOT = { age = 14 } }
					FROMFROM = { is_artifact_equipped = yes } #dont give away equipped swords
				}

				#traditional warrior swords exemption
				NAND = {
					FROMFROM = { artifact_type = darksister }
					FROM = { dynasty = 496 }
				}
				NAND = {
					FROMFROM = { artifact_type = ladyforlorn }
					FROM = { dynasty = 176 }
				}
				NAND = {
					FROMFROM = { artifact_type = sevens_fury }
					FROM = { dynasty = 356 }
				}
				NAND = {
					FROMFROM = { artifact_type = rainbow_armor }
					FROM = { dynasty = 356 }
				}
			}
			#Ai reluctant to give away equipped traditional swords
			modifier = {
				factor = 0.15
				FROMFROM = {
					is_artifact_equipped = yes
					any_artifact_owner = {
						dynasty = ROOT_FROM
						is_lowborn = no
						#PREV = { has_artifact_flag = heirloom_@PREV }
					}
				}
				#traditional warrior swords exemption
				NAND = {
					FROMFROM = { artifact_type = darksister }
					FROM = { dynasty = 496 }
				}
				NAND = {
					FROMFROM = { artifact_type = ladyforlorn }
					FROM = { dynasty = 176 }
				}
				NAND = {
					FROMFROM = { artifact_type = sevens_fury }
					FROM = { dynasty = 356 }
				}
				NAND = {
					FROMFROM = { artifact_type = rainbow_armor }
					FROM = { dynasty = 356 }
				}
			}
			modifier = { #targs may give away blackfyre under some circumstances
				factor = 0
				FROMFROM = { artifact_type = blackfyre }
				FROM = {
					dynasty = 496
					OR = {
						trait = honorable
						NOT = { trait = arbitrary }
						NOT = { trait = lunatic }
						ROOT = { martial < 15 }
					}
				}
			}
			modifier = {  #targs will only give this to great warriors
				factor = 0
				FROMFROM = { artifact_type = darksister }
				FROM = { dynasty = 496 }
				OR = {
					NOT = { is_close_relative = FROM }
					NOT = {
						OR = {
							trait = skilled_warrior
							trait = master_warrior
						}
					}
					any_artifact = { has_artifact_flag = valyrian_steel }
					FROM = {
						has_character_flag = given_darksister
						NOT = { has_artifact = blackfyre }
						OR = {
							trait = skilled_warrior
							trait = master_warrior
						}
					}
				}
			}
			modifier = {  #corbrays will only give this to great warriors
				factor = 0
				FROMFROM = { artifact_type = ladyforlorn }
				FROM = { dynasty = 176 }
				OR = {
					NOT = { is_close_relative = FROM }
					NOT = {
						OR = {
							trait = skilled_warrior
							trait = master_warrior
						}
					}
					FROM = {
						has_character_flag = given_ladyforlorn
						OR = {
							trait = skilled_warrior
							trait = master_warrior
						}
					}
				}
			}
			modifier = {  #strongs will only give this to great warriors
				factor = 0
				FROMFROM = { artifact_type = sevens_fury }
				FROM = { dynasty = 356 }
				OR = {
					NOT = { is_close_relative = FROM }
					NOT = {
						OR = {
							trait = skilled_warrior
							trait = master_warrior
						}
					}
					FROM = {
						has_character_flag = given_sevens_fury
						OR = {
							trait = skilled_warrior
							trait = master_warrior
						}
					}
				}
			}
			modifier = {  #strongs will only give this to great warriors
				factor = 0
				FROMFROM = { artifact_type = rainbow_armor }
				FROM = { dynasty = 356 }
				OR = {
					NOT = { is_close_relative = FROM }
					NOT = {
						OR = {
							trait = skilled_warrior
							trait = master_warrior
						}
					}
					FROM = {
						has_character_flag = given_rainbow_armor
						OR = {
							trait = skilled_warrior
							trait = master_warrior
						}
					}
				}
			}
			modifier = {
				factor = 2
				is_primary_heir = yes
			}
			modifier = {
				factor = 0.2
				is_female = yes
			}
			modifier = {
				factor = 0.2
				trait = bastard
			}
			modifier = {
				factor = 1.5
				trait = trained_warrior
			}
			modifier = {
				factor = 2.5
				trait = skilled_warrior
			}
			modifier = {
				factor = 4
				trait = master_warrior
			}
		}
	}

	demand_return_of_valyrian_steel = { #now works for all high quality artifacts
		ai_target_filter = all
		filter = all
		only_playable = yes
		diplomacy_icon = GFX_decision_valyrian_steel

		from_potential = {
			OR = { #Ai restrictions
				ai = no
				AND = {
					war = no
					has_regent = no
				}
			}
			NOT = { trait = nightswatch }
			NOT = { trait = kingsguard }
			NOT = { culture_group = unoccupied_group }
			NAND = {
				culture_group = winter_group
				NOR = {
					has_alternate_start_parameter = { key = special_culture value = mythological }
					has_alternate_start_parameter = { key = special_culture value = all }
				}
			}
		}
		potential = {
			is_ruler = yes
			NOT = { culture_group = unoccupied_group }
			NAND = {
				culture_group = winter_group
				NOR = {
					has_alternate_start_parameter = { key = special_culture value = mythological }
					has_alternate_start_parameter = { key = special_culture value = all }
				}
			}
			FROM = { #Ai restrictions
				OR = {
					ai = no
					trait = ruthless
					trait = lunatic
					AND = {
						NOT = { opinion = { who = ROOT value = 25 } }
						NOT = { has_non_aggression_pact_with = ROOT }
					}
				}
			}
			OR = {
				any_artifact = {
					quality >= 3
					OR = {
						has_artifact_flag = stolen_from_@FROM #Stolen artifact
						has_artifact_flag = title_heirloom_@FROM #title heirloom
						AND = { #family heirloom
							ROOT_FROM = { NOT = { dynasty = PREVPREV } }
							NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
							any_artifact_owner = {
								dynasty = ROOT_FROM
								is_lowborn = no
								#PREV = { has_artifact_flag = heirloom_@PREV }
							}
						}
					}
					NAND = { #can only demand crowns if a monarch
						has_artifact_flag = crown
						ROOT_FROM = { is_feudal_monarch_trigger = no }
					}
				}
				any_realm_character = {
					NAND = { #vassals not responsible for sub-vassals
						is_ruler = yes
						is_liege_or_above = FROM
					}
					NOT = { #Can target a fellow vassal rather than liege
						any_liege = {
							same_liege = FROM
							NOT = { character = ROOT }
						}
					}
					any_artifact = {
						quality >= 3
						OR = {
							has_artifact_flag = stolen_from_@FROM #Stolen artifact
							has_artifact_flag = title_heirloom_@FROM #title heirloom
							AND = { #family heirloom
								ROOT_FROM = { NOT = { dynasty = PREVPREV } }
								NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
								any_artifact_owner = {
									dynasty = ROOT_FROM
									is_lowborn = no
									#PREV = { has_artifact_flag = heirloom_@PREV }
								}
							}
						}
						NAND = { #can only demand crowns if a monarch
							has_artifact_flag = crown
							ROOT_FROM = { is_feudal_monarch_trigger = no }
						}
					}
				}
			}
			NOT = { character = FROM }
		}
		allow = {
			show_only_failed_conditions = yes
			OR = {
				independent = yes
				same_liege = FROM
				is_liege_of = FROM
				is_liege_or_above = FROM
			}
			conditional_tooltip = { #If FROM's prisoner, they can just seize it
				trigger = { prisoner = yes }
				NOT = { host = { character = FROM } }
			}
			trigger_if = {
				limit = { FROM = { NOT = { trait = wildling } } }
				NOT = { trait = nightswatch }
			}
			NOT = { trait = kingsguard }
			FROM = {
				NOT = { war_with = ROOT }
				custom_tooltip = {
					text = TOOLTIPNOTANYLIEGEWARS
					hidden_tooltip = {
						NOT = { any_liege = { war_with = ROOT } }
					}
				}
				NOT = { has_non_aggression_pact_with = ROOT }
				NOT = { trait = kingsguard }
				OR = {
					ROOT = { trait = wildling }
					NOT = { trait = nightswatch }
				}
			}
			conditional_tooltip = { #jogos nhai do not make war on eachother
				trigger = { FROM = { has_jogos_nhai_war_block_trigger = yes } }
				custom_tooltip = {
					text = TOOLTIPJOGOSWARPROHIBITION
					hidden_tooltip = { NOT = { ROOT = { has_jogos_nhai_war_block_trigger = yes } } }
				}
			}
			OR = { #Cannot attack vassals split by mega war
				NOT = { has_opinion_modifier = { who = FROM modifier = opinion_de_facto_liege } }
				NOT = { FROM = { higher_tier_than = ROOT } }
			}
			demesne_size = 1
			is_within_diplo_range = FROM
			NOT = { has_opinion_modifier = { who = FROM modifier = opinion_demanded_valyrian_steel } }
		}
		effect = {
			opinion = {
				who = FROM
				modifier = opinion_demanded_valyrian_steel
				months = 60
			}
			letter_event = { id = valyrian_steel.170 tooltip = TOOLTIPvalyrian_steel.170 days = 1 }
			tooltip = {
				any_artifact = {
					limit = {
						quality >= 3
						OR = {
							has_artifact_flag = stolen_from_@FROM
							has_artifact_flag = title_heirloom_@FROM
							AND = { #family heirloom
								ROOT_FROM = { NOT = { dynasty = PREVPREV } }
								NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
								any_artifact_owner = {
									dynasty = ROOT_FROM
									is_lowborn = no
									#PREV = { has_artifact_flag = heirloom_@PREV }
								}
							}
						}
						NAND = { #can only demand crowns if a monarch
							has_artifact_flag = crown
							ROOT_FROM = { is_feudal_monarch_trigger = no }
						}
					}
					show_scope_change = no
					custom_tooltip = { text = TOOLTIPdemand_return_of_valyrian_steel }
				}
				any_realm_character = {
					limit = {
						NAND = { #vassals not responsible for sub-vassals
							is_ruler = yes
							is_liege_or_above = ROOT_FROM
						}
					}
					show_scope_change = no
					any_artifact = {
						limit = {
							quality >= 3
							OR = {
								has_artifact_flag = stolen_from_@FROM
								has_artifact_flag = title_heirloom_@FROM
								AND = { #family heirloom
									ROOT_FROM = { NOT = { dynasty = PREVPREV } }
									NOT = { has_artifact_flag = crown_jewel } #reserved for title claims
									any_artifact_owner = {
										dynasty = ROOT_FROM
										is_lowborn = no
										#PREV = { has_artifact_flag = heirloom_@PREV }
									}
								}
							}
							NAND = { #can only demand crowns if a monarch
								has_artifact_flag = crown
								ROOT_FROM = { is_feudal_monarch_trigger = no }
							}
						}
						show_scope_change = no
						custom_tooltip = { text = TOOLTIPdemand_return_of_valyrian_steel }
					}
				}
			}
		}
		ai_check_interval = 60
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.05
			}
			modifier = { #has a CB over them
				factor = 0
				FROM = {
					has_cb = ROOT
					OR = {
						de_jure_vassal_or_below = ROOT
						can_use_dragon_conquest_trigger = yes
						government = wildling_feudal_government
						trait = pirate
						has_ironborn_invasion_religion_trigger = yes
					}
				}
			}
			modifier = {
				factor = 4
				NOT = { relative_power = { who = FROM power = 0.5 } }
			}
			modifier = {
				factor = 2
				NOT = { relative_power = { who = FROM power = 1 } }
			}
			modifier = {
				factor = 0.5
				relative_power = { who = FROM power = 2 }
			}
			modifier = {
				factor = 2
				FROM = { trait = dragon_rider }
				NOT = { trait = dragon_rider }
			}
			modifier = {
				factor = 0.5
				FROM = { NOT = { trait = dragon_rider } }
				trait = dragon_rider
			}

			modifier = {
				factor = 2
				FROM = { trait = wroth }
			}
			modifier = {
				factor = 0.5
				FROM = { trait = patient }
			}
			modifier = {
				factor = 2
				FROM = { trait = proud }
			}
			modifier = {
				factor = 0.5
				FROM = { trait = humble }
			}
			modifier = {
				factor = 2
				FROM = { trait = diligent }
			}
			modifier = {
				factor = 0.5
				FROM = { trait = slothful }
			}
			modifier = {
				factor = 4
				FROM = { trait = ambitious }
			}
			modifier = {
				factor = 0.25
				FROM = { trait = content }
			}
			modifier = {
				factor = 2
				FROM = { trait = brave }
			}
			modifier = {
				factor = 0.5
				FROM = { trait = craven }
			}
			modifier = {
				factor = 2
				FROM = { trait = zealous }
				NOT = { religion = FROM }
			}
		}
	}
	reforge_valyrian_steel = {
		ai = no
		ai_target_filter = none
		filter = self
		third_party_filter = artifacts
		ai_third_party_filter = artifacts
		third_party = ROOT
		diplomacy_icon = GFX_decision_valyrian_steel

		potential = {
			character = FROM
			any_artifact = {
				has_artifact_flag = valyrian_steel
				NOT = { has_artifact_flag = canon_sword }
			}
			OR = {
				NOT = { has_character_flag = reforge_valyrian_steel }
				had_character_flag = { flag = reforge_valyrian_steel days = 365 }
			}
		}
		third_party_potential = {
			FROMFROM = {
				has_artifact_flag = valyrian_steel
				NOT = { has_artifact_flag = canon_sword }
			}
		}
		allow = {
			FROM = { wealth = 100 }
		}
		effect = {
			FROMFROM = { save_event_target_as = sword_to_reforge }
			FROM = {
				wealth = -100
				character_event = { id = 250285 }
				set_character_flag = reforge_valyrian_steel
			}
		}
	}
}
decisions = {
	claim_dawn = {
		potential = {
			dynasty = 16
			OR = {
				trait = master_warrior
				ai = no
			}
			NOT = { has_character_flag = nick_the_sword_of_the_morning }
			OR = {
				has_artifact = dawn
				any_dynasty_member = {
					has_artifact = dawn
					is_alive = yes
					NOT = { has_character_flag = nick_the_sword_of_the_morning }
				}
			}
		}
		allow = {
			age = 16
			trait = master_warrior
			trigger_if = {
				limit = {
					OR = {
						religion = the_seven
						dynasty_head = { religion = the_seven }
					}
				}
				trait = knight
			}
			custom_tooltip = {
				text = TOOLTIP_claim_dawn_calc
				hidden_tooltip = {
					calc_true_if = {
						amount = 2
						trait = just
						trait = kind
						trait = brave
						trait = diligent
						trait = honorable
						trait = patient
						trait = zealous
					}
				}
			}
			prisoner = no
			NOT = { is_inaccessible_trigger = yes }
			NOT = { has_severe_disability_trigger = yes }
			is_incapable = no
			NOT = { trait = cruel }
			NOT = { trait = deceitful }
			NOT = { trait = drunkard }
			NOT = { trait = impaler }
			NOT = { trait = gluttonous }
			NOT = { trait = greedy }
			NOT = { trait = slothful }
			NOT = { trait = craven }
			NOT = { trait = arbitrary }
			NOT = { trait = ruthless }
			NOT = { is_short_trigger = yes }
			NOT = { trait = is_fat }
			NOT = { is_weak_trigger = yes }
			NOT = { is_lazy_trigger = yes }
			custom_tooltip = {
				text = "TOOLTIPclaim_dawn_dishonorable"
				hidden_tooltip = {
					NOT = { trait = dishonorable1 }
					NOT = { trait = dishonorable2 }
					NOT = { trait = dishonorable3 }
					NOT = { trait = dishonorable4 }
					NOT = { trait = dishonorable5 }
					NOT = { trait = dishonorable6 }
					NOT = { trait = dishonorable7 }
					NOT = { trait = dishonorable8 }
					NOT = { trait = dishonorable9 }
					NOT = { trait = dishonorable10 }
				}
			}
		}
		effect = {
			if = {
				limit = { NOT = { has_artifact = dawn } }
				random_dynasty_member = {
					limit = {
						has_artifact = dawn
						is_alive = yes
						NOT = { has_character_flag = nick_the_sword_of_the_morning }
					}
					random_artifact = {
						limit = { artifact_type = dawn }
						transfer_artifact = { from = PREV to = ROOT }
					}
				}
			}
			set_character_flag = nick_the_sword_of_the_morning
			give_nickname = nick_the_sword_of_the_morning
			hidden_tooltip = {
				character_event = { id = valyrian_steel.150 }
				any_playable_ruler = {
					limit = {
						ai = no
						NOT = { character = ROOT }
						OR = {
							dynasty = ROOT
							is_close_relative = ROOT
							same_realm = ROOT
							culture_group = ROOT
							religion_group = ROOT
						}
					}
					character_event = { id = valyrian_steel.151 } #ya im lazy
				}
			}
		}
		ai_check_interval = 12
		ai_will_do = { factor = 100 }
	}
	forge_valyrian_steel = {
		only_playable = yes
		is_high_prio = yes
		potential = {
			NOT = { start_date = 7886.1.1 } #Pre-Doom Only
			culture_group = valyrian
		}
		allow = {
			wealth = 400
			trait = dragon_rider
			custom_tooltip = {
				text = TOOLTIPforge_valyrian_steel_STORMSINGER
				hidden_tooltip = {
					any_courtier = {
						religion_group = valyrian_rel_group
						learning = 15
						liege = { character = ROOT }
						prisoner = no
						is_incapable = no
						is_inaccessible_trigger = no
					}
				}
			}
			custom_tooltip = {
				text = TOOLTIPforge_valyrian_steel_VALYRIA
				hidden_tooltip = {
					any_demesne_province = {
						region = world_valyria
					}
				}
			}
			custom_tooltip = {
				text = TOOLTIPforge_valyrian_steel_FORGING
				hidden_tooltip = {
					NOT = { has_character_flag = forging_valyrian_steel }
				}
			}
		}
		effect = {
			wealth = -400
			character_event = { id = valyrian_steel.190 }
			set_character_flag = forging_valyrian_steel
		}
		ai_check_interval = 6
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.1
			}
			modifier = {
				factor = 0.1
				any_artifact = { has_artifact_flag = valyrian_steel }
			}
			modifier = {
				factor = 0
				war = yes
			}
			modifier = {
				factor = 0
				has_character_modifier = loan_timer
				OR = {
					stewardship = 9
					trait = temperate
					NOT = {
						OR = {
							trait = gluttonous
							trait = hedonist
							trait = slothful
						}
					}
				}
			}
			modifier = {
				factor = 0.05
				OR = {
					trait = content
					trait = temperate
				}
			}
			modifier = {
				factor = 5
				OR = {
					trait = ambitious
					trait = greedy
					trait = gluttonous
					trait = envious
				}
			}
		}
	}
	reforge_ice = {
		only_playable = yes
		is_high_prio = yes
		potential = {
			OR = {
				dynasty = 59
				dynasty = 1559
			}
			has_global_flag = ice_stolen_and_reforged
		}
		allow = {
			wealth = 100
			custom_tooltip = {
				text = TOOLTIPreforge_iceA
				any_artifact = {
					count = 2
					OR = {
						artifact_type = widowswail
						artifact_type = oathkeeper
						artifact_type = ice
					}
					has_artifact_flag = forged_from_ice
				}
			}
		}
		effect = {
			wealth = -100
			random_artifact = {
				limit = {
					OR = {
						artifact_type = widowswail
						artifact_type = oathkeeper
						artifact_type = ice
					}
					has_artifact_flag = forged_from_ice
				}
				preferred_limit = {
					artifact_type = ice
				}
				preferred_limit = {
					artifact_type = widowswail
				}
				custom_tooltip = {
					text = TOOLTIPreforge_iceB
					set_picture = GFX_vs_ice
					set_name = ice
					set_description = ice_desc_REFORGED
					clr_artifact_flag = forged_from_ice
				}
			}
			hidden_tooltip = {
				any_artifact = {
					limit = {
						OR = {
							artifact_type = widowswail
							artifact_type = oathkeeper
							artifact_type = ice
						}
						has_artifact_flag = forged_from_ice
					}
					unsafe_destroy_artifact = yes
				}
			}
			clr_global_flag = ice_stolen_and_reforged
		}
		ai_check_interval = 12
		ai_will_do = {
			factor = 1
		}
	}
}