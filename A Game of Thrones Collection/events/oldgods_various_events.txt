###################################
#
# THE OLD GODS
# - Various Events
#
###################################

# Written by Henrik Eklund

namespace = TOG
namespace = TGF

### Berserker Events

# Character becomes a Berserker in battle
character_event = {
	id = TOG.3000
	desc = EVTDESC_TOG_3000
	picture = GFX_evt_viking_battle_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	has_dlc = "The Old Gods"
	immediate = {
		disallow_new_battle_events_effect = yes #to keep the tombola from spamming you...
	}

	option = {
		name = EVTOPTA_TOG_3000
		if = {
			limit = { trait = craven }
			remove_trait = craven
		}
		add_trait = berserker
		add_blood_splatter_effect = yes
		allow_new_battle_events_effect = yes
	}
}

# Berserker is Maimed in battle
character_event = {
	id = TOG.3001
	desc = EVTDESC_TOG_3001
	picture = GFX_evt_viking_battle_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	has_dlc = "The Old Gods"

	immediate = {
		disallow_new_battle_events_effect = yes #to keep the tombola from spamming you...
	}

	option = {
		name = EVTOPTA_TOG_3001
		add_blood_splatter_effect = yes
		if = {
			limit = {
				NOT = {
					has_dlc = "Reapers"
				}
			}
			add_trait = maimed
			hidden_tooltip = {
				character_event = { id = 38281 }
			}
		}
		if = {
			limit = {
				has_dlc = "Reapers"
			}
			add_trait = one_legged
			add_trait = severely_injured
			hidden_tooltip = {
				character_event = { id = RIP.11503 } #Notify one-legged
				resolve_severely_injured_effect = yes
			}
		}
		allow_new_battle_events_effect = yes
	}
}

# Berserker is Wounded in battle
character_event = {
	id = TOG.3002
	desc = EVTDESC_TOG_3002
	picture = GFX_evt_viking_battle_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	has_dlc = "The Old Gods"
	immediate = {
		disallow_new_battle_events_effect = yes #to keep the tombola from spamming you...
	}

	option = {
		name = EVTOPTA_TOG_3001
		add_blood_splatter_effect = yes
		add_trait_silently_wounded_effect = yes
		allow_new_battle_events_effect = yes
	}
}

# Berserker is Killed in battle
character_event = {
	id = TOG.3003
	desc = EVTDESC_TOG_3003
	picture = GFX_evt_viking_battle_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	has_dlc = "The Old Gods"

	immediate = {
		disallow_new_battle_events_effect = yes #to keep the tombola from spamming you...
		hidden_tooltip = {
			liege = {
				if = {
					limit = {
						ai = no
						NOT = { character = ROOT }
					}
					character_event = { id = battle.750 }
				}
			}
		}
		#Check if Rhllor saves character
		if = {
			limit = {
				OR = {
					religion = rhllor
					religion = rahlooism
				}
				OR = {
					trait = resurrected_by_rhllor
					AND = {
						OR = {
							trait = favored_by_rhllor
							trait = chosen_by_rhllor
						}
						OR = {
							check_variable = { which = "red_god_magic" value = 10 }
							magic_returned_trigger = yes
						}
					}
				}
			}
			random = {
				chance = 10
				modifier = {
					factor = 2
					trait = resurrected_by_rhllor
				}
				modifier = {
					factor = 2
					trait = chosen_by_rhllor
				}
				modifier = {
					factor = 2
					magic_returned_trigger = yes
				}
				modifier = {
					factor = 1.33
					check_variable = { which = "red_god_magic" value = 1 }
				}
				modifier = {
					factor = 1.5
					check_variable = { which = "red_god_magic" value = 5 }
				}
				set_character_flag = rhllor_resurrected
			}
		}
		#Check if maester saves character
		if = {
			limit = {
				has_character_flag = necromancy_target
				magic_returned_trigger = yes
				NOT = { has_character_flag = rhllor_resurrected }
				persistent_event_target:necromancer = {
					has_character_modifier = necromancer_maester
					is_alive = yes
					prisoner = no
					is_incapable = no
					OR = {
						at_location = PREV
						NOT = { is_inaccessible_trigger = yes }
					}
				}
			}
			set_character_flag = maester_resurrected
		}
	}

	option = {
		name = EVTOPTA_TOG_3003
		trigger = {
			NOT = { has_character_flag = rhllor_resurrected }
			NOT = { has_character_flag = maester_resurrected }
		}
		FROM = {
			if = {
				limit = {
					NOR = {
						is_vassal_or_below = ROOT
						character = ROOT
					}
				}
				ROOT = {
					death = {
						death_reason = death_battle
						killer = PREV
					}
				}
				hidden_tooltip = { character_event = { id = 249 } }
				break = yes
			}
		}
		FROMFROM = {
			if = {
				limit = {
					NOR = {
						is_vassal_or_below = ROOT
						character = ROOT
					}
				}
				ROOT = {
					death = {
						death_reason = death_battle
						killer = PREV
					}
				}
				hidden_tooltip = { character_event = { id = 249 } }
				break = yes
			}
		}
		death = {
			death_reason = death_battle
		}
	}
	option = {
		name = "EVTOPTBred_priest.10"
		trigger = {
			has_character_flag = rhllor_resurrected
		}
		character_event = { id = red_priest.38 tooltip = CUSTOMTOOLTIPrhllor_saved_me }
		clr_character_flag = rhllor_resurrected
		allow_new_battle_events_effect = yes
	}
	option = {
		name = "EVTOPTmaester_resurrected"
		trigger = {
			has_character_flag = maester_resurrected
		}
		character_event = { id = maester.105 tooltip = CUSTOMTOOLTIPmaester_saved_me }
		clr_character_flag = maester_resurrected
		allow_new_battle_events_effect = yes
	}
}

# Berserker kills scores of enemies in battle
character_event = {
	id = TOG.3004
	desc = EVTDESC_TOG_3004
	picture = GFX_evt_viking_battle_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	only_capable = yes
	has_dlc = "The Old Gods"
	immediate = {
		disallow_new_battle_events_effect = yes #to keep the tombola from spamming you...
	}

	option = {
		name = EVTOPTA_TOG_3004
		add_blood_splatter_effect = yes
		prestige = 200
		change_martial = 1
		allow_new_battle_events_effect = yes
	}
}

# Too old to be Berserker
character_event = {
	id = TOG.3005
	desc = EVTDESC_TOG_3005
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	has_dlc = "The Old Gods"
	min_age = 50

	trigger = {
		trait = berserker
		immortal = no
		OR = { #Either you must have been a *regular* berserker (no flag), or a special one (gained via a Warrior Lodge) for more than ten years...
			NOT = { has_character_flag = special_berserker }
			had_character_flag = { flag = special_berserker days = 3650 }
		}
	}

	option = {
		name = EVTOPTA_TOG_3005
		remove_trait = berserker
		clr_character_flag = special_berserker
	}
}

# Berserker goes berserk against Courtier
character_event = {
	id = TOG.3006
	desc = EVTDESC_TOG_3006
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3006
		add_blood_splatter_effect = yes
		random_list = {
			50 = {
				character_event = { id = TOG.3007 days = 1 tooltip = EVTTOOLTIP_TOG_3007 }
			}
			50 = {
				character_event = { id = TOG.3008 days = 1 tooltip = EVTTOOLTIP_TOG_3008 }
			}
		}
	}
}

# Courtier beaten
character_event = {
	id = TOG.3007
	desc = EVTDESC_TOG_3007
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	hide_from = yes

	option = {
		name = EVTOPTA_TOG_3007
		FROMFROM = {
			add_trait_silently_wounded_effect = yes
			opinion = {
				modifier = opinion_went_berserk
				who = ROOT
			}
		}
	}
}

# Courtier spared
character_event = {
	id = TOG.3008
	desc = EVTDESC_TOG_3008
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	hide_from = yes

	option = {
		name = EVTOPTA_TOG_3008
		piety = 20
	}
}

# Berserker goes berserk against Courtier (Hidden AI)
character_event = {
	id = TOG.3009

	hide_window = yes
	is_triggered_only = yes

	ai = yes
	min_age = 16
	only_men = yes
	only_capable = yes
	prisoner = no
	has_dlc = "The Old Gods"

	trigger = {
		host = {
			character = liege
			prisoner = no
			trait = berserker
			NOT = {
				trait = incapable
				opinion = { who = ROOT value = 10 }
			}
			NOT = { is_inaccessible_trigger = yes }
		}
		NOT = { trait = berserker }
		is_primary_heir = no
		is_pretender = no
	}

	immediate = {
		add_blood_splatter_effect = yes
		liege = {
			character_event = { id = TOG.3006 }
		}
	}

	option = {
		name = OK
	}
}

### Varangian Events

# # Varangian Guard Founded (Norse)
# narrative_event = {
	# id = TOG.3101
	# title = EVTNAME_TOG_3100
	# picture = GFX_evt_viking_battle_oldgods
	# border = GFX_event_narrative_frame_war

	# desc = {
		# text = EVTDESC_TOG_3101_A
		# trigger = { # Men want to join the guard!
			# gender_equality_trigger = no
			# NOT = {
				# has_religion_feature = religion_matriarchal
			# }
		# }
	# }
	# desc = {
		# text = EVTDESC_TOG_3101_B
		# trigger = { # Men *and* women want to join the guard
			# gender_equality_trigger = yes
			# NOT = {
				# has_religion_feature = religion_matriarchal
			# }
		# }
	# }
	# desc = {
		# text = EVTDESC_TOG_3101_C
		# trigger = { # Women want to join the guard!
			# has_religion_feature = religion_matriarchal
		# }
	# }

	# is_triggered_only = yes

	# option = {
		# name = EVTOPTA_TOG_3101
		# custom_tooltip = { text = varangians_organized }
	# }
# }

# # Varangian Captain gets Varangian trait
# character_event = {
	# id = TOG.3105
	# hide_window = yes
	# only_rulers = yes
	# min_age = 16
	# only_capable = yes
	# prisoner = no

	# trigger = {
		# has_landed_title = d_varangian_guard
		# NOT = { trait = varangian }
	# }

	# mean_time_to_happen = {
		# days = 1
	# }

	# immediate = {
		# add_trait = varangian
	# }
# }

# # Hack to deal with male only inheritance (sent from on_new_holder_inheritance)
# # (ROOT is the character, FROM is the title, FROMFROM is the old holder)
# character_event = {
    # id = HFP.19100
    # is_triggered_only = yes
    # hide_window = yes

    # trigger = {
    	# NOT = { has_character_flag = varangian_title_sorted }
    	# NOT = { has_character_flag = is_chosen_varangian_leader }
    	# has_landed_title = d_varangian_guard
    	# is_female = no
    	# OR = {
	    	# top_liege = {
	    		# gender_equality_trigger = yes
	    	# }
	    	# any_playable_ruler = {
	    		# religion_openly_norse_or_reformed_trigger = yes
	    		# has_religion_feature = religion_matriarchal
	    	# }
    	# }
    # }

    # immediate = {
    	# set_character_flag = varangian_title_sorted

    	# liege = { save_event_target_as = true_liege }

    	# if = {
			# limit = { gender_equality_trigger = yes }
			# create_character = {
				# random_traits = yes
				# religion = norse_pagan
				# culture = norse
				# dynasty = none
				# female = 50
				# age = 34
				# trait = skilled_tactician
			# }
		# }
		# else_if = {
			# limit = {
				# any_playable_ruler = {
		    		# religion_openly_norse_or_reformed_trigger = yes
		    		# has_religion_feature = religion_matriarchal
		    	# }
			# }
			# create_character = {
				# random_traits = yes
				# religion = norse_pagan
				# culture = norse
				# dynasty = none
				# female = yes
				# age = 34
				# trait = skilled_tactician
			# }
		# }
		# new_character = {
			# add_trait = varangian
			# set_character_flag = is_chosen_varangian_leader
			# d_varangian_guard = {
				# grant_title = PREV
			# }
			# set_defacto_liege = event_target:true_liege
		# }
    # }
# }

# Son has served a few years, choose outcome
character_event = {
	id = TOG.3108

	hide_window = yes

	is_triggered_only = yes

	has_character_flag = serving_varangian

	immediate = {

		#Find ruler to return to
		if = {
			limit = { is_ruler = yes }
			character_event = { id = TOG.3134 }
			break = yes
		}

		if = { #Check actually still at merc
			limit = { NOT = { liege = { primary_title = { mercenary = yes } } } }
			break = yes
		}
		event_target:old_home = {
			owner = {
				if = {
					limit = { is_parent_of = ROOT }
					save_event_target_as = varangian_home
				}
			}
		}
		if = {
			limit = {
				NOT = { event_target:varangian_home = { always = yes } }
				father = {
					is_alive = yes
					is_ruler = yes
					NOT = { trait = nightswatch }
				}
			}
			father = { save_event_target_as = varangian_home }
		}
		else_if = {
			limit = {
				NOT = { event_target:varangian_home = { always = yes } }
				mother = {
					is_alive = yes
					is_ruler = yes
					NOT = { trait = nightswatch }
				}
			}
			mother = { save_event_target_as = varangian_home }
		}
		if = {
			limit = { NOT = { event_target:varangian_home = { always = yes } } }
			event_target:old_home = {
				owner = {
					if = {
						limit = { is_close_relative = ROOT }
						save_event_target_as = varangian_home
					}
				}
			}
		}
		if = {
			limit = { NOT = { event_target:varangian_home = { always = yes } } }
			father = {
				primary_title = {
					holder_scope = {
						if = {
							limit = { dynasty = ROOT is_alive = yes }
							save_event_target_as = varangian_home
						}
					}
				}
			}
		}
		if = {
			limit = { NOT = { event_target:varangian_home = { always = yes } } }
			random_dynasty_member = {
				limit = {
					is_ruler = yes
					is_alive = yes
					NOT = { trait = nightswatch }
					NOT = { trait = kingsguard }
					is_priest = no
				}
				save_event_target_as = varangian_home
			}
		}
		if = {
			limit = { NOT = { event_target:varangian_home = { always = yes } } }
			random_close_relative = {
				limit = {
					is_ruler = yes
					is_alive = yes
					NOT = { trait = nightswatch }
					NOT = { trait = kingsguard }
					is_priest = no
				}
				save_event_target_as = varangian_home
			}
		}
		if = { #No home
			limit = { NOT = { event_target:varangian_home = { always = yes } } }
			break = yes
		}
		#Check adventure can end
		if = {
			limit = {
				OR = {
					trait = incapable
					prisoner = yes
				}
			}
			event_target:varangian_home = { ROOT = { move_character = PREV } }
			break = yes
		}
		if = {
			limit = { event_target:varangian_home = { always = yes } }
			#Select Outcome
			random_list = {
				5 = { # Son stays in Greece with wife (Son)
					modifier = {
						factor = 0
						is_married = yes
					}
					modifier = {
						factor = 0
						is_primary_heir = yes
					}
					modifier = {
						factor = 1.5
						trait = chaste
					}
					modifier = {
						factor = 1.5
						trait = humble
					}
					modifier = {
						factor = 1.5
						trait = content
					}
					modifier = {
						factor = 1.5
						trait = slothful
					}
					modifier = {
						factor = 0.66
						trait = proud
					}
					modifier = {
						factor = 0.66
						trait = ambitious
					}
					modifier = {
						factor = 0.66
						trait = diligent
					}
					modifier = {
						factor = 0.66
						trait = lustful
					}
					character_event = { id = TOG.3111 }
				}
				5 = { # Son returns scarred but seasoned (Son)
					modifier = {
						factor = 0
						trait = scarred_high
					}
					modifier = {
						factor = 1.5
						trait = brave
					}
					modifier = {
						factor = 0.66
						trait = craven
					}
					event_target:varangian_home = { character_event = { id = TOG.3115 } }
				}
				4 = { # Son returns with notions of Greek love (Son)
					modifier = {
						factor = 0
						trait = homosexual
					}
					modifier = {
						factor = 1.5
						trait = lustful
					}
					modifier = {
						factor = 1.5
						trait = hedonist
					}
					modifier = {
						factor = 0.66
						trait = chaste
					}
					event_target:varangian_home = { character_event = { id = TOG.3117 } }
				}
				3 = { # Son returns castrated and blinded (Son)
					modifier = {
						factor = 0
						OR = {
							trait = eunuch
							trait = blinded
						}
					}
					modifier = {
						factor = 1.5
						trait = rude
					}
					modifier = {
						factor = 1.5
						trait = wroth
					}
					modifier = {
						factor = 1.5
						trait = arbitrary
					}
					modifier = {
						factor = 1.5
						trait = ruthless
					}
					modifier = {
						factor = 1.5
						trait = greedy
					}
					modifier = {
						factor = 1.5
						trait = cruel
					}
					modifier = {
						factor = 1.5
						trait = proud
					}
					modifier = {
						factor = 0.66
						trait = patient
					}
					modifier = {
						factor = 0.66
						trait = just
					}
					modifier = {
						factor = 0.66
						trait = honorable
					}
					modifier = {
						factor = 0.66
						trait = charitable
					}
					modifier = {
						factor = 0.66
						trait = kind
					}
					modifier = {
						factor = 0.66
						trait = humble
					}
					modifier = {
						factor = 0.66
						trait = gregarious
					}
					add_trait = blinded
					event_target:varangian_home = { character_event = { id = TOG.3119 } }
				}
				5 = { # Son returns as excellent strategist (Son)
					modifier = {
						factor = 0
						trait = brilliant_strategist
					}
					modifier = {
						factor = 0
						NOR = {
							trait = misguided_warrior
							trait = tough_soldier
							trait = skilled_tactician
						}
					}
					modifier = {
						factor = 2
						is_genius_trigger = yes
					}
					modifier = {
						factor = 1.5
						trait = diligent
					}
					modifier = {
						factor = 1.5
						is_smart_trigger = yes
					}
					modifier = {
						factor = 0.66
						is_dumb_trigger = yes
					}
					modifier = {
						factor = 0.5
						is_imbecile_trigger = yes
					}
					event_target:varangian_home = { character_event = { id = TOG.3121 } }
				}
				5 = { # Son returns with PTSD (Son)
					modifier = {
						factor = 0
						trait = depressed
					}
					modifier = {
						factor = 1.5
						trait = kind
					}
					modifier = {
						factor = 1.5
						trait = poet
					}
					modifier = {
						factor = 1.5
						trait = just
					}
					modifier = {
						factor = 1.5
						trait = honorable
					}
					modifier = {
						factor = 1.5
						trait = craven
					}
					modifier = {
						factor = 1.5
						trait = shy
					}
					modifier = {
						factor = 0.66
						trait = cruel
					}
					modifier = {
						factor = 0.66
						trait = arbitrary
					}
					modifier = {
						factor = 0.66
						trait = ruthless
					}
					modifier = {
						factor = 0.66
						trait = brave
					}
					modifier = {
						factor = 0.66
						trait = gregarious
					}
					event_target:varangian_home = { character_event = { id = TOG.3123 } }
				}
				5 = { # Son returns home with Greek wife (Son)
					modifier = {
						factor = 0
						is_married = yes
					}
					modifier = {
						factor = 1.5
						trait = chaste
					}
					modifier = {
						factor = 1.5
						trait = honorable
					}
					modifier = {
						factor = 1.5
						trait = just
					}
					modifier = {
						factor = 1.5
						trait = content
					}
					modifier = {
						factor = 1.5
						trait = humble
					}
					modifier = {
						factor = 0.66
						trait = lustful
					}
					modifier = {
						factor = 0.66
						trait = ruthless
					}
					modifier = {
						factor = 0.66
						trait = arbitrary
					}
					modifier = {
						factor = 0.66
						trait = ambitious
					}
					modifier = {
						factor = 0.66
						trait = proud
					}
					event_target:varangian_home = { character_event = { id = TOG.3125 } }
				}
				5 = { # Son returns home as a Christian zealot (Son)
					modifier = {
						factor = 0
						religion = rhllor
					}
					modifier = {
						factor = 0
						event_target:varangian_home = { religion = rhllor }
					}
					modifier = {
						factor = 0
						trait = zealous
					}
					modifier = {
						factor = 0
						trait = cynical
					}
					modifier = {
						factor = 1.5
						trait = arbitrary
					}
					modifier = {
						factor = 0.66
						trait = just
					}
					modifier = {
						factor = 1.5
						trait = humble
					}
					modifier = {
						factor = 0.66
						trait = proud
					}
					event_target:varangian_home = { character_event = { id = TOG.3127 } }
				}
				8 = { # Son returns home as a seasoned warrior (Son)
					modifier = {
						factor = 0
						trait = master_warrior
					}
					modifier = {
						factor = 1.5
						trait = brave
					}
					modifier = {
						factor = 1.5
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.5
						is_agile_trigger = yes
					}
					modifier = {
						factor = 1.5
						is_smart_trigger = yes
					}
					modifier = {
						factor = 2
						is_genius_trigger = yes
					}
					modifier = {
						factor = 0.66
						trait = slothful
					}
					modifier = {
						factor = 0.66
						is_dumb_trigger = yes
					}
					modifier = {
						factor = 0.5
						is_imbecile_trigger = yes
					}
					modifier = {
						factor = 0.5
						trait = craven
					}
					event_target:varangian_home = { character_event = { id = TOG.3129 } }
				}
				4 = { # Son dies in battle (Son)
					modifier = {
						factor = 1.5
						NOR = {
							trait = poor_warrior
							trait = trained_warrior
							trait = skilled_warrior
							trait = master_warrior
						}
					}
					modifier = {
						factor = 1.2
						trait = poor_warrior
					}
					modifier = {
						factor = 0.8
						trait = skilled_warrior
					}
					modifier = {
						factor = 0.66
						trait = master_warrior
					}
					modifier = {
						factor = 1.5
						trait = brave
					}
					modifier = {
						factor = 0.66
						trait = craven
					}
					modifier = {
						factor = 1.5
						trait = wroth
					}
					modifier = {
						factor = 0.66
						trait = patient
					}
					modifier = {
						factor = 1.5
						trait = berserker
					}
					modifier = {
						factor = 1.5
						trait = drunkard
					}
					modifier = {
						factor = 0.5
						trait = infirm
					}
					event_target:varangian_home = { character_event = { id = TOG.3131 } }
				}
				5 = { # Son returns with loot (Son)
					modifier = {
						factor = 1.5
						trait = greedy
					}
					modifier = {
						factor = 0.66
						trait = charitable
					}
					modifier = {
						factor = 0.66
						stewardship < 2
					}
					modifier = {
						factor = 0.66
						stewardship < 6
					}
					modifier = {
						factor = 1.5
						stewardship = 10
					}
					modifier = {
						factor = 1.5
						stewardship = 14
					}
					event_target:varangian_home = { character_event = { id = TOG.3133 } }
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Son wants to join the Varangians (Son) #AGOT: adapted for merc company adventures
character_event = {
	id = TOG.3109
	hide_window = yes

	ai = yes
	is_triggered_only = yes
	min_age = 16
	max_age = 30
	only_capable = yes
	prisoner = no
	has_dlc = "The Old Gods"
	is_sick = no

	trigger = {
		is_landed = no
		in_command = no
		has_epidemic = no
		NOT = { has_severe_disability_trigger = yes }
		NOT = { has_minor_title = title_triarch }

		OR = {
			is_female = no
			female_get_masculine_event_trigger = yes
		}
		#has_global_flag = varangian_guard_founded
		#culture_group = north_germanic
		NOR = {
			#trait = varangian
			has_character_flag = serving_varangian
			has_character_flag = denied_varangian
		}
		OR = { # Regardless, they might ask either parent...
			father = {
				is_ruler = yes
				is_alive = yes
				is_liege_of = ROOT
				#culture_group = north_germanic
				prisoner = no
				is_incapable = no
				ROOT = { host = { character = PREVPREV } }
			}
			mother = {
				is_ruler = yes
				is_alive = yes
				is_liege_of = ROOT
				#culture_group = north_germanic
				prisoner = no
				is_incapable = no
				ROOT = { host = { character = PREVPREV } }
			}
		}
		NOT = { trait = content }

		can_press_claims_trigger = yes
		NOT = { culture = moon_clansman }
		NOT = { culture_group = free_folk }
		NOT = { culture = moon_clansman }
		NOT = { is_inaccessible_trigger = yes }
	}

	weight_multiplier = {
		#months = 1000 #AGOT
		factor = 1

		modifier = {
			factor = 0.25
			is_primary_heir = yes
		}
		modifier = {
			factor = 0.33
			OR = {
				is_voter = yes
				is_councillor = yes
			}
		}
		modifier = {
			factor = 0.33
			has_ambition = obj_wants_landed_title
		}

		modifier = {
			factor = 2
			OR = {
				trait = skilled_warrior
				trait = master_warrior
			}
		}
		modifier = {
			factor = 0.33
			trait = poor_warrior
		}
		modifier = {
			factor = 0.2
			NOR = {
				trait = poor_warrior
				trait = trained_warrior
				trait = skilled_warrior
				trait = master_warrior
			}
		}

		modifier = {
			factor = 2
			trait = ambitious
		}
		modifier = {
			factor = 2
			trait = diligent
		}
		modifier = {
			factor = 2
			trait = brave
		}
		modifier = {
			factor = 1.33
			trait = proud
		}
		modifier = {
			factor = 1.33
			trait = greedy
		}
		modifier = {
			factor = 1.33
			trait = berserker
		}
		modifier = {
			factor = 1.33
			trait = impaler
		}
		modifier = {
			factor = 1.25
			trait = bastard
		}
		modifier = {
			factor = 0.2
			trait = slothful
		}
		modifier = {
			factor = 0.2
			trait = craven
		}
		modifier = {
			factor = 0.66
			trait = humble
		}
		modifier = {
			factor = 0.66
			trait = shy
		}
	}

	immediate = {
		set_character_flag = serving_varangian
		random_list = { # Send event to parent-liege...
			50 = {
				trigger = {
					father = {
						is_ruler = yes
						is_alive = yes
						is_liege_of = ROOT
						#culture_group = north_germanic
						prisoner = no
						is_incapable = no
						ROOT = { host = { character = PREVPREV } }
					}
				}
				father = { character_event = { id = TOG.3110 } }
			}
			50 = {
				trigger = {
					mother = {
						is_ruler = yes
						is_alive = yes
						is_liege_of = ROOT
						#culture_group = north_germanic
						prisoner = no
						is_incapable = no
						ROOT = { host = { character = PREVPREV } }
					}
				}
				mother = { character_event = { id = TOG.3110 } }
			}
		}
	}

	option = {
		name = OK
	}
}

# Son wants to join the Varangians (Father)
character_event = {
	id = TOG.3110
	desc = EVTDESC_TOG_3110
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = { # Deny
		name = EVTOPTA_TOG_3110
		ai_chance = {
			factor = 100

			modifier = {
				factor = 2
				NOT = { opinion = { who = FROM value = -20 } }
			}
			modifier = {
				factor = 2
				NOT = { opinion = { who = FROM value = -50 } }
			}
			modifier = {
				factor = 2
				NOT = { opinion = { who = FROM value = -80 } }
			}
			modifier = {
				factor = 2
				trait = cruel
			}
			modifier = {
				factor = 2
				trait = greedy
			}
			modifier = {
				factor = 2
				trait = wroth
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 2
				trait = paranoid
			}
		}
		FROM = {
			show_scope_change = no
			opinion = {
				modifier = opinion_very_disappointed
				years = 1
				who = ROOT
			}
			clr_character_flag = serving_varangian
			set_character_flag = denied_varangian
		}
		prestige = -25
	}
	option = { # Allow
		name = EVTOPTB_TOG_3110
		ai_chance = {
			factor = 100

			modifier = {
				factor = 2
				opinion = { who = FROM value = 20 }
			}
			modifier = {
				factor = 2
				opinion = { who = FROM value = 50 }
			}
			modifier = {
				factor = 2
				opinion = { who = FROM value = 80 }
			}
			modifier = {
				factor = 2
				trait = kind
			}
			modifier = {
				factor = 2
				trait = charitable
			}
			modifier = {
				factor = 2
				trait = patient
			}
			modifier = {
				factor = 2
				trait = just
			}
			modifier = {
				factor = 2
				trait = honorable
			}
			modifier = {
				factor = 2
				trait = trusting
			}
		}
		liege = { capital_scope = { save_event_target_as = old_home } } #record just in case
		random_independent_ruler = {
			limit = {
				primary_title = {
					OR = {
						title = d_bright_banners
						title = d_company_of_the_cat
						title = d_gallant_men
						title = d_iron_shields
						title = d_long_lances
						title = d_maidens_men
						title = d_ragged_standard
						title = d_second_sons
						title = d_stormcrows
					}
				}
			}
			show_scope_change = no
			FROM = {
				show_scope_change = no
				move_character = PREV #Does not seem to work properly
				#force_host = PREV #instead using this #AGOT: actually it does seem to work
			}
		}
		hidden_tooltip = {
			FROM = {
				if = {
					limit = { is_female = yes }
					set_character_flag = special_marshal #for safety, so they can go lead armies...
				}
				set_character_flag = serving_varangian
				character_event = { id = TOG.3108 days = 1750  random = 400 }
			}
		}
		prestige = 25
	}
}

# Son stays in Greece with wife (Son)
character_event = {
	id = TOG.3111

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_dlc = "The Old Gods"
	}

	immediate = {
		event_target:varangian_home = { character_event = { id = TOG.3112 days = 1 } }
		random_playable_ruler = {
			limit = {
				higher_tier_than = COUNT
				OR = {
					independent = yes
					tier = KING
				}
				capital_scope = {
					OR = {
						culture_group = free_cities
						culture = eastern_valyrian
					}
				}
				NOT = { is_parent_of = ROOT }
				NOT = { dynasty = ROOT }
				NOT = { culture = ROOT }
			}
			character_event = { id = TOG.3113 }
		}
	}

	option = {
		name = OK
	}
}

# Son stays in Greece with wife (Norse father)
character_event = {
	id = TOG.3112
	desc = EVTDESC_TOG_3112
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3112
		tooltip = {
			FROM = {
				liege = {
					FROM = {
						move_character = PREV
						religion = PREV
					}
				}
			}
		}
		FROM = {
			prestige = 100
			wealth = 100
		}
	}
}

# Son stays in Greece with wife (Byzantine Emperor)
character_event = {
	id = TOG.3113
	desc = EVTDESC_TOG_3113
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		FROM = { set_character_flag = keep_lowborn_marriage }
		capital_scope = {
			ROOT = {
				if = {
					limit = { FROM = { is_female = no } }
					create_character = {
						random_traits = yes
						dynasty = random
						female = yes
						age = 26
						religion = PREV
						culture = PREV
					}
					new_character = {
						add_spouse_matrilineal = FROM
					}
				}
				if = {
					limit = { FROM = { is_female = yes } }
					create_character = {
						random_traits = yes
						dynasty = random
						age = 26
						religion = PREV
						culture = PREV
					}
					new_character = {
						add_spouse = FROM
					}
				}
			}
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			father = {
				any_child = {
					limit = {
						same_liege = PREVPREV
						NOT = { character = PREVPREV }
						NOT = { has_character_flag = serving_varangian }
					}
					move_character = PREV
				}
			}
			move_character = ROOT
			religion = ROOT
		}
	}

	option = {
		name = EVTOPTA_TOG_3113
	}
}

# # Son returns scarred but seasoned (Son)
# character_event = {
# }

# Son returns scarred but seasoned
character_event = {
	id = TOG.3115
	desc = EVTDESC_TOG_3115
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3115
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			move_character = ROOT
			add_scarred_tiered_effect = yes
			if = {
				limit = { NOT = { trait = master_warrior } }
				if = {
					limit = {
						trait = skilled_warrior
					}
					random = {
						chance = 20
						add_trait = master_warrior
					}
				}
				else_if = {
					limit = {
						trait = trained_warrior
					}
					random = {
						chance = 50
						add_trait = skilled_warrior
					}
				}
				else = {
					add_trait = trained_warrior
					hidden_tooltip = { remove_trait = poor_warrior }
				}
			}
			#add_trait = varangian
			change_martial = 2
			prestige = 50
			wealth = 50
		}
		any_child = {
			limit = { same_liege = FROM }
			move_character = ROOT
		}
	}
}

# # Son returns with notions of Greek love (Son)
# character_event = {
# }

# Son returns with notions of Greek love
character_event = {
	id = TOG.3117
	desc = EVTDESC_TOG_3117
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3117
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			move_character = ROOT
			add_trait = homosexual
			#add_trait = varangian
			prestige = 50
			wealth = 50
		}
	}
}

# # Son returns castrated and blinded (Son)
# character_event = {
# }

# Son returns castrated and blinded
character_event = {
	id = TOG.3119
	desc = EVTDESC_TOG_3119
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3119
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			move_character = ROOT
			tooltip = { add_trait = blinded }
			if = {
				limit = { is_female = no }
				add_trait = eunuch
			}
			if = {
				limit = { is_female = yes }
				add_crippled_trait_effect = yes
			}
			#add_trait = varangian
		}
	}
}

# # Son returns as excellent strategist (Son)
# character_event = {
# }

# Son returns as excellent strategist
character_event = {
	id = TOG.3121
	desc = EVTDESC_TOG_3121
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3121
		if = {
			limit = {
				FROM = {
					trait = skilled_tactician
				}
			}
			FROM = {
				hidden_tooltip = { remove_trait = skilled_tactician }
				add_trait = brilliant_strategist
			}
		}
		if = {
			limit = {
				FROM = {
					OR = {
						trait = misguided_warrior
						trait = tough_soldier
					}
				}
			}
			FROM = {
				hidden_tooltip = {
					remove_trait = misguided_warrior
					remove_trait = tough_soldier
				}
				add_trait = skilled_tactician
			}
		}
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			change_martial = 2
			#add_trait = varangian
			move_character = ROOT
			prestige = 50
			wealth = 50
		}
	}
}

# # Son returns with PTSD (Son)
# character_event = {
# }

# Son returns with PTSD
character_event = {
	id = TOG.3123
	desc = EVTDESC_TOG_3123
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3123
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			move_character = ROOT
			add_trait = stressed
			add_trait = depressed
			#add_trait = varangian
			wealth = 50
		}
	}
}

# # Son returns home with Greek wife (Son)
# character_event = {
# }

# Son returns home with Greek wife
character_event = {
	id = TOG.3125
	desc = EVTDESC_TOG_3125
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		hidden_tooltip = {
			random_playable_ruler = {
				limit = { capital_scope = { culture_group = free_cities } }
				capital_scope = {
					ROOT = {
						FROM = { set_character_flag = keep_lowborn_marriage }
						if = {
							limit = { FROM = { is_female = no } }
							create_character = {
								random_traits = yes
								dynasty = none
								female = yes
								age = 26
								culture = PREV
								religion = PREV
								trait = fair
							}
							new_character = {
								add_spouse = FROM
								add_lover = FROM
							}
						}
						if = {
							limit = { FROM = { is_female = yes } }
							create_character = {
								random_traits = yes
								dynasty = none
								age = 26
								culture = PREV
								religion = PREV
								trait = fair
							}
							new_character = {
								add_spouse_matrilineal = FROM
								add_lover = FROM
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTA_TOG_3125
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			any_spouse = {
				limit = { is_ruler = no }
				move_character = ROOT
			}
			#add_trait = varangian
			move_character = ROOT
			prestige = 50
			wealth = 50
		}
	}
}

# # Son returns home as a Christian zealot (Son)
# character_event = {
# }

# Son returns home as a Christian zealot
character_event = {
	id = TOG.3127
	desc = EVTDESC_TOG_3127
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3127
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			move_character = ROOT
			add_trait = zealous
			#add_trait = varangian
			religion = rhllor
			prestige = 50
			wealth = 50
		}
	}
}

# # Son returns home as a seasoned warrior (Son)
# character_event = {
# }

# Son returns home as a seasoned warrior
character_event = {
	id = TOG.3129
	desc = EVTDESC_TOG_3129
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3129
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			move_character = ROOT
			if = {
				limit = { trait = skilled_warrior }
				hidden_tooltip = { remove_trait = skilled_warrior }
				add_trait = master_warrior
			}
			if = {
				limit = { trait = trained_warrior }
				hidden_tooltip = { remove_trait = trained_warrior }
				add_trait = skilled_warrior
			}
			if = {
				limit = {
					NOT = { trait = trained_warrior }
					NOT = { trait = skilled_warrior }
					NOT = { trait = master_warrior }
				}
				hidden_tooltip = { remove_trait = poor_warrior }
				add_trait = trained_warrior
			}
			if = {
				limit = {
					NOT = { trait = brave }
					NOT = { trait = craven }
				}
				add_trait = brave
			}
			if = {
				limit = { trait = craven }
				remove_trait = craven
			}
			prestige = 50
			wealth = 50
			#add_trait = varangian
			#change_martial = 2
		}
	}
}

# # Son dies in battle (Son)
# character_event = {
# }

# Son dies in battle
character_event = {
	id = TOG.3131
	desc = EVTDESC_TOG_3131
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3131
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			death = { death_reason = death_battle }
			prestige = 50
		}
	}
}

# # Son returns with loot (Son)
# character_event = {
# }

# Son returns with loot
character_event = {
	id = TOG.3133
	desc = EVTDESC_TOG_3133
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3133
		any_child = {
			limit = {
				same_liege = FROM
				NOT = { character = FROM }
				NOT = { has_character_flag = serving_varangian }
			}
			move_character = ROOT
		}
		FROM = {
			any_child = {
				limit = { same_liege = PREV }
				move_character = ROOT
			}
			move_character = ROOT
			#add_trait = varangian
			wealth = 150
			prestige = 50
		}
		wealth = 150
	}
}

# Father dies, Player Son is heir
character_event = {
	id = TOG.3134
	desc = EVTDESC_TOG_3134
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	has_dlc = "The Old Gods"
	has_character_flag = serving_varangian

	immediate = {
		clr_character_flag = serving_varangian
	}

	option = {
		name = EVTOPTA_TOG_3134
		#add_trait = varangian
		prestige = 50
		wealth = 50
	}
}

# # Father dies, Son gets Varangian trait
# character_event = {
	# id = TOG.3135
	# hide_window = yes

	# min_age = 16
	# ai = yes
	# only_men = yes
	# only_capable = yes
	# prisoner = no

	# trigger = {
		# has_dlc = "The Old Gods"
		# OR = {
			# has_character_flag = wants_varangian
			# has_character_flag = serving_varangian
		# }
		# father_even_if_dead = { is_alive = no }
	# }

	# immediate = {
		# #add_trait = varangian
		# clr_character_flag = wants_varangian
		# clr_character_flag = serving_varangian
	# }

	# option = {
		# name = OK
	# }
# }

## Sejdr Events

#Vцlva Appears
character_event = {
	id = TOG.3200
	desc = EVTDESC_TOG_3200
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_religion

	ai = no
	only_playable = yes
	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		has_dlc = "The Old Gods"
		in_command = no
		OR = {
			culture_group = moraqi_group
			culture_group = free_cities
			culture_group = ghiscari_group
			culture_group = summer_islands
			culture_group = qarth_group
			culture_group = asshai_group
			culture_group = sothoryos_islands
			culture_group = jade_islands_group
			culture = lhazareen
			AND = {
				culture_group = valyrian
				NOT = { capital_scope = { region = world_westeros } }
			}
		}
		NOT = {
			any_courtier = {
				has_minor_title = title_volva
			}
		}
	}

	mean_time_to_happen = {
		months = 2200
	}

	immediate = {
		create_random_priest = {
			random_traits = yes
			dynasty = none
			female = yes
			age = 35
			religion = ROOT
			culture = ROOT
			trait = mystic
			trait = scholarly_theologian
		}
		new_character = {
			save_event_target_as = maegi
			set_immune_to_pruning = yes
			add_priest_trait_effect = yes
			remove_trait = slow
			remove_trait = slow_1
			remove_trait = imbecile
			remove_trait = imbecile_1
			remove_trait = dull
			character_event = { id = wildling.1 } #check for wildling trait
			character_event = { id = pirate.1 } #check for pirate trait
			while = {
				limit = { learning < 14 }
				change_learning = 1
			}
		}
	}

	option = {
		name = EVTOPTA_TOG_3200
		event_target:maegi = { give_minor_title = title_volva }
	}
	option = {
		name = EVTOPTB_TOG_3200
		custom_tooltip = {
			text = away_witch
			event_target:maegi = { death = { death_reason = death_missing } }
		}
	}
}

# Young Vцlva Appears
character_event = {
	id = TOG.3201
	desc = EVTDESC_TOG_3201
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_religion

	ai = no
	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		has_dlc = "The Old Gods"
		in_command = no
		OR = {
			culture_group = moraqi_group
			culture_group = free_cities
			culture_group = ghiscari_group
			culture_group = summer_islands
			culture_group = qarth_group
			culture_group = asshai_group
			culture_group = sothoryos_islands
			culture_group = jade_islands_group
			culture = lhazareen
		}
		NOT = {
			any_courtier = {
				has_minor_title = title_volva
			}
		}
	}

	mean_time_to_happen = {
		months = 2200
	}

	immediate = {
		create_random_priest = {
			random_traits = yes
			dynasty = none
			female = yes
			age = 22
			religion = ROOT
			culture = ROOT
			trait = mystic
			trait = fair
			trait = scholarly_theologian
		}
		new_character = {
			save_event_target_as = maegi
			set_immune_to_pruning = yes
			add_priest_trait_effect = yes
			remove_trait = slow
			remove_trait = slow_1
			remove_trait = imbecile
			remove_trait = imbecile_1
			remove_trait = dull
			character_event = { id = wildling.1 } #check for wildling trait
			character_event = { id = pirate.1 } #check for pirate trait
			while = {
				limit = { learning < 14 }
				change_learning = 1
			}
		}
	}

	option = {
		name = EVTOPTA_TOG_3201
		event_target:maegi = { give_minor_title = title_volva }
	}
	option = {
		name = EVTOPTB_TOG_3201
		custom_tooltip = {
			text = no_witch
			event_target:maegi = { death = { death_reason = death_missing } }
		}
	}
}

# Old Vцlva Appears
character_event = {
	id = TOG.3202
	desc = EVTDESC_TOG_3202
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_religion

	ai = no
	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		has_dlc = "The Old Gods"
		in_command = no
		OR = {
			culture_group = moraqi_group
			culture_group = free_cities
			culture_group = ghiscari_group
			culture_group = summer_islands
			culture_group = qarth_group
			culture_group = asshai_group
			culture_group = sothoryos_islands
			culture_group = jade_islands_group
			culture = lhazareen
		}
		NOT = {
			any_courtier = {
				has_minor_title = title_volva
			}
		}
	}

	mean_time_to_happen = {
		months = 2200
	}

	immediate = {
		create_random_priest = {
			random_traits = yes
			dynasty = none
			female = yes
			age = 53
			religion = ROOT
			culture = ROOT
			trait = mystic
			trait = ugly
			trait = scholarly_theologian
		}
		new_character = {
			save_event_target_as = maegi
			set_immune_to_pruning = yes
			add_priest_trait_effect = yes
			remove_trait = slow
			remove_trait = slow_1
			remove_trait = imbecile
			remove_trait = imbecile_1
			remove_trait = dull
			character_event = { id = wildling.1 } #check for wildling trait
			character_event = { id = pirate.1 } #check for pirate trait
			while = {
				limit = { learning < 14 }
				change_learning = 1
			}
		}
	}

	option = {
		name = EVTOPTA_TOG_3202
		event_target:maegi = { give_minor_title = title_volva }
	}
	option = {
		name = EVTOPTB_TOG_3202
		custom_tooltip = {
			text = begone_witch
			event_target:maegi = { death = { death_reason = death_missing } }
		}
	}
}

# Vцlva Warns About Child (AI Spouse)
character_event = {
	id = TOG.3203
	hide_window = yes

	only_women = yes
	min_age = 16
	prisoner = no
	has_dlc = "The Old Gods"

	trigger = {
		magic_returned_trigger = yes
		is_pregnant = yes
		spouse = {
			ai = no
			any_courtier = {
				has_minor_title = title_volva
			}
		}
		NOT = { has_character_flag = pregnant_with_demon }
	}

	mean_time_to_happen = {
		months = 400
	}

	immediate = {
		set_character_flag = pregnant_with_demon
		spouse = {
			random_courtier = {
				limit = { has_minor_title = title_volva }
				character_event = { id = TOG.3204 }
			}
		}
	}

	option = {
		name = OK
	}
}

# Vцlva Warns About Child (AI Vцlva)
character_event = {
	id = TOG.3204
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		liege = {
			character_event = { id = TOG.3205 }
		}
	}

	option = {
		name = OK
	}
}

# Vцlva Warns About Child
character_event = {
	id = TOG.3205
	desc = EVTDESC_TOG_3205
	picture = GFX_evt_pregnancy
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3205
		FROM = {
			opinion = {
				modifier = opinion_disappointed
				years = 1
				who = ROOT
			}
		}
	}
	option = {
		name = EVTOPTB_TOG_3205
		FROMFROM = {
			opinion = {
				modifier = opinion_disappointed
				years = 1
				who = ROOT
			}
		}
	}
}

# Demon Child is Born
# character_event = {
	# id = TOG.3206 #MERGED WITH BIRTH.990
	# hide_window = yes

	# is_triggered_only = yes


	# option = {
		# name = OK
	# }
# }

# Child acts strange I (AI)
character_event = {
	id = TOG.3210
	hide_window = yes

	min_age = 4
	max_age = 16
	ai = yes
	has_character_flag = demon_child
	has_dlc = "The Old Gods"

	trigger = {
		NOT = { has_character_flag = child_strange_1 }
		father = { is_alive = yes }
	}

	mean_time_to_happen = {
		months = 220
	}

	immediate = {
		set_character_flag = child_strange_1
		father = { character_event = { id = TOG.3211 } }
	}

	option = {
		name = OK
	}
}

# Child acts strange I
character_event = {
	id = TOG.3211
	desc = EVTDESC_TOG_3211
	picture = GFX_evt_child_play
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3211
		custom_tooltip = { text = child_acts_strange }
	}
}

# Child acts strange II (AI)
character_event = {
	id = TOG.3212
	hide_window = yes

	min_age = 4
	max_age = 16
	ai = yes
	has_character_flag = demon_child
	has_dlc = "The Old Gods"

	trigger = {
		NOT = { has_character_flag = child_strange_2 }
		father = { is_alive = yes }
	}

	mean_time_to_happen = {
		months = 220
	}

	immediate = {
		set_character_flag = child_strange_2
		father = { character_event = { id = TOG.3213 } }
	}

	option = {
		name = OK
	}
}

# Child acts strange II
character_event = {
	id = TOG.3213
	desc = EVTDESC_TOG_3213
	picture = GFX_evt_child_play
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3213
		custom_tooltip = { text = child_acts_strange }
	}
}

# Child acts strange III (AI)
character_event = {
	id = TOG.3214
	hide_window = yes

	min_age = 4
	max_age = 16
	ai = yes
	has_character_flag = demon_child
	has_dlc = "The Old Gods"

	trigger = {
		NOT = { has_character_flag = child_strange_3 }
		father = { is_alive = yes }
	}

	mean_time_to_happen = {
		months = 220
	}

	immediate = {
		set_character_flag = child_strange_3
		father = { character_event = { id = TOG.3215 } }
	}

	option = {
		name = OK
	}
}

# Child acts strange III
character_event = {
	id = TOG.3215
	desc = EVTDESC_TOG_3215
	picture = GFX_evt_child_play
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3215
		custom_tooltip = { text = child_acts_strange }
	}
}

# Child kills Courtier I (AI Child)
character_event = {
	id = TOG.3216
	hide_window = yes

	min_age = 4
	max_age = 16
	ai = yes
	has_character_flag = demon_child
	has_dlc = "The Old Gods"

	trigger = {
		NOT = { has_character_flag = child_kills_1 }
		father = { is_alive = yes }
		OR = {
			has_character_flag = child_strange_1
			has_character_flag = child_strange_2
			has_character_flag = child_strange_3
		}
		father = {
			any_courtier = {
				NOT = {
					character = ROOT
					is_close_relative = ROOT
				}
				host = {
					character = liege
					prisoner = no
				}
				ai = yes
				is_primary_heir = no
				is_pretender = no
				prisoner = no
				age = 13
				in_command = no
				NOT = { spouse = { character = host } }
			}
		}
	}

	mean_time_to_happen = {
		months = 320
	}

	immediate = {
		set_character_flag = child_kills_1
		father = {
			random_courtier = {
				limit = {
					NOT = {
						character = ROOT
						is_close_relative = ROOT
					}
					host = {
						character = liege
						prisoner = no
					}
					ai = yes
					is_primary_heir = no
					is_pretender = no
					prisoner = no
					age = 13
					in_command = no
					NOT = { spouse = { character = host } }
				}
				character_event = { id = TOG.3217 }
			}
		}
	}

	option = {
		name = OK
	}
}

# Child kills Courtier I (AI Courtier)
character_event = {
	id = TOG.3217
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		liege = { character_event = { id = TOG.3218 } }
	}

	option = {
		name = OK
	}
}

#Child kills Courtier I
character_event = {
	id = TOG.3218
	desc = EVTDESC_TOG_3218
	picture = GFX_evt_viking_funeral_oldgods
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3218
		FROM = {
			death = {
				death_reason = death_murder_unknown_fall
				killer = ROOT
			}
		}
	}
}

# Child kills Courtier II (AI Child)
character_event = {
	id = TOG.3219
	hide_window = yes

	min_age = 4
	max_age = 16
	ai = yes
	has_character_flag = demon_child
	has_dlc = "The Old Gods"

	trigger = {
		NOT = { has_character_flag = child_kills_2 }
		father = { is_alive = yes }
		OR = {
			has_character_flag = child_strange_1
			has_character_flag = child_strange_2
			has_character_flag = child_strange_3
		}
		father = {
			any_courtier = {
				NOT = {
					character = ROOT
					is_close_relative = ROOT
				}
				host = {
					character = liege
					prisoner = no
				}
				ai = yes
				is_primary_heir = no
				is_pretender = no
				prisoner = no
				age = 13
				in_command = no
				NOT = { spouse = { character = host } }
			}
		}
	}

	mean_time_to_happen = {
		months = 320
	}

	immediate = {
		set_character_flag = child_kills_2
		father = {
			random_courtier = {
				limit = {
					NOT = {
						character = ROOT
						is_close_relative = ROOT
					}
					host = {
						character = liege
						prisoner = no
					}
					ai = yes
					is_primary_heir = no
					is_pretender = no
					prisoner = no
					age = 13
					in_command = no
					NOT = { spouse = { character = host } }
				}
				character_event = { id = TOG.3220 }
			}
		}
	}

	option = {
		name = OK
	}
}

# Child kills Courtier II (AI Courtier)
character_event = {
	id = TOG.3220
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		liege = { character_event = { id = TOG.3221 } }
	}

	option = {
		name = OK
	}
}

#Child kills Courtier II
character_event = {
	id = TOG.3221
	desc = EVTDESC_TOG_3221
	picture = GFX_evt_viking_funeral_oldgods
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3221
		FROM = {
			death = {
				death_reason = death_murder_unknown_fall
				killer = ROOT
			}
		}
	}
}

# Child kills Courtier III (AI Child)
character_event = {
	id = TOG.3222
	hide_window = yes

	min_age = 4
	max_age = 16
	ai = yes
	has_character_flag = demon_child
	has_dlc = "The Old Gods"

	trigger = {
		NOT = { has_character_flag = child_kills_3 }
		father = { is_alive = yes }
		OR = {
			has_character_flag = child_strange_1
			has_character_flag = child_strange_2
			has_character_flag = child_strange_3
		}
		father = {
			any_courtier = {
				NOT = {
					character = ROOT
					is_close_relative = ROOT
				}
				host = {
					character = liege
					prisoner = no
				}
				ai = yes
				is_primary_heir = no
				is_pretender = no
				prisoner = no
				age = 13
				in_command = no
				NOT = { spouse = { character = host } }
			}
		}
	}

	mean_time_to_happen = {
		months = 320
	}

	immediate = {
		set_character_flag = child_kills_3
		father = {
			random_courtier = {
				limit = {
					NOT = {
						character = ROOT
						is_close_relative = ROOT
					}
					host = {
						character = liege
						prisoner = no
					}
					ai = yes
					is_primary_heir = no
					is_pretender = no
					prisoner = no
					age = 13
					in_command = no
					NOT = { spouse = { character = host } }
				}
				character_event = { id = TOG.3223 }
			}
		}
	}

	option = {
		name = OK
	}
}

# Child kills Courtier III (AI Courtier)
character_event = {
	id = TOG.3223
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		liege = { character_event = { id = TOG.3224 } }
	}

	option = {
		name = OK
	}
}

#Child kills Courtier III
character_event = {
	id = TOG.3224
	desc = EVTDESC_TOG_3224
	picture = GFX_evt_viking_funeral_oldgods
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3224
		FROM = {
			death = {
				death_reason = death_murder_unknown_drowning
				killer = ROOT
			}
		}
	}
}

# Vцlva Wants Exorcism (AI Child)
character_event = {
	id = TOG.3250
	hide_window = yes

	min_age = 4
	max_age = 16
	ai = yes
	has_dlc = "The Old Gods"

	trigger = {
		NOT = { has_character_flag = child_exorcism }
		father = { is_alive = yes }
		OR = {
			has_character_flag = demon_child
			has_character_flag = demon_child_fake
		}
		father = {
			any_courtier = {
				has_minor_title = title_volva
			}
		}
	}

	mean_time_to_happen = {
		months = 680
	}

	immediate = {
		set_character_flag = child_exorcism
		father = {
			random_courtier = {
				limit = { has_minor_title = title_volva }
				character_event = { id = TOG.3251 }
			}
		}
	}

	option = {
		name = OK
	}
}

# Vцlva Wants Exorcism (AI Vцlva)
character_event = {
	id = TOG.3251
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		liege = {
			character_event = { id = TOG.3252 }
		}
	}

	option = {
		name = OK
	}
}

# Vцlva Wants Exorcism
character_event = {
	id = TOG.3252
	desc = EVTDESC_TOG_3252
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3252
		hidden_tooltip = {
			character_event = { id = TOG.3253 days = 7 }
		}
		custom_tooltip = { text = exorcism_approved }
	}
	option = {
		name = EVTOPTB_TOG_3252
		FROM = {
			opinion = {
				modifier = opinion_very_disappointed
				years = 2
				who = ROOT
			}
		}
		custom_tooltip = { text = exorcism_denied }
	}
}

# Exorcism Begins
character_event = {
	id = TOG.3253
	desc = EVTDESC_TOG_3253
	picture = GFX_evt_pagan
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	hide_from = yes

	option = {
		name = EVTOPTA_TOG_3253
		hidden_tooltip = {
			random_child = {
				limit = { has_character_flag = child_exorcism }
				character_event = { id = TOG.3254 days = 3 }
			}
		}
		custom_tooltip = { text = exorcism_begins }
	}
}

# Exorcism Begins (AI Child)
character_event = {
	id = TOG.3254
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		father = {
			random_courtier = {
				limit = { has_minor_title = title_volva }
				character_event = { id = TOG.3255 }
			}
		}
	}

	option = {
		name = OK
	}
}

# Exorcism Begins (AI Vцlva)
character_event = {
	id = TOG.3255
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		liege = {
			random_list = {
				20 = { character_event = { id = TOG.3256 days = 3 } }
				20 = { character_event = { id = TOG.3257 days = 3 } }
				40 = { character_event = { id = TOG.3258 days = 3 } }
				20 = { character_event = { id = TOG.3259 days = 3 } }
			}
		}
	}

	option = {
		name = OK
	}
}

# Exorcism Completed - Vцlva Dies
character_event = {
	id = TOG.3256
	desc = EVTDESC_TOG_3256
	picture = GFX_evt_child_play
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3256
		FROM = {
			death = {
				death_reason = death_murder_unknown
			}
		}
		FROMFROM = { # Flags removed, no more events
			clr_character_flag = demon_child
			clr_character_flag = demon_child_fake
			clr_character_flag = child_exorcism
		}
	}
}

# Exorcism Completed - Child Dies
character_event = {
	id = TOG.3257
	desc = EVTDESC_TOG_3257
	picture = GFX_evt_viking_funeral_oldgods
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3257
		FROMFROM = {
			death = {
				death_reason = death_sacrificed
			}
		}
		FROM = {
			death = {
				death_reason = death_execution
				killer = ROOT
			}
		}
	}
	option = {
		name = EVTOPTB_TOG_3257
		FROMFROM = {
			death = {
				death_reason = death_sacrificed
			}
		}
		FROM = {
			banish = yes
		}
	}
	option = {
		name = EVTOPTC_TOG_3257
		FROMFROM = {
			death = {
				death_reason = death_sacrificed
			}
		}
	}
}

# Exorcism Completed - Child is Unharmed
character_event = {
	id = TOG.3258
	desc = EVTDESC_TOG_3258
	picture = GFX_evt_pagan
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3258
		FROMFROM = {
			clr_character_flag = demon_child
			clr_character_flag = demon_child_fake
			clr_character_flag = child_exorcism
			remove_character_modifier = voice_of_satan
			remove_character_modifier = voice_of_jesus
			remove_character_modifier = holy_comet
			remove_character_modifier = lycanthropy
			remove_trait = possessed
		}
	}
}

# Exorcism Completed - Child is Hurt
character_event = {
	id = TOG.3259
	desc = EVTDESC_TOG_3259
	picture = GFX_evt_pagan
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTB_TOG_3257
		FROMFROM = {
			clr_character_flag = demon_child
			clr_character_flag = demon_child_fake
			clr_character_flag = child_exorcism
			remove_character_modifier = voice_of_satan
			remove_character_modifier = voice_of_jesus
			remove_character_modifier = holy_comet
			remove_character_modifier = lycanthropy
			remove_trait = possessed
		}
		FROM = {
			banish = yes
		}
	}
	option = {
		name = EVTOPTC_TOG_3257
		FROMFROM = {
			clr_character_flag = demon_child
			clr_character_flag = demon_child_fake
			clr_character_flag = child_exorcism
			remove_character_modifier = voice_of_satan
			remove_character_modifier = voice_of_jesus
			remove_character_modifier = holy_comet
			remove_character_modifier = lycanthropy
			remove_trait = possessed
		}
	}
}

# Child Becomes Adult
character_event = {
	id = TOG.3260
	hide_window = yes

	has_character_flag = demon_child
	is_triggered_only = yes
	has_dlc = "The Old Gods"

	trigger = {
		FROM = { always = yes }
	}

	immediate = {
		clr_character_flag = demon_child
		clr_character_flag = demon_child_fake
		clr_character_flag = child_exorcism
	}

	option = {
		name = OK
	}
}

### Looting Events

# +2 Axe
character_event = {
	id = TOG.3300
	desc = EVTDESC_TOG_3300
	picture = GFX_evt_vikings_arriving_oldgods
	border = GFX_event_normal_frame_war

	ai = no
	has_dlc = "The Old Gods"
	is_triggered_only = yes

	trigger = {
		NOT = { has_artifact = loot_axe }
		FROM = { always = yes }
	}

	option = {
		name = EVTOPTA_TOG_3300
		add_artifact = loot_axe
	}
	option = {
		name = EVTOPTB_TOG_3300
		prestige = 10
	}
}

# Strange Chest
character_event = {
	id = TOG.3301
	desc = EVTDESC_TOG_3301
	picture = GFX_evt_vikings_arriving_oldgods
	border = GFX_event_normal_frame_economy

	ai = no
	has_dlc = "The Old Gods"
	is_triggered_only = yes

	trigger = {
		NOT = {
			has_artifact = strange_chest
			has_character_flag = found_chest
		}
		FROM = { always = yes }
	}

	option = {
		name = EVTOPTA_TOG_3301
		custom_tooltip = { text = found_chest }
		add_artifact = strange_chest
		set_character_flag = found_chest
	}
}

# Key Found
character_event = {
	id = TOG.3302
	desc = EVTDESC_TOG_3302
	picture = GFX_evt_vikings_arriving_oldgods
	border = GFX_event_normal_frame_economy

	ai = no
	has_dlc = "The Old Gods"
	is_triggered_only = yes
	has_character_flag = found_chest

	trigger = {
		has_artifact = strange_chest
		FROM = { always = yes }
	}

	option = {
		name = EVTOPTA_TOG_3302
		custom_tooltip = { text = opens_chest }
		hidden_tooltip = {
			random_list = {
				40 = { character_event = { id = TOG.3306 } }
				40 = { character_event = { id = TOG.3307 } }
				40 = { character_event = { id = TOG.3308 } }
				5 = { character_event = { id = TOG.3309 } }
			}
		}
	}
}

# Key Found by Child or relative
character_event = {
	id = TOG.3303
	desc = EVTDESC_TOG_3303
	picture = GFX_evt_vikings_arriving_oldgods
	border = GFX_event_normal_frame_economy

	ai = no
	has_dlc = "The Old Gods"
	is_triggered_only = yes

	trigger = {
		has_artifact = strange_chest
		NOT = {
			has_character_flag = found_chest
			any_dynasty_member = {
				has_character_flag = found_chest
			}
		}
		FROM = { always = yes }
	}

	option = {
		name = EVTOPTA_TOG_3303
		custom_tooltip = { text = opens_chest }
		hidden_tooltip = {
			random_list = {
				40 = { character_event = { id = TOG.3306 } }
				40 = { character_event = { id = TOG.3307 } }
				40 = { character_event = { id = TOG.3308 } }
				5 = {
					modifier = {
						factor = 0
						NOT = { magic_returned_trigger = yes }
					}
					character_event = { id = TOG.3309 }
				}
			}
		}
	}
}

# Chest Opened, Contains Gold
character_event = {
	id = TOG.3306
	desc = EVTDESC_TOG_3306
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_economy

	hide_from = yes

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3306
		wealth = 200
		destroy_artifact = strange_chest
	}
}

# Chest Opened, Contains Parchments
character_event = {
	id = TOG.3307
	desc = EVTDESC_TOG_3307
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_economy

	hide_from = yes

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3307
		custom_tooltip = { text = chest_empty }
		destroy_artifact = strange_chest
	}
}

# Chest Opened, Contains Junk
character_event = {
	id = TOG.3308
	desc = EVTDESC_TOG_3308
	picture = GFX_evt_viking_throneroom_oldgods
	border = GFX_event_normal_frame_economy

	hide_from = yes

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3308
		wealth = 10
		destroy_artifact = strange_chest
	}
}

# Chest Opened, Contains Seraphim
character_event = {
	id = TOG.3309
	desc = EVTDESC_TOG_3309
	picture = GFX_evt_shadowy_cabal
	border = GFX_event_normal_frame_economy

	hide_from = yes

	is_triggered_only = yes

	option = {
		name = EVTOPTA_TOG_3309
		custom_tooltip = { text = seraphims }
		destroy_artifact = strange_chest
	}
}

# Viking Trait Gained
character_event = {
	id = TGF.3320
	desc = {
		trigger = {
			OR = {
				is_drowned_god_religion_trigger = yes
				any_owned_bloodline = {
					has_bloodline_flag = bloodline_viking
				}
			}
		}
		text = EVTDESC_TOG_3320
	}
	desc = {
		trigger = {
			NOR = {
				is_drowned_god_religion_trigger = yes
				any_owned_bloodline = {
					has_bloodline_flag = bloodline_viking
				}
			}
		}
		text = EVTDESC_TOG_3320_HF
	}
	picture = {
		trigger = { is_female = no }
		picture = GFX_evt_vikings_arriving_oldgods
	}
	picture = {
		trigger = { is_female = yes }
		picture = GFX_evt_norse_tempest
	}
	border = GFX_event_normal_frame_war

	hide_from = yes

	is_triggered_only = yes
	#only_men = yes
	only_capable = yes
	prisoner = no

	min_age = 14

	trigger = {
		OR = {
			AND = {
				has_dlc = "The Old Gods"
				OR = {
					religion = drowned_god
					AND = {
						religion = drowned_god_reformed
						NOT = { has_dlc = "Holy Fury" }
					}
				}
			}
			any_owned_bloodline = {
				has_bloodline_flag = bloodline_viking
			}
			AND = {
				has_religion_feature = religion_adventuring
				has_religion_feature = religion_seafaring
			}
			has_religion_feature = religion_feature_norse
		}
		NOR = {
			trait = viking
			trait = ravager
			trait = seaking
			trait = sea_queen
		}
		FROM = { always = yes }
		NOT = { has_severe_disability_trigger = yes }
	}

	option = {
		name = EVTOPTA_TOG_3320
		add_trait = viking
		hidden_tooltip = {
			set_variable = { which = viking_raids value = 0 }
		}
	}
}
#Ravager
character_event = {
	id = TGF.3321
	desc = {
		trigger = {
			OR = {
				is_drowned_god_religion_trigger = yes
				any_owned_bloodline = {
					has_bloodline_flag = bloodline_viking
				}
			}
		}
		text = TOG.3321.d
	}
	desc = {
		trigger = {
			NOR = {
				is_drowned_god_religion_trigger = yes
				any_owned_bloodline = {
					has_bloodline_flag = bloodline_viking
				}
			}
		}
		text = EVTDESC_TOG_3321_HF
	}
	picture = {
		trigger = { is_female = no }
		picture = GFX_evt_vikings_arriving_oldgods
	}
	picture = {
		trigger = { is_female = yes }
		picture = GFX_evt_norse_tempest
	}
	border = GFX_event_normal_frame_war

	hide_from = yes

	is_triggered_only = yes
	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		OR = {
			AND = {
				has_dlc = "The Old Gods"
				OR = {
					religion = drowned_god
					AND = {
						religion = drowned_god_reformed
						NOT = { has_dlc = "Holy Fury" }
					}
				}
			}
			any_owned_bloodline = {
				has_bloodline_flag = bloodline_viking
			}
			AND = {
				has_religion_feature = religion_adventuring
				has_religion_feature = religion_seafaring
			}
			has_religion_feature = religion_feature_norse
		}
		trait = viking
		NOR = {
			trait = ravager
			trait = seaking
			trait = sea_queen
		}
		FROM = { always = yes }
		check_variable = { which = viking_raids value = 50 }
		NOT = { has_severe_disability_trigger = yes }
	}

	immediate = {
		if = {
			limit = { has_nickname = no }
			random_list = {
				1 = { set_character_flag = nick_ironreaver }
				1 = { set_character_flag = nick_the_red_reaver }
				1 = { set_character_flag = nick_the_black_reaver }
				1 = { set_character_flag = nick_ironfist }
				1 = { set_character_flag = nick_ironsword }
				1 = { set_character_flag = nick_ironshield }
				1 = { set_character_flag = nick_the_raider }
				1 = { set_character_flag = nick_ironraider }
				1 = { set_character_flag = nick_ironheart }
				1 = { set_character_flag = nick_butcher }
				1 = { set_character_flag = nick_ironhand }
				1 = { set_character_flag = nick_hardhand }
				1 = { set_character_flag = nick_the_strong }
				1 = { set_character_flag = nick_the_bold }
				1 = { set_character_flag = nick_the_warrior }
				1 = { set_character_flag = nick_the_iron_storm }
				30 = {  }
			}
		}
	}

	option = {
		name = TOG.3321.a
		remove_trait = viking
		add_trait = ravager
		if = {
			limit = { has_character_flag = nick_ironreaver }
			give_nickname = nick_ironreaver
			clr_character_flag = nick_ironreaver
		}
		if = {
			limit = { has_character_flag = nick_the_red_reaver }
			give_nickname = nick_the_red_reaver
			clr_character_flag = nick_the_red_reaver
		}
		if = {
			limit = { has_character_flag = nick_the_black_reaver }
			give_nickname = nick_the_black_reaver
			clr_character_flag = nick_the_black_reaver
		}
		if = {
			limit = { has_character_flag = nick_ironfist }
			give_nickname = nick_ironfist
			clr_character_flag = nick_ironfist
		}
		if = {
			limit = { has_character_flag = nick_ironsword }
			give_nickname = nick_ironsword
			clr_character_flag = nick_ironsword
		}
		if = {
			limit = { has_character_flag = nick_ironshield }
			give_nickname = nick_ironshield
			clr_character_flag = nick_ironshield
		}
		if = {
			limit = { has_character_flag = nick_the_raider }
			give_nickname = nick_the_raider
			clr_character_flag = nick_the_raider
		}
		if = {
			limit = { has_character_flag = nick_ironraider }
			give_nickname = nick_ironraider
			clr_character_flag = nick_ironraider
		}
		if = {
			limit = { has_character_flag = nick_ironheart }
			give_nickname = nick_ironheart
			clr_character_flag = nick_ironheart
		}
		if = {
			limit = { has_character_flag = nick_butcher }
			give_nickname = nick_butcher
			clr_character_flag = nick_butcher
		}
		if = {
			limit = { has_character_flag = nick_ironhand }
			give_nickname = nick_ironhand
			clr_character_flag = nick_ironhand
		}
		if = {
			limit = { has_character_flag = nick_hardhand }
			give_nickname = nick_hardhand
			clr_character_flag = nick_hardhand
		}
		if = {
			limit = { has_character_flag = nick_the_strong }
			give_nickname = nick_the_strong
			clr_character_flag = nick_the_strong
		}
		if = {
			limit = { has_character_flag = nick_the_bold }
			give_nickname = nick_the_bold
			clr_character_flag = nick_the_bold
		}
		if = {
			limit = { has_character_flag = nick_the_warrior }
			give_nickname = nick_the_warrior
			clr_character_flag = nick_the_warrior
		}
		if = {
			limit = { has_character_flag = nick_the_iron_storm }
			give_nickname = nick_the_iron_storm
			clr_character_flag = nick_the_iron_storm
		}
	}
}

#Sea King
character_event = {
	id = TGF.3322
	desc = TOG.3322.d
	picture = {
		trigger = { is_female = no }
		picture = GFX_evt_vikings_arriving_oldgods
	}
	picture = {
		trigger = { is_female = yes }
		picture = GFX_evt_norse_tempest
	}
	border = GFX_event_normal_frame_war

	hide_from = yes

	is_triggered_only = yes
	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		OR = {
			AND = {
				has_dlc = "The Old Gods"
				OR = {
					religion = drowned_god
					AND = {
						religion = drowned_god_reformed
						NOT = { has_dlc = "Holy Fury" }
					}
				}
			}
			any_owned_bloodline = {
				has_bloodline_flag = bloodline_viking
			}
			AND = {
				has_religion_feature = religion_adventuring
				has_religion_feature = religion_seafaring
			}
			has_religion_feature = religion_feature_norse
		}
		trait = ravager
		NOR = {
			trait = seaking
			trait = sea_queen
		}
		FROM = { always = yes }
		check_variable = { which = viking_raids value = 100 }
		NOT = { has_severe_disability_trigger = yes }
	}

	option = {
		name = TOG.3322.a
		remove_trait = ravager
		if = {
			limit = {
				is_female = no
			}
			add_trait = seaking
		}
		if = {
			limit = {
				is_female = yes
			}
			add_trait = sea_queen
		}
	}
}

character_event = {
	id = TGF.3323

	hide_window = yes

	is_triggered_only = yes

	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		OR = {
			AND = {
				has_dlc = "The Old Gods"
				OR = {
					religion = drowned_god
					AND = {
						religion = drowned_god_reformed
						NOT = { has_dlc = "Holy Fury" }
					}
				}
			}
			any_owned_bloodline = {
				has_bloodline_flag = bloodline_viking
			}
			AND = {
				has_religion_feature = religion_adventuring
				has_religion_feature = religion_seafaring
			}
			has_religion_feature = religion_feature_norse
		}
		OR = {
			trait = viking
			trait = ravager
			trait = seaking #Top trait, but there's still chance of gaining a Bloodline if variable goes high enough.
			trait = sea_queen
		}
		FROM = { always = yes }
	}

	immediate = {
		change_variable = { which = viking_raids value = 1 }
	}

	option = {
		name = OK
	}
}
###End contest winner events###

character_event = {
	id = TOG.3404
	desc = TOG.3404.d
	picture = GFX_evt_vikings_arriving_oldgods
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	trigger = {
		NOT = {
			capital_scope = {
				has_province_modifier = loot_prosperity_boost
			}
		}
	}

	immediate = {

	}

	option = {
		name = EXCELLENT
		capital_scope = {
			add_province_modifier = {
				name = loot_prosperity_boost
				duration = 365
			}
			hidden_tooltip = {
				change_variable = { which = prosperity_value value = 6 }
			}
		}
	}
}

