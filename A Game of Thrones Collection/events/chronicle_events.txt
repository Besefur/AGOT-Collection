###########################################
#                                         #
# Special Chronicle Events                #
#                                         #
# ID CM.10000-CM.11999                    #
#                                         #
###########################################

namespace = CM

# When chronicle is begun (On Action on_chronicle_start)
character_event = {
	id = CM.10000

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOT = { multiplayer = yes }
	}

	immediate = {
		e_rebels = {
			clear_persistent_event_target = chronicle_player
			save_persistent_event_target = { name = chronicle_player scope = ROOT }
		}
		if = {
			limit = {
				primary_title = { title = d_nightswatch }
			}
			chronicle = {
				entry = CHRONICLE_START_NIGHTSWATCH
				picture = GFX_evt_the_wall
				portrait = [Root.GetID]
			}
			break = yes
		}
		if = {
			limit = {
				trait = kingsguard
			}
			chronicle = {
				entry = CHRONICLE_START_KINGSGUARD
				picture = GFX_kingsguard
				portrait = [Root.GetID]
			}
			break = yes
		}
		if = {
			limit = { culture = dothraki }
			chronicle = {
				entry = CHRONICLE_START_DOTHRAKI
				picture = GFX_evt_dothraki
				portrait = [Root.GetID]
			}
			break = yes
		}
		if = {
			limit = { culture = jogos_nhai }
			chronicle = {
				entry = CHRONICLE_START_JOGOS_NHAI
				picture = GFX_evt_jogos_nhai
				portrait = [Root.GetID]
			}
			break = yes
		}
		chronicle = {
			entry = CHRONICLE_START
			picture = GFX_evt_monk
			portrait = [Root.GetID]
		}
	}

	option = {
		name = OK
	}
}

# When chronicle is transferred to new character (On Action on_chronicle_owner_change)
character_event = {
	id = CM.10001

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		NOT = { multiplayer = yes }
	}

	immediate = {
		e_rebels = {
			clear_persistent_event_target = chronicle_player
			save_persistent_event_target = { name = chronicle_player scope = ROOT }
		}

		if = {
			limit = { NOT = { trait = nightswatch } } #handled in nightswatch_events
			if = {
				limit = {
					FROM = {
						is_dying = no
					}
				}
				chronicle = {
					entry = CHRONICLE_PLAYER_INHERITANCE_LANDLESS
					portrait = [Root.GetID]
					picture = GFX_evt_emissary
				}
			}
			if = {
				limit = {
					FROM = {
						is_dying = yes
						culture_group = ROOT
						religion = ROOT
					}
				}
				chronicle = {
					entry = CHRONICLE_PLAYER_INHERITANCE_NORMAL
					portrait = [Root.GetID]
					picture = GFX_evt_coronation
				}
			}
			if = {
				limit = {
					FROM = {
						is_dying = yes
						culture_group = ROOT
						NOT = { religion = ROOT }
					}
				}
				chronicle = {
					entry = CHRONICLE_PLAYER_INHERITANCE_NEW_RELIGION
					portrait = [Root.GetID]
					picture = GFX_evt_coronation
				}
			}
			if = {
				limit = {
					FROM = {
						is_dying = yes
						NOT = { culture_group = ROOT }
						religion = ROOT
					}
				}
				chronicle = {
					entry = CHRONICLE_PLAYER_INHERITANCE_NEW_CULTURE
					portrait = [Root.GetID]
					picture = GFX_evt_coronation
				}
			}
			if = {
				limit = {
					FROM = {
						is_dying = yes
						NOT = { culture_group = ROOT }
						NOT = { religion = ROOT }
					}
				}
				chronicle = {
					entry = CHRONICLE_PLAYER_INHERITANCE_NEW_CULTURE_AND_RELIGION
					portrait = [Root.GetID]
					picture = GFX_evt_coronation
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Make sure global event target is present when save is loaded, also checked yearly
character_event = {
	id = CM.10002

	is_triggered_only = yes
	ai = no
	hide_window = yes
	has_dlc = "Charlemagne"

	trigger = {
		NOT = { multiplayer = yes }
		is_save_game = yes
	}

	immediate = {
		e_rebels = {
			clear_persistent_event_target = chronicle_player
			save_persistent_event_target = { name = chronicle_player scope = ROOT }
		}
	}

	option = {
		name = OK
	}
}

#############################
# Various chronicle events  #
#############################

# From on action on_death - check who died and create appropriate chronicle entries
character_event = {
	id = CM.10010

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			e_rebels = {
				persistent_event_target:chronicle_player = {
					OR = {
						is_married = ROOT
						is_child_of = ROOT
						is_parent_of = ROOT
						current_heir = { character = ROOT }
						liege = { character = ROOT }
						top_liege = { character = ROOT }
						AND = {
							ROOT = { controls_religion = yes }
							religion = ROOT
						}
						AND = {
							ROOT = { higher_tier_than = COUNT }
							dynasty = ROOT
						}
					}
				}
			}
			trait = dragon
			trait = kingsguard
			AND = { #mega war liege
				tier = EMPEROR
				any_demesne_title = {
					tier = EMPEROR
					check_variable = { which = "de_facto_empire" value = 1 }
					e_rebels = {
						persistent_event_target:chronicle_player = {
							primary_title = {
								is_variable_equal = { which = "de_facto_empire" which = PREVPREVPREV }
							}
						}
					}
				}
			}
		}
		NOT = { e_rebels = { persistent_event_target:chronicle_player = { character = ROOT } } }
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = {
						is_child_of = ROOT
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_PARENT
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						current_heir = { character = ROOT }
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_HEIR
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						is_parent_of = ROOT
					}
					if = {
						limit = { ROOT = { NOT = { trait = bastard } } }
						chronicle = {
							entry = CHRONICLE_DEATH_OF_CHILD
							portrait = [Root.GetID]
						}
					}
					if = {
						limit = { ROOT = { trait = bastard } }
						chronicle = {
							entry = CHRONICLE_DEATH_OF_CHILD_BASTARD
							portrait = [Root.GetID]
						}
					}
					break = yes
				}
				if = {
					limit = {
						is_married = ROOT
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_SPOUSE
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						top_liege = { character = ROOT }
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_TOP_LIEGE
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = { #mega war liege
						primary_title = {
							ROOT = {
								tier = EMPEROR
								any_demesne_title = {
									tier = EMPEROR
									is_variable_equal = { which = "de_facto_empire" which = PREVPREV }
								}
							}
						}
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_TOP_LIEGE
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						liege = { character = ROOT }
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_LIEGE
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						ROOT = { higher_tier_than = COUNT }
						dynasty = ROOT
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_DYNAST
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						ROOT = { controls_religion = yes }
						religion = ROOT
					}
					if = {
						limit = { religion = the_seven }
						chronicle = {
							entry = CHRONICLE_DEATH_OF_HIGH_SEPTON
							portrait = [Root.GetID]
						}
					}
					if = {
						limit = { NOT = { religion = the_seven } }
						chronicle = {
							entry = CHRONICLE_DEATH_OF_RELIGION_HEAD
							portrait = [Root.GetID]
						}
					}
					break = yes
				}
				if = {
					limit = {
						ROOT = { trait = dragon }
					}
					if = {
						limit = {
							NOT = {
								dragon = {
									is_alive = yes
									NOT = { character = ROOT }
								}
							}
						}
						chronicle = {
							entry = CHRONICLE_DEATH_OF_DRAGON_LAST
							portrait = [Root.GetID]
						}
						break = yes
					}
					if = {
						limit = { any_friend = { character = ROOT } }
						chronicle = {
							entry = CHRONICLE_DEATH_OF_DRAGON
							portrait = [Root.GetID]
						}
						break = yes
					}
					if = {
						limit = {
							OR = {
								martial = 80
								age = 100
							}
						}
						chronicle = {
							entry = CHRONICLE_DEATH_OF_DRAGON_GREAT
							portrait = [Root.GetID]
						}
						break = yes
					}
				}
				if = {
					limit = {
						ROOT = { trait = kingsguard }
						has_landed_title = d_kingsguard
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_KINGSGUARD
						portrait = [Root.GetID]
					}
				}
				if = {
					limit = {
						ROOT = {
							trait = kingsguard
							has_landed_title = d_kingsguard
						}
						has_landed_title = e_iron_throne
					}
					chronicle = {
						entry = CHRONICLE_DEATH_OF_KINGSGUARD
						portrait = [Root.GetID]
					}
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# From on action on_birth - check who was born and create appropriate chronicle entries
# character_event = {
	# id = CM.10011 #MERGED WITH BIRTH.990

	# hide_window = yes

	# is_triggered_only = yes

	# option = {
		# name = OK
	# }
# }

character_event = {
	id = CM.19011

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				is_parent_of = ROOT
			}
		}
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = { is_female = no }
					if = {
						limit = { ROOT = { trait = bastard } }
						if = {
							limit = { mother_even_if_dead = { always = yes } }
							chronicle = {
								entry = CHRONICLE_BIRTH_FATHER_BASTARD
								portrait = [Root.GetID]
							}
							break = yes
						}
						if = {
							limit = { NOT = { mother_even_if_dead = { always = yes } } }
							chronicle = {
								entry = CHRONICLE_BIRTH_FATHER_BASTARD_UNKNOWN
								portrait = [Root.GetID]
							}
							break = yes
						}
					}
					if = {
						limit = { ROOT = { trait = child_of_consort } }
						chronicle = {
							entry = CHRONICLE_BIRTH_FATHER_CONSORT
							portrait = [Root.GetID]
						}
						break = yes
					}
					if = {
						limit = { mother_even_if_dead = { always = yes } }
						chronicle = {
							entry = CHRONICLE_BIRTH_FATHER
							portrait = [Root.GetID]
						}
						break = yes
					}
					if = {
						limit = { NOT = { mother_even_if_dead = { always = yes } } }
						chronicle = {
							entry = CHRONICLE_BIRTH_FATHER_UNKNOWN
							portrait = [Root.GetID]
						}
						break = yes
					}
				}
				if = {
					limit = { is_female = yes }
					if = {
						limit = { ROOT = { trait = bastard } }
						if = {
							limit = { father_even_if_dead = { always = yes } }
							chronicle = {
								entry = CHRONICLE_BIRTH_MOTHER_BASTARD
								portrait = [Root.GetID]
							}
							break = yes
						}
						if = {
							limit = { NOT = { father_even_if_dead = { always = yes } } }
							chronicle = {
								entry = CHRONICLE_BIRTH_MOTHER_BASTARD_UNKNOWN
								portrait = [Root.GetID]
							}
							break = yes
						}
					}
					if = {
						limit = { ROOT = { trait = child_of_consort } }
						chronicle = {
							entry = CHRONICLE_BIRTH_MOTHER_CONSORT
							portrait = [Root.GetID]
						}
						break = yes
					}
					if = {
						limit = { father_even_if_dead = { always = yes } }
						chronicle = {
							entry = CHRONICLE_BIRTH_MOTHER
							portrait = [Root.GetID]
						}
						break = yes
					}
					if = {
						limit = { NOT = { father_even_if_dead = { always = yes } } }
						chronicle = {
							entry = CHRONICLE_BIRTH_MOTHER_UNKNOWN
							portrait = [Root.GetID]
						}
						break = yes
					}
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# War  #move to CB entries

# Joined ally in war
character_event = {
	id = CM.10013

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_JOINED_ALLY_IN_WAR
			portrait = [From.GetID]
		}
	}

	option = {
		name = OK
	}
}

# Answered call to arms
character_event = {
	id = CM.10014

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = { persistent_event_target:chronicle_player = { character = FROM } }
	}

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_JOINED_ALLY_IN_WAR_2
				portrait = [Prev.GetID]
			}
		}
	}

	option = {
		name = OK
	}
}

# # On crusade creation

# # On crusade success

# # On crusade failure

# Aztec first contact
character_event = {
	id = CM.10018

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				chronicle = {
					entry = CHRONICLE_AZTECS_FIRST_CONTACT
					portrait = [Root.GetID]
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Aztec Invasion
#move to event file

# Creates new higher level title
	# On create title - ROOT is the creating character, FROM is the title
character_event = {
	id = CM.10021

	hide_window = yes

	is_triggered_only = yes
	ai = no

	trigger = {
		FROM = { NOT = { lower_tier_than = ROOT } }
	}

	immediate = {
		chronicle = {
			entry = CHRONICLE_CREATED_TITLE
			portrait = [Root.GetID]
		}
	}

	option = {
		name = OK
	}
}

# Usurps new higher level title
	# On usurp title ROOT is the character, FROM is the title, FROMFROM is the old holder
character_event = {
	id = CM.10022

	hide_window = yes

	is_triggered_only = yes
	ai = no

	trigger = {
		FROM = { NOT = { lower_tier_than = ROOT } }
	}

	immediate = {
		chronicle = {
			entry = CHRONICLE_USURPED_TITLE
			portrait = [Root.GetID]
		}
	}

	option = {
		name = OK
	}
}

# Marriage
character_event = {
	id = CM.10023

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				OR = {
					character = FROM
					is_child_of = FROM
					is_parent_of = FROM
					current_heir = { character = FROM }
					liege = { character = FROM }
					top_liege = { character = FROM }
					top_liege = { current_heir = { character = FROM } }
				}
			}
		}
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = { character = FROM }
					if = {
						limit = {
							new_character = {
								father_even_if_dead = {
									OR = {
										is_ruler = yes
										is_primary_heir = yes
									}
									NOT = { new_character = { mother_even_if_dead = { higher_tier_than = PREVPREV } } }
								}
							}
						}
						chronicle = {
							entry = CHRONICLE_MARRIED_FATHER_IMPORTANT
							portrait = [New.GetID]
						}
						break = yes
					}
					if = {
						limit = {
							new_character = {
								mother_even_if_dead = {
									OR = {
										is_ruler = yes
										is_primary_heir = yes
									}
								}
							}
						}
						chronicle = {
							entry = CHRONICLE_MARRIED_MOTHER_IMPORTANT
							portrait = [New.GetID]
						}
						break = yes
					}
					chronicle = {
						entry = CHRONICLE_MARRIED_NO_PARENT
						portrait = [New.GetID]
					}
					break = yes
				}
				if = {
					limit = { is_child_of = FROM }
					chronicle = {
						entry = CHRONICLE_MARRIED_PARENT
						portrait = [From.GetID]
					}
					break = yes
				}
				if = {
					limit = { current_heir = { character = FROM } }
					chronicle = {
						entry = CHRONICLE_MARRIED_HEIR
						portrait = [From.GetID]
					}
					break = yes
				}
				if = {
					limit = { is_parent_of = FROM }
					chronicle = {
						entry = CHRONICLE_MARRIED_CHILD
						portrait = [From.GetID]
					}
					break = yes
				}
				if = {
					limit = { top_liege = { character = FROM } }
					chronicle = {
						entry = CHRONICLE_MARRIED_TOP_LIEGE
						portrait = [From.GetID]
					}
					break = yes
				}
				if = {
					limit = { top_liege = { current_heir = { character = FROM } } }
					chronicle = {
						entry = CHRONICLE_MARRIED_TOP_LIEGE_HEIR
						portrait = [From.GetID]
					}
					break = yes
				}
				if = {
					limit = { liege = { character = FROM } }
					chronicle = {
						entry = CHRONICLE_MARRIED_LIEGE
						portrait = [From.GetID]
					}
					break = yes
				}
			}
		}
	}

	option = {
		name = OK
	}
}


# From on action on_became_imprisoned - check who was imprisoned and create appropriate chronicle entries
character_event = {
	id = CM.10024

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				OR = {
					character = ROOT
					is_married = ROOT
					is_child_of = ROOT
					is_parent_of = ROOT
					current_heir = { character = ROOT }
					liege = { character = ROOT }
					top_liege = { character = ROOT }
					AND = {
						ROOT = { controls_religion = yes }
						religion = ROOT
					}
				}
			}
		}
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = { character = ROOT }
					chronicle = {
						entry = CHRONICLE_PLAYER_IMPRISONED
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = { is_married = ROOT }
					chronicle = {
						entry = CHRONICLE_SPOUSE_IMPRISONED
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = { is_child_of = ROOT }
					chronicle = {
						entry = CHRONICLE_PARENT_IMPRISONED
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = { current_heir = { character = ROOT } }
					chronicle = {
						entry = CHRONICLE_HEIR_IMPRISONED
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = { is_parent_of = ROOT }
					chronicle = {
						entry = CHRONICLE_CHILD_IMPRISONED
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						AND = {
							ROOT = { controls_religion = yes }
							religion = ROOT
						}
					}
					chronicle = {
						entry = CHRONICLE_RELIGION_HEAD_IMPRISONED
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = { top_liege = { character = ROOT } }
					chronicle = {
						entry = CHRONICLE_TOP_LIEGE_IMPRISONED
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = { liege = { character = ROOT } }
					chronicle = {
						entry = CHRONICLE_LIEGE_IMPRISONED
						portrait = [Root.GetID]
					}
					break = yes
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# From on action on_released_from_prison - check who was released and create appropriate chronicle entries


# When a character converts to a new religion - On action: on_character_convert_religion
character_event = {
	id = CM.10026

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				OR = {
					character = ROOT
					any_vassal = { character = ROOT }
					liege = { character = ROOT }
					top_liege = { character = ROOT }
					current_heir = { character = ROOT }
				}
			}
		}
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = { character = ROOT }
					chronicle = {
						entry = CHRONICLE_PLAYER_CONVERTED_RELIGION
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						current_heir = { character = ROOT }
					}
					chronicle = {
						entry = CHRONICLE_HEIR_CONVERTED_RELIGION
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						top_liege = { character = ROOT }
					}
					chronicle = {
						entry = CHRONICLE_TOP_LIEGE_CONVERTED_RELIGION
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						liege = { character = ROOT }
					}
					chronicle = {
						entry = CHRONICLE_LIEGE_CONVERTED_RELIGION
						portrait = [Root.GetID]
					}
					break = yes
				}
				if = {
					limit = {
						any_vassal = {
							character = ROOT
							OR = {
								AND = {
									liege = { tier = KING }
									tier = DUKE
								}
								AND = {
									liege = { tier = EMPEROR }
									tier = KING
								}
							}
						}
					}
					chronicle = {
						entry = CHRONICLE_MAJOR_VASSAL_CONVERTED_RELIGION
						portrait = [Root.GetID]
					}
					break = yes
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# When a character converts to a new culture - On action: on_character_convert_culture
character_event = {
	id = CM.10027

	hide_window = yes

	is_triggered_only = yes

	ai = no

	trigger = { NOT = { culture_group = FROM } }

	immediate = {
		chronicle = {
			entry = CHRONICLE_PLAYER_CONVERTED_CULTURE
			portrait = [Root.GetID]
		}
	}

	option = {
		name = OK
	}
}

# When a character acquires a nickname - On action: on_acquire_nickname
character_event = {
	id = CM.10028

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_PLAYER_ACQUIRED_NICKNAME
			portrait = [Root.GetID]
		}
	}

	option = {
		name = OK
	}
}

# Won battle - On action: on_battle_won
character_event = {
	id = CM.10029

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_WON_BATTLE_FOUGHT
			portrait = [Root.GetID]
		}
	}

	option = {
		name = OK
	}
}

# Lost battle - On action: on_battle_lost
character_event = {
	id = CM.10030

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_LOST_BATTLE_FOUGHT
			portrait = [Root.GetID]
		}
	}

	option = {
		name = OK
	}
}

# Won battle but didn't participate myself
character_event = {
	id = CM.10031

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				NOT = { at_location = ROOT }
				war_with = FROM
				is_vassal_or_below = ROOT
			}
		}
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				chronicle = {
					entry = CHRONICLE_WON_BATTLE_BUT_DIDNT_FIGHT
					portrait = [Root.GetID] # The commander
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Lost battle but didn't participate myself
character_event = {
	id = CM.10032

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				NOT = { at_location = ROOT }
				war_with = FROM
				is_vassal_or_below = ROOT
			}
		}
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				chronicle = {
					entry = CHRONICLE_LOST_BATTLE_BUT_DIDNT_FIGHT
					portrait = [Root.GetID] # The commander
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Personally captured major settlement
character_event = {
	id = CM.10033

	hide_window = yes

	is_triggered_only = yes
	ai = no

	trigger = {
		FROM = {
			holder_scope = { NOT = { same_realm = ROOT } }
			OR = {
				title = b_kl_dragon_gate
				title = b_oldtown
				title = b_highgarden
				title = b_speartower
				title = b_storms_end
				title = b_casterly_rock
				title = b_harrenhal
				title = b_the_eyrie
				title = b_riverrun
				title = b_winterfell
				title = b_braavos
				title = b_pentos
				title = b_oldvolantis
				title = b_lorath
				title = b_norvos
				title = b_qohor
				title = b_myr
				title = b_lys
				title = b_tyrosh
				title = b_meereen
				title = b_yunkai
				title = b_newghis
				title = b_hall_thrones #qarth
				title = b_yin
				title = b_asshai
				AND = {
					location = { is_capital = yes }
					holder_scope = {
						any_current_enemy = {
							character = ROOT
							NOT = { higher_tier_than = PREV }
						}
					}
				}
			}
		}
	}

	immediate = {
		chronicle = {
			entry = CHRONICLE_CAPTURED_MAJOR_SETTLEMENT_MYSELF
			picture = GFX_evt_victory_arch_byzantine
		}
	}

	option = {
		name = OK
	}
}

# My forces captured major settlement
character_event = {
	id = CM.10034

	hide_window = yes

	is_triggered_only = yes

	ai = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				NOT = { at_location = ROOT }
				is_vassal_or_below = ROOT
			}
		}
		FROM = {
			OR = {
				title = b_kl_dragon_gate
				title = b_oldtown
				title = b_highgarden
				title = b_speartower
				title = b_storms_end
				title = b_casterly_rock
				title = b_harrenhal
				title = b_the_eyrie
				title = b_riverrun
				title = b_winterfell
				title = b_braavos
				title = b_pentos
				title = b_oldvolantis
				title = b_lorath
				title = b_norvos
				title = b_qohor
				title = b_myr
				title = b_lys
				title = b_tyrosh
				title = b_meereen
				title = b_yunkai
				title = b_newghis
				title = b_hall_thrones #qarth
				title = b_yin
				title = b_asshai
				AND = {
					location = { is_capital = yes }
					holder_scope = {
						any_current_enemy = {
							e_rebels = { persistent_event_target:chronicle_player = { character = PREVPREV } }
							NOT = { higher_tier_than = PREV }
						}
					}
				}
			}
		}
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				chronicle = {
					entry = CHRONICLE_MY_FORCES_CAPTURED_MAJOR_SETTLEMENT
					portrait = [Root.GetID] # The commander
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Enemy forces captured major settlement
character_event = {
	id = CM.10035

	hide_window = yes

	is_triggered_only = yes

	ai = yes

	trigger = {
		FROM = {
			holder_scope = {
				e_rebels = {
					persistent_event_target:chronicle_player = {
						OR = {
							character = PREVPREV
							is_vassal_or_below = PREVPREV
						}
					}
				}
			}
			OR = {
				title = b_kl_dragon_gate
				title = b_oldtown
				title = b_highgarden
				title = b_speartower
				title = b_storms_end
				title = b_casterly_rock
				title = b_harrenhal
				title = b_the_eyrie
				title = b_riverrun
				title = b_winterfell
				title = b_braavos
				title = b_pentos
				title = b_oldvolantis
				title = b_lorath
				title = b_norvos
				title = b_qohor
				title = b_myr
				title = b_lys
				title = b_tyrosh
				title = b_meereen
				title = b_yunkai
				title = b_newghis
				title = b_hall_thrones #qarth
				title = b_yin
				title = b_asshai
				AND = {
					location = { is_capital = yes }
					holder_scope = {
						e_rebels = { persistent_event_target:chronicle_player = { character = PREVPREV } }
					}
				}
			}
		}
	}

	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				chronicle = {
					entry = CHRONICLE_ENEMY_FORCES_CAPTURED_MAJOR_SETTLEMENT
					portrait = [Root.GetID] # The owner of the enemy forces
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Marriage of primary heir  - ROOT is employer. FROM is employers "employee". new_character is the other spouse.

# Divorce
character_event = {
	id = CM.10037

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			ai = no
			FROM = {
				ai = no
			}
		}
	}

	immediate = {
		# Chronicle entries with a religious head
		if = {
			limit = {
				new_character = {
					always = yes
				}
			}
			if = {
				limit = {
					ai = no
				}
				chronicle = {
					entry = CHRONICLE_DIVORCED
					portrait = [From.GetID]
				}
			}
			FROM = {
				if = {
					limit = {
						ai = no
					}
					chronicle = {
						entry = CHRONICLE_DIVORCED
						portrait = [From.GetID]
					}
				}
			}
			break = yes
		}
		 # Chronicle entries without a religious head
		if = {
			limit = {
				ai = no
			}
			chronicle = {
				entry = CHRONICLE_DIVORCED_NO_HEAD
				portrait = [From.GetID]
			}
		}
		FROM = {
			if = {
				limit = {
					ai = no
				}
				chronicle = {
					entry = CHRONICLE_DIVORCED_NO_HEAD
					portrait = [From.GetID]
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Peace, attacker won ###war entries to improve somehow, add CB, title, + maybe liege/top liege wars
character_event = {
	id = CM.10038

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				OR = {
					character = ROOT
					character = FROM
				}
			}
		}
	}
	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = {
						character = FROM #Winner
					}
					chronicle = {
						entry = CHRONICLE_WAR_WON
						portrait = [Prev.GetID]
					}
				}
				if = {
					limit = {
						character = ROOT #Loser
					}
					FROM = {
						ROOT = {
							chronicle = {
								entry = CHRONICLE_WAR_LOST
								portrait = [Prev.GetID]
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Inherit major title   - # ROOT is the character, FROM is the title, FROMFROM is the old holder
character_event = {
	id = CM.10039

	hide_window = yes

	is_triggered_only = yes
	ai = no

	trigger = {
		NOT = {
			FROM = {
				dejure_liege_title = {
					holder = ROOT
					any_previous_holder = { character = FROMFROM }
				}
			}
		}
	}

	immediate = {
		chronicle = {
			entry = CHRONICLE_INHERIT_MAJOR_TITLE
			#picture = GFX_evt_throne_room
			portrait = [FromFrom.GetID]
		}
	}

	option = {
		name = OK
	}
}

# Peace, whitepeace
character_event = {
	id = CM.10040

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				OR = {
					character = ROOT
					character = FROM
				}
			}
		}
	}
	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = {
						character = FROM
					}
					chronicle = {
						entry = CHRONICLE_WAR_WHITEPEACE
						portrait = [Prev.GetID]
					}
				}
				if = {
					limit = {
						character = ROOT
					}
					FROM = {
						ROOT = {
							chronicle = {
								entry = CHRONICLE_WAR_WHITEPEACE
								portrait = [Prev.GetID]
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = OK
	}
}

# Peace, defender won
character_event = {
	id = CM.10041

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				OR = {
					character = ROOT
					character = FROM
				}
			}
		}
	}
	immediate = {
		e_rebels = {
			persistent_event_target:chronicle_player = {
				if = {
					limit = {
						character = FROM #Loser
					}
					chronicle = {
						entry = CHRONICLE_WAR_LOST
						portrait = [Prev.GetID]
					}
				}
				if = {
					limit = {
						character = ROOT #Winner
					}
					FROM = {
						ROOT = {
							chronicle = {
								entry = CHRONICLE_WAR_WON
								portrait = [Prev.GetID]
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = OK
	}
}



#############################################################################################
# Random content if chronicle is empty at year end (On Action on_create_chronicle_if_empty) #
#############################################################################################

# Dragon Sighted
character_event = {
	id = CM.10500

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10501 }
		}
	}
}

province_event = {
	id = CM.10501

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0001
				type = MONSTER_SIGHTED
			}
		}
	}
}

# Giant sighted
character_event = {
	id = CM.10502

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10503 }
		}
	}
}

province_event = {
	id = CM.10503

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0002
				type = MONSTER_SIGHTED
			}
		}
	}
}

# Sea serpents sighted
character_event = {
	id = CM.10504

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10505 }
		}
	}
}

province_event = {
	id = CM.10505

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0003
				type = MONSTER_SIGHTED
			}
		}
	}
}

# Strange shapes seen dancing on the moon
character_event = {
	id = CM.10506

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		chronicle = {
			entry = CHRONICLE_FILL0004
			type = MONSTER_SIGHTED
		}
	}
}

# Ten feet tall woman
character_event = {
	id = CM.10507

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10508 }
		}
	}
}

province_event = {
	id = CM.10508

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0005
				type = MONSTER_SIGHTED
			}
		}
	}
}

# Raining blood
character_event = {
	id = CM.10509

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10510 }
		}
	}
}

province_event = {
	id = CM.10510

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0006
				type = FREAK_NATURAL_EVENT
			}
		}
	}
}

# Strange plague kills rabbits
character_event = {
	id = CM.10511

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10512 }
		}
	}
}

province_event = {
	id = CM.10512

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0007
				type = FREAK_NATURAL_EVENT
			}
		}
	}
}

# Earthquake
character_event = {
	id = CM.10513

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10514 }
		}
	}
}

province_event = {
	id = CM.10514

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0008
				type = NATURAL_DISASTER
			}
		}
	}
}

# Flood
character_event = {
	id = CM.10515

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10516 }
		}
	}
}

province_event = {
	id = CM.10516

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0009
				type = NATURAL_DISASTER
			}
		}
	}
}

# Two suns were seen
character_event = {
	id = CM.10517

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10518 }
		}
	}
}

province_event = {
	id = CM.10518

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0010
				type = FREAK_NATURAL_EVENT
			}
		}
	}
}

# Goat with three heads was born
character_event = {
	id = CM.10519

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10520 }
		}
	}
}

province_event = {
	id = CM.10520

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0011
				type = MONSTER_SIGHTED
			}
		}
	}
}

# Bird invasion
character_event = {
	id = CM.10521

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10522 }
		}
	}
}

province_event = {
	id = CM.10522

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0012
				type = FREAK_NATURAL_EVENT
			}
		}
	}
}

# Many children born in province
character_event = {
	id = CM.10523

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10524 }
		}
	}
}

province_event = {
	id = CM.10524

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0013
				type = POPULATION_EVENT
			}
		}
	}
}

# Province celebrates beloved ruler
character_event = {
	id = CM.10525

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_demesne_province = {
			province_event = { id = CM.10526 }
		}
	}
}

province_event = {
	id = CM.10526

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0014
				type = POPULATION_EVENT
			}
		}
	}
}

# A star falls from the sky
character_event = {
	id = CM.10527

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		random_realm_province = {
			province_event = { id = CM.10528 }
		}
	}
}

province_event = {
	id = CM.10528

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = {
			chronicle = {
				entry = CHRONICLE_FILL0015
				type = FREAK_NATURAL_EVENT
			}
		}
	}
}

# Bountiful harvest
character_event = {
	id = CM.10529

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		chronicle = {
			entry = CHRONICLE_FILL0016
			type = POPULATION_EVENT
		}
	}
}

###AGOT enties###

# Dynast appointed Hand of the King
character_event = {
	id = CM.11500

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_HAND_OF_THE_KING_DYNASTY
			portrait = [From.GetID]
		}
	}

	option = {
		name = OK
	}
}
# Appointed to Council
character_event = {
	id = CM.11501

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_APPOINTED_COUNCIL
			portrait = [FromFrom.GetID]
		}
	}

	option = {
		name = OK
	}
}
# Emperor/King appoints castellan
character_event = {
	id = CM.11502

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_HAND_OF_THE_KING
			portrait = [From.GetID]
		}
	}

	option = {
		name = OK
	}
}
# Dynast appointed First Ranger
character_event = {
	id = CM.11503

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_FIRST_RANGER_DYNASTY
			portrait = [From.GetID]
		}
	}

	option = {
		name = OK
	}
}
# Relative Enslaved
character_event = {
	id = CM.11504

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_RELATIVE_ENSLAVED
			portrait = [From.GetID]
		}
	}

	option = {
		name = OK
	}
}
# Enslaved Important Person
character_event = {
	id = CM.11505

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		FROM = {
			if = {
				limit = {
					any_spouse = {
						OR = {
							NOT = { lower_tier_than = ROOT }
							higher_tier_than = COUNT
						}
					}
				}
				ROOT = {
					chronicle = {
						entry = CHRONICLE_ENSLAVED_VIP_SPOUSE
						portrait = [Prev.GetID]
					}
				}
				break = yes
			}
			if = {
				limit = {
					father_even_if_dead = {
						OR = {
							NOT = { lower_tier_than = ROOT }
							higher_tier_than = COUNT
						}
					}
				}
				ROOT = {
					chronicle = {
						entry = CHRONICLE_ENSLAVED_VIP_FATHER
						portrait = [Prev.GetID]
					}
				}
				break = yes
			}
			if = {
				limit = {
					mother_even_if_dead = {
						OR = {
							NOT = { lower_tier_than = ROOT }
							higher_tier_than = COUNT
						}
					}
				}
				ROOT = {
					chronicle = {
						entry = CHRONICLE_ENSLAVED_VIP_MOTHER
						portrait = [Prev.GetID]
					}
				}
				break = yes
			}
			if = {
				limit = {
					liege = {
						is_close_relative = PREV
						OR = {
							NOT = { lower_tier_than = ROOT }
							higher_tier_than = COUNT
						}
					}
				}
				ROOT = {
					chronicle = {
						entry = CHRONICLE_ENSLAVED_VIP_RELATIVE
						portrait = [Prev.GetID]
					}
				}
				break = yes
			}
			if = {
				limit = {
					OR = {
						trait = kingsguard
						trait = dragon_rider
						prestige = 250
					}
				}
				ROOT = {
					chronicle = {
						entry = CHRONICLE_ENSLAVED_VIP
						portrait = [Prev.GetID]
					}
				}
				break = yes
			}
		}
	}

	option = {
		name = OK
	}
}
# Relative Starts Claimant Adventure
character_event = {
	id = CM.11506

	hide_window = yes

	is_triggered_only = yes

	ai = no

	trigger = {
		FROM = { is_ruler = yes } # The DoW worked and the adventurer has a temporary title
	}

	immediate = {
		chronicle = {
			entry = CHRONICLE_RELATIVE_CLAIMANT_ADVENTURE
			portrait = [From.GetID]
		}
	}

	option = {
		name = OK
	}
}
# Relative Starts Invasion Adventure
character_event = {
	id = CM.11507

	hide_window = yes

	is_triggered_only = yes

	ai = no

	trigger = {
		FROM = { is_ruler = yes } # The DoW worked and the adventurer has a temporary title
	}

	immediate = {
		chronicle = {
			entry = CHRONICLE_RELATIVE_INVASION_ADVENTURE
			portrait = [From.GetID]
		}
	}

	option = {
		name = OK
	}
}
# Relative Legitimised by King
character_event = {
	id = CM.11508

	hide_window = yes

	is_triggered_only = yes

	ai = no

	immediate = {
		chronicle = {
			entry = CHRONICLE_RELATIVE_LEGITIMISED
			portrait = [From.GetID]
		}
	}

	option = {
		name = OK
	}
}