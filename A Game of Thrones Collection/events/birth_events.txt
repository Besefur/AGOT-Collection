#############################################
#
# EVENTS FOR LOVE, PREGNANCY AND BIRTH
#
#############################################
# by Henrik FÐµhraeus
#############################################

namespace = birth

# on_birth: Universal on birth event
character_event = {
	id = birth.990
	picture = GFX_evt_birth

	is_triggered_only = yes
	hide_window = yes

	immediate = { #Determine status (bastard, slave etc)
		mother_even_if_dead = {
			remove_trait = pregnancy_finishing
			remove_trait = hard_pregnancy
			remove_trait = in_hiding
			remove_trait = travelling
			remove_character_modifier = mother_praying_health
			remove_character_modifier = mother_resting_health
			remove_character_modifier = mother_partying_health
			clr_character_flag = mother_asked_retirement
			clr_character_flag = flag_mother_dark_rest
			clr_character_flag = mother_gossip_listening #Safety check, they should already have been removed
			clr_character_flag = mother_gossip_talking
			clr_character_flag = mother_gossip_trusting
			clr_character_flag = mother_gossip_plotting
			clr_character_flag = mother_gossip_envious
			clr_character_flag = mother_gossip_shy
			clr_character_flag = mother_gossip_learning
			clr_character_flag = mother_gossip_content
			clr_character_flag = mother_gossip_gluttonous

			character_event = { id = HFP.20597 days = 35 } #Clears persistent Physician targets. They are still on on_birth since post-partum complications may require their services.
		}
		#Child born to slave mother_even_if_dead
		if = {
			limit = {
				mother_even_if_dead = {
					trait = slave
					liege = {
						has_opinion_modifier = { who = PREV modifier = opinion_my_slave }
						NOT = { crownlaw_title = { has_law = slavery_3 } } #NOT Thralldom
					}
				}
				NOT = { has_game_rule = { name = slavery value = off } }
			}
			#Owner is the father
			if = {
				limit = {
					mother_even_if_dead = {
						liege = {
							ROOT = { father = { character = PREVPREV } }
						}
					}
				}
				father = { character_event = { id = slavery.403 days = 1 } }
				break = yes
			}
			# Under chattel slavery, slavery is inherited from the mother_even_if_dead
			if = {
				limit = {
					mother_even_if_dead = {
						liege = {
							has_full_slavery_trigger = yes
						}
					}
				}
				if = {
					limit = { father = { NOT = { any_spouse = { is_parent_of = ROOT } } } }
					add_trait = bastard
					if = {
						limit = { is_lowborn = no }
						dynasty = none
					}
				}
				mother_even_if_dead = {
					liege = {
						character_event = { id = slavery.401 days = 1 }
					}
				}
				break = yes
			}
		}
		#Child born out of wedlock
		if = {
			limit = {
				OR = {
					was_conceived_a_bastard = yes
					has_character_flag = was_conceived_a_bastard
				}
			}
			if = { #Check for bug, where father is set incorrectly
				limit = {
					real_father_even_if_dead = { always = yes }
					NOT = { father_even_if_dead = { always = yes } }
				}
				real_father_even_if_dead = { ROOT = { set_father = PREV } }
			}
			if = {
				limit = {
					OR = {
						AND = { # There is no 'real_father' set, i.e. this is not a hidden, cuckoo bastard
							NOT = { real_father_even_if_dead = { always = yes } }
							mother_even_if_dead = { NOT = { has_character_flag = bastard_father_unknown } }
						}
						mother_even_if_dead = { has_character_flag = flag_no_cuckoo } # The mother_even_if_dead has decided to tell her husband about the affair
					}
				}
				character_event = { id = 300 }
				break = yes
			}
		}
		#Vanilla dead father dynasty fix
		if = {
			limit = {
				father_even_if_dead = {
					is_alive = no
					is_married_matrilineally = no
					any_spouse_even_if_dead = { is_mother = ROOT }
				}
			}
			father_even_if_dead = { ROOT = { dynasty = PREV } }
		}
		#A bastard child is born, but is not recognized as such by the spouse of the mother_even_if_dead
		if = {
			limit = {
				OR = {
					real_father = {
						is_alive = yes
						ROOT = {
							father_even_if_dead = {
								NOT = { character = PREVPREV }
							}
						}
					}
					mother_even_if_dead = { has_character_flag = bastard_father_unknown }
				}
				mother_even_if_dead = { NOT = { has_character_flag = flag_no_cuckoo } }
			}
			set_character_flag = flag_secret_bastard
			character_event = { id = pil.250 days = 3 } #Check for obvious bastards because of looks
			mother_even_if_dead = {
				character_event = { id = 317 days = 1 } # The real father is notified
			}
		}
		#Consort
		if = {
			limit = {
				mother_even_if_dead = {
					OR = {
						is_consort = yes
						is_senior_consort_party = yes
						has_character_flag = unborn_child_is_consorts
					}
				}
			}
			character_event = { id = 312000 }
			break = yes
		}
		#Child of forbidden marriage is born
		if = {
			limit = {
				was_conceived_a_bastard = no
				NOT = { has_character_flag = was_conceived_a_bastard }
				mother_even_if_dead = { has_character_flag = forbidden_marriage_spouse }
				father_even_if_dead = { trait = disinherited }
			}
			set_character_flag = forbidden_marriage_child
			add_trait = disinherited
			break = yes
		}
		#Child of black brother
		if = {
			limit = {
				father_even_if_dead = { trait = nightswatch }
			}
			add_trait = bastard
			character_event = { id = 300 }
			break = yes
		}
	}

	option = { #Other genetics/events etc
		name = OK
		#Western valyrian culture mix
		if = {
			limit = {
				OR = {
					AND = {
						true_father_even_if_dead = { graphical_culture = valyriangfx }
						mother_even_if_dead = {
							has_white_skin_trigger = yes
							has_silver_hair_ethnicity_trigger = no
						}
					}
					AND = {
						mother_even_if_dead = { graphical_culture = valyriangfx }
						true_father_even_if_dead = {
							has_white_skin_trigger = yes
							has_silver_hair_ethnicity_trigger = no
						}
					}
				}
			}
			random = {
				chance = 50
				set_graphical_culture = western_valyrian
			}
		}
		else_if = {
			limit = {
				OR = {
					AND = {
						true_father_even_if_dead = { graphical_culture = valyriangfx }
						mother_even_if_dead = { has_tanned_skin_trigger = yes }
					}
					AND = {
						mother_even_if_dead = { graphical_culture = valyriangfx }
						true_father_even_if_dead = { has_tanned_skin_trigger = yes }
					}
				}
			}
			random = {
				chance = 33
				set_graphical_culture = western_valyrian
			}
		}
		else_if = {
			limit = {
				OR = {
					AND = {
						true_father_even_if_dead = { graphical_culture = valyriangfx }
						mother_even_if_dead = { has_bronzed_skin_trigger = yes }
					}
					AND = {
						mother_even_if_dead = { graphical_culture = valyriangfx }
						true_father_even_if_dead = { has_bronzed_skin_trigger = yes }
					}
				}
			}
			random = {
				chance = 15
				set_graphical_culture = western_valyrian
			}
		}
		if = {
			limit = {
				OR = {
					AND = {
						true_father_even_if_dead = {
							AND = {
								graphical_culture = valyriangfx
								culture = high_valyrian
							}
						}
						mother_even_if_dead = { graphical_culture = dothrakigfx }
					}
					AND = {
						mother_even_if_dead = {
							AND = {
								graphical_culture = valyriangfx
								culture = high_valyrian
							}
						}
						true_father_even_if_dead = { graphical_culture = dothrakigfx }
					}
				}
			}
			random = {
				chance = 15
				set_graphical_culture = Dothrakivalyrian_dyn
			}
		}
		##
		#Dynastic appearances
		if = {
			limit = { any_owned_bloodline = { has_bloodline_flag = has_strong_seed } }
			gfx_culture_scope = { save_event_target_as = current_gfx_culture } #record current gfx culture
			random_list = {
				40 = { #No change
				}
				25 = {
					trigger = {
						any_owned_bloodline = {
							OR = {
								has_bloodline_flag = durrandon
								has_bloodline_flag = baratheon
							}
						}
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = baratheongfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = baratheongfx }
					}
					if = {
						limit = { NOT = { graphical_culture = baratheongfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Baratheon_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = stormlandergfx }
									true_father_even_if_dead = { graphical_culture = stormlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				4 = {
					trigger = {
						any_owned_bloodline = {
							OR = {
								has_bloodline_flag = targaryen
								has_bloodline_flag = blackfyre
							}
						}
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = valyriangfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = valyriangfx }
					}
					if = {
						limit = { NOT = { graphical_culture = valyriangfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = high_valyrian

						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { has_silver_hair_ethnicity_trigger = yes }
									true_father_even_if_dead = { has_silver_hair_ethnicity_trigger = yes }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = lannister }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = lannistergfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = lannistergfx }
					}
					if = {
						limit = { NOT = { graphical_culture = lannistergfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Lannister_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = westermangfx }
									true_father_even_if_dead = { graphical_culture = westermangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = reyne }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = reynegfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = reynegfx }
					}
					if = {
						limit = { NOT = { graphical_culture = reynegfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Reyne_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = westermangfx }
									true_father_even_if_dead = { graphical_culture = westermangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = tully }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = tullygfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = tullygfx }
					}
					if = {
						limit = { NOT = { graphical_culture = tullygfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Tully_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = riverlandergfx }
									true_father_even_if_dead = { graphical_culture = riverlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = stark }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = starkgfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = starkgfx }
					}
					if = {
						limit = { NOT = { graphical_culture = starkgfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Stark_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = northmangfx }
									true_father_even_if_dead = { graphical_culture = northmangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = greyjoy }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = greyjoygfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = greyjoygfx }
					}
					if = {
						limit = { NOT = { graphical_culture = greyjoygfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Greyjoy_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = ironborngfx }
									true_father_even_if_dead = { graphical_culture = ironborngfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = martell }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = martellgfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = martellgfx }
					}
					if = {
						limit = { NOT = { graphical_culture = martellgfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Martell_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = saltdornishgfx }
									true_father_even_if_dead = { graphical_culture = saltdornishgfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = garth_greenhand }
						dynasty = 253
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = tyrellgfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = tyrellgfx }
					}
					if = {
						limit = { NOT = { graphical_culture = tyrellgfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Tyrell_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = reachmangfx }
									true_father_even_if_dead = { graphical_culture = reachmangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = hoare }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = hoaregfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = hoaregfx }
					}
					if = {
						limit = { NOT = { graphical_culture = hoaregfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Hoare_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = ironborngfx }
									true_father_even_if_dead = { graphical_culture = ironborngfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = arryn }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = arryngfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = arryngfx }
					}
					if = {
						limit = { NOT = { graphical_culture = arryngfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Arryn_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = valemangfx }
									true_father_even_if_dead = { graphical_culture = valemangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_blackwood_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = blackwoodgfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = blackwoodgfx }
					}
					if = {
						limit = { NOT = { graphical_culture = blackwoodgfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Blackwood_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = riverlandergfx }
									true_father_even_if_dead = { graphical_culture = riverlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_bracken_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = brackengfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = brackengfx }
					}
					if = {
						limit = { NOT = { graphical_culture = brackengfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Bracken_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = riverlandergfx }
									true_father_even_if_dead = { graphical_culture = riverlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_yronwood_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = yronwoodgfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = yronwoodgfx }
					}
					if = {
						limit = { NOT = { graphical_culture = yronwoodgfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Yronwood_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = stonedornishgfx }
									true_father_even_if_dead = { graphical_culture = stonedornishgfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_bolton_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = boltongfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = boltongfx }
					}
					if = {
						limit = { NOT = { graphical_culture = boltongfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Bolton_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = northmangfx }
									true_father_even_if_dead = { graphical_culture = northmangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_connington_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = conningtongfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = conningtongfx }
					}
					if = {
						limit = { NOT = { graphical_culture = conningtongfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Connington_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = stormlandergfx }
									true_father_even_if_dead = { graphical_culture = stormlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_piper_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = pipergfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = pipergfx }
					}
					if = {
						limit = { NOT = { graphical_culture = pipergfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Piper_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = riverlandergfx }
									true_father_even_if_dead = { graphical_culture = riverlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_lothston_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = lothstongfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = lothstongfx }
					}
					if = {
						limit = { NOT = { graphical_culture = lothstongfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Lothston_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = riverlandergfx }
									true_father_even_if_dead = { graphical_culture = riverlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_marbrand_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = marbrandgfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = marbrandgfx }
					}
					if = {
						limit = { NOT = { graphical_culture = marbrandgfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Marbrand_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = westermangfx }
									true_father_even_if_dead = { graphical_culture = westermangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_dondarrion_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = dondarriongfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = dondarriongfx }
					}
					if = {
						limit = { NOT = { graphical_culture = dondarriongfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Dondarrion_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = stormlandergfx }
									true_father_even_if_dead = { graphical_culture = stormlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_mallister_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = mallistergfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = mallistergfx }
					}
					if = {
						limit = { NOT = { graphical_culture = mallistergfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Mallister_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = riverlandergfx }
									true_father_even_if_dead = { graphical_culture = riverlandergfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_hightower_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = hightowergfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = hightowergfx }
					}
					if = {
						limit = { NOT = { graphical_culture = hightowergfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Hightower_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = reachmangfx }
									true_father_even_if_dead = { graphical_culture = reachmangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_redbeard_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = redbeardgfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = redbeardgfx }
					}
					if = {
						limit = { NOT = { graphical_culture = redbeardgfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Redbeard_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = freefolkgfx }
									true_father_even_if_dead = { graphical_culture = freefolkgfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_belmore_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = belmoregfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = belmoregfx }
					}
					if = {
						limit = { NOT = { graphical_culture = belmoregfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Belmore_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = valemangfx }
									true_father_even_if_dead = { graphical_culture = valemangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_ball_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = ballgfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = ballgfx }
					}
					if = {
						limit = { NOT = { graphical_culture = ballgfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Ball_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = reachmangfx }
									true_father_even_if_dead = { graphical_culture = reachmangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_rowan_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = rowangfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = rowangfx }
					}
					if = {
						limit = { NOT = { graphical_culture = rowangfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Rowan_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = reachmangfx }
									true_father_even_if_dead = { graphical_culture = reachmangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_redwyne_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = redwynegfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = redwynegfx }
					}
					if = {
						limit = { NOT = { graphical_culture = redwynegfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Redwyne_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = reachmangfx }
									true_father_even_if_dead = { graphical_culture = reachmangfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_manderly_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = manderlygfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = manderlygfx }
					}
					if = {
						limit = { NOT = { graphical_culture = manderlygfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Manderly_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = halfsouthrongfx }
									true_father_even_if_dead = { graphical_culture = halfsouthrongfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_riverman_strongseed }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = riverlandergfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = riverlandergfx }
					}
					if = {
						limit = { NOT = { graphical_culture = riverlandergfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = riverlander
					}
				}
				10 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = bloodline_dothraki_valyrian_mbs }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = { graphical_culture = dothrakivalyriangfx }
					}
					modifier = {
						factor = 4
						mother_even_if_dead = { graphical_culture = dothrakivalyriangfx }
					}
					if = {
						limit = { NOT = { graphical_culture = dothrakivalyriangfx } }
						set_character_flag = changed_appearance
						set_graphical_culture = Dothrakivalyrian_dyn
						if = { #appearance can be restored from related ethnicities
							limit = {
								OR = {
									mother_even_if_dead = { graphical_culture = dothrakigfx }
									true_father_even_if_dead = { graphical_culture = dothrakigfx }
								}
							}
							set_character_flag = do_not_override_appearance
						}
					}
				}
				4 = {
					trigger = {
						any_owned_bloodline = { has_bloodline_flag = west_valyrian }
					}
					modifier = {
						factor = 4
						true_father_even_if_dead = {
							OR = {
								graphical_culture = valyriangfx
								graphical_culture = westvalyriangfx
							}
						}
					}
					modifier = {
						factor = 4
						mother_even_if_dead = {
							OR = {
								graphical_culture = valyriangfx
								graphical_culture = westvalyriangfx
							}
						}
					}
					if = {
						limit = {
							NOR = {
								graphical_culture = valyriangfx
								graphical_culture = westvalyriangfx
							}
						}
						set_character_flag = changed_appearance
						set_graphical_culture = western_valyrian
					}
				}
			}
			if = {
				limit = { has_character_flag = changed_appearance }
				if = {
					limit = { has_character_flag = do_not_override_appearance }
					clr_character_flag = do_not_override_appearance
				}
				else_if = { #Make sure they are not a secret bastard
					limit = {
						NOR = {
							mother_even_if_dead = {
								OR = {
									graphical_culture = ROOT
									mother_even_if_dead = {
										OR = {
											graphical_culture = ROOT
											mother_even_if_dead = { graphical_culture = ROOT }
											true_father_even_if_dead = { graphical_culture = ROOT }
										}
									}
									true_father_even_if_dead = {
										OR = {
											graphical_culture = ROOT
											mother_even_if_dead = { graphical_culture = ROOT }
											true_father_even_if_dead = { graphical_culture = ROOT }
										}
									}
								}
							}
							true_father_even_if_dead = {
								OR = {
									graphical_culture = ROOT
									mother_even_if_dead = {
										OR = {
											graphical_culture = ROOT
											mother_even_if_dead = { graphical_culture = ROOT }
											true_father_even_if_dead = { graphical_culture = ROOT }
										}
									}
									true_father_even_if_dead = {
										OR = {
											graphical_culture = ROOT
											mother_even_if_dead = { graphical_culture = ROOT }
											true_father_even_if_dead = { graphical_culture = ROOT }
										}
									}
								}
							}
						}
					}
					set_graphical_culture = event_target:current_gfx_culture #if they are, reverse the change
				}
				clr_character_flag = changed_appearance
			}
		}


		cultural_congenital_trait_chance_effect = yes
		## Brindle Men big-boned half men
		##Lengi all high chance of being tall
		#Sarnori chance of being tall
		##Naathi chance of being quick/fair
		#High Valyrian fair
		#Lysene fair
		## Ibbenese

		##Ibbenese/Brindlemen/Giants cannot interbreed with regular men (neaderthals)
		if = {
			limit = {
				OR = {
					true_father_even_if_dead = {
						cannot_outbreed_trigger = yes
						ROOT = { mother_even_if_dead = { NOT = { graphical_culture = PREVPREV } } }
					}
					mother_even_if_dead = {
						cannot_outbreed_trigger = yes
						true_father_even_if_dead = { NOT = { graphical_culture = PREVPREV } }
					}
				}
			}
			fertility = -10
			random = {
				chance = 15
				add_trait = lunatic
			}
			random = {
				chance = 15
				add_trait = hunchback
			}
			random = {
				chance = 15
				add_trait = ugly
			}
			random = {
				chance = 15
				add_trait = sickly
			}
			random = {
				chance = 15
				add_trait = weak
			}
			random = {
				chance = 15
				add_trait = dwarf
			}
			random = {
				chance = 15
				add_trait = clubfooted
			}
			random = {
				chance = 15
				add_trait = slow
			}
			random = {
				chance = 15
				add_trait = imbecile
				remove_trait = slow
				remove_trait = slow_1
			}
			random = {
				chance = 15
				add_trait = harelip
			}
			random = {
				chance = 15
				add_scarred_tiered_effect = yes
			}
			if = {
				limit = {
					OR = {
						mother_even_if_dead = {
							cannot_outbreed_trigger = yes
						}
						true_father_even_if_dead = { graphical_culture = giantgfx }
					}
				}
				set_character_flag = stillborn
			}
		}
		#Make sure only correct characters are born with mark trait
		if = {
			limit = {
				trait = the_mark
				NOR = {
					graphical_culture = sistermangfx
					true_father_even_if_dead = {
						OR = {
							graphical_culture = sistermangfx
							trait = the_mark
						}
					}
					mother_even_if_dead = {
						OR = {
							graphical_culture = sistermangfx
							trait = the_mark
						}
					}
				}
			}
			remove_trait = the_mark
		}
		# A child whose mother_even_if_dead successfully consumed the heart is born
		if = {
			limit = { mother_even_if_dead = { has_character_flag = flag_stallion_heart_successful } }
			mother_even_if_dead = { clr_character_flag = flag_stallion_heart_successful }
			#set_character_flag = flag_stallion_heart_bonus_applied
			# Very good chance of removing bad congenital traits
			remove_trait = sickly
			random = {
				chance = 30
				remove_trait = imbecile
				remove_trait = imbecile_1
			}
			random = {
				chance = 30
				remove_trait = slow
				remove_trait = slow_1
			}
			random = {
				chance = 30
				remove_trait = ugly
				remove_trait = ugly_1
				remove_trait = ugly_2
			}
			random = {
				chance = 30
				remove_trait = weak
				remove_trait = weak_1
				remove_trait = weak_2
			}
			random = {
				chance = 30
				remove_trait = dwarf
				remove_trait = dwarf_1
				remove_trait = dwarf_2
			}
			random = {
				chance = 30
				remove_trait = clubfooted
			}
			random = {
				chance = 30
				remove_trait = hunchback
			}
			random = {
				chance = 30
				remove_trait = harelip
			}
			random = {
				chance = 30
				remove_trait = lisp
				remove_trait = lisp_1
				remove_trait = lisp_2
			}
			random = {
				chance = 30
				remove_trait = stutter
				remove_trait = stutter_1
				remove_trait = stutter_2
			}
			random = {
				chance = 30
				remove_trait = inbred
			}

			# Weak chance of gaining good congenital traits
			random = {
				chance = 1
				add_trait = genius
			}
			random = {
				chance = 5
				if = {
					limit = { NOT = { is_genius_trigger = yes } }
					add_trait = quick
				}
			}
			random = {
				chance = 5
				add_trait = strong
			}
			random = {
				chance = 5
				add_trait = fair
			}
			random = {
				chance = 5
				add_trait = fair_1
			}
		}
		# A child whose mother_even_if_dead failed to consume the heart is born
		if = {
			limit = { mother_even_if_dead = { has_character_flag = flag_stallion_heart_failure } }
			mother_even_if_dead = { clr_character_flag = flag_stallion_heart_failure }
			#set_character_flag = flag_stallion_heart_bonus_applied
			# Small chance of removing bad congenital traits
			remove_trait = sickly
			random = {
				chance = 10
				remove_trait = imbecile
				remove_trait = imbecile_1
			}
			random = {
				chance = 10
				remove_trait = slow
				remove_trait = slow_1
			}
			random = {
				chance = 10
				remove_trait = ugly
				remove_trait = ugly_1
				remove_trait = ugly_2
			}
			random = {
				chance = 10
				remove_trait = weak
				remove_trait = weak_1
				remove_trait = weak_2
			}
			random = {
				chance = 10
				remove_trait = dwarf
				remove_trait = dwarf_1
				remove_trait = dwarf_2
			}
			random = {
				chance = 10
				remove_trait = clubfooted
			}
			random = {
				chance = 10
				remove_trait = hunchback
			}
			random = {
				chance = 10
				remove_trait = harelip
			}
			random = {
				chance = 10
				remove_trait = lisp
				remove_trait = lisp_1
				remove_trait = lisp_2
			}
			random = {
				chance = 10
				remove_trait = stutter
				remove_trait = stutter_1
				remove_trait = stutter_2
			}
			random = {
				chance = 10
				remove_trait = inbred
			}
		}
		# Bear trait
		if = {
			limit = {
				OR = {
					true_father_even_if_dead = { trait = not_a_bear }
					mother_even_if_dead = { trait = not_a_bear }
				}
				is_female = no
				NOT = { trait = not_a_bear }
			}
			add_trait = not_a_bear
			set_graphical_culture = northman
		}
		# Cold Gods follower sacrifice son
		if = {
			limit = {
				father = {
					is_alive = yes
					religion = cold_gods
					NOT = { ROOT = { mother_even_if_dead = { higher_tier_than = PREVPREV is_alive = yes } } }
				}
				is_female = no
			}
			death = { death_reason = death_sacrificed }
			break = yes
		}
		#mother_even_if_dead drunk/had drugs during pregnancy, chance of dumb child.
		if = {
			limit = {
				mother_even_if_dead = {
					trait = drunkard
				}
			}
			random = {
				chance = 30
				set_character_flag = flag_drunk_birth
				if = {
					limit = { is_slow_trigger = yes }
					remove_trait = slow
					remove_trait = slow_1
					add_trait = imbecile
					mother_even_if_dead = { character_event = { id = HFP.20001 days = 451 } }
					father = { character_event = { id = HFP.20002 days = 450 } }
				}
				if = {
					limit = {
						NOR = {
							is_genius_trigger = yes
							is_quick_trigger = yes
							is_dumb_trigger = yes
							is_imbecile_trigger = yes
						}
					}
					add_trait = slow
					mother_even_if_dead = { character_event = { id = HFP.20001 days = 451 } }
					father = { character_event = { id = HFP.20002 days = 450 } }
				}
				if = {
					limit = { is_quick_trigger = yes }
					remove_trait = quick
					remove_trait = quick_1
				}
				if = {
					limit = { is_genius_trigger = yes }
					remove_trait = genius
					remove_trait = genius_1
					add_trait = quick
				}
			}
		}
		#STILLBORN
		if = {
			limit = { mother_even_if_dead = { has_character_flag = flag_stillbirth } }
			mother_even_if_dead = { clr_character_flag = flag_stillbirth }
			set_character_flag = stillborn
		}
		if = {
			limit = { has_character_flag = stillborn }
			if = {
				limit = {
					OR = {
						dynasty = 496 #Targaryen
						dynasty = 57 #Blackfyre
						dynasty = 497 #Aegons "of Essos"
						#Targ Cadets
						dynasty = 450204
						dynasty = 450205
						dynasty = 450206
						dynasty = 450207
					}
				}
				add_trait = small_horns
				add_trait = small_claws
				add_trait = small_wingspan
				add_trait = thin_scales
			}
			death = { death_reason = death_stillborn }
			father = { character_event = { id = 381 } }
			real_father = { character_event = { id = 381 } }
			mother_even_if_dead = { character_event = { id = 381 } }
			break = yes
		}
		#Character born to a hiding mother_even_if_dead is also hidden
		if = {
			limit = {
				mother_even_if_dead = {
					is_inaccessible_trigger = yes
					same_liege = ROOT
					has_character_flag = hidden_from_siege
				}
			}
			add_trait = in_hiding
			set_character_flag = hidden_from_siege
		}
		# Circumstances of conception were mysterious
		if = {
			limit = {
				mother_even_if_dead = { has_character_flag = flag_mysterious_conception_mother }
			}
			mother_even_if_dead = { clr_character_flag = flag_mysterious_conception_mother }
			set_character_flag = flag_mysterious_conception
		}
		#Renly changes to primo in ACoK
		if = {
			limit = { father = { character = 5317 } } #Renly
			character_event = { id = clash_of_kings.240 days = 1 }
		}
		character_event = { id = dynastic_rivalry.8 days = 1 } #Dynastic feud check
		character_event = { id = high_valyrian.7 days = 1 } #Targ Coin Flip
		character_event = { id = stark_wolfblood_mbs.1 days = 1 } #Targ Coin Flip
		character_event = { id = 66113 days = 1 } #Grandchild Prince Title
		#Great House Traditional Names
		if = {
			limit = { has_dynasty_flag = has_traditional_names }
			character_event = { id = dynasty.50 }
		}
		# Child Perceived to be Demon Born
		if = {
			limit = {
				has_dlc = "The Old Gods"
				mother_even_if_dead = { has_character_flag = pregnant_with_demon }
			}
			#add_trait = lefthanded
			random_list = {
				50 = { set_character_flag = demon_child }
				50 = { set_character_flag = demon_child_fake }
			}
			mother_even_if_dead = { clr_character_flag = pregnant_with_demon }
		}
		#Curse of Harrenhal
		if = {
			limit = {
				OR = {
					true_father_even_if_dead = {
						OR = {
							has_landed_title = c_harrenhal
							mother_even_if_dead = { has_landed_title = c_harrenhal }
							true_father_even_if_dead = { has_landed_title = c_harrenhal }
						}
					}
					mother_even_if_dead = {
						OR = {
							has_landed_title = c_harrenhal
							mother_even_if_dead = { has_landed_title = c_harrenhal }
							true_father_even_if_dead = { has_landed_title = c_harrenhal }
						}
					}
				}
				107 = {
					NOT = { has_province_modifier = completeharren3 }
					NOT = { has_province_flag = pre_harren_harrenhal }
				}
			}
			add_character_modifier = {
				name = curse_of_harrenhal
				duration = -1
			}
			if = {
				limit = {
					NOR = {
						trait = clubfooted
						trait = harelip
						trait = hunchback
						is_ugly_trigger = yes
						is_short_trigger = yes
						is_slow_trigger = yes
						is_imbecile_trigger = yes
					}
				}
				random_list = {
					90 = { }
					3 = { add_trait = clubfooted }
					3 = { add_trait = harelip }
					3 = { add_trait = hunchback }
					3 = { add_trait = ugly remove_trait = fair remove_trait = fair_1 remove_trait = fair_2 }
					3 = { add_trait = dwarf remove_trait = tall remove_trait = tall_1 remove_trait = tall_2 remove_trait = strong remove_trait = strong_1 remove_trait = strong_2 }
					3 = { add_trait = slow remove_trait = quick remove_trait = quick_1 remove_trait = genius remove_trait = genius_1 }
					3 = { add_trait = imbecile remove_trait = quick remove_trait = quick_1 remove_trait = genius remove_trait = genius_1 }
				}
			}
		}
		# A child born to Dothraki parents is deformed
		if = {
			limit = {
				liege = {
					culture = dothraki
					is_parent_of = ROOT
					is_incapable = no
					prisoner = no

				}
				OR = {
					trait = inbred
					is_weak_trigger = yes
					is_short_trigger = yes
					trait = hunchback
					trait = clubfooted
				}
			}
			liege = { character_event = { id = dothraki.751 days = 5 } }
		}
		#sisterman child is deformed, sacrifice to the gods?
		if = {
			limit = {
				OR = {
					father = { is_lady_of_the_waves_pirate_religion_trigger = yes }
					mother_even_if_dead = { is_lady_of_the_waves_pirate_religion_trigger = yes }
				}
				OR = {
					is_short_trigger = yes
					trait = inbred
					trait = clubfooted
					trait = hunchback
					trait = harelip
				}
			}
			if = {
				limit = {
					father = {
						is_lady_of_the_waves_pirate_religion_trigger = yes
						is_alive = yes
						is_incapable = no
						NOT = { ROOT = { mother_even_if_dead = { higher_tier_than = PREVPREV is_lady_of_the_waves_pirate_religion_trigger = yes is_alive = yes } } }
					}
				}
				father = { character_event = { id = pirate.12 days = 5 } }
				set_character_flag = father_sacrifice
			}
			if = {
				limit = {
					mother_even_if_dead = {
						is_lady_of_the_waves_pirate_religion_trigger = yes
						is_alive = yes
						is_incapable = no
					}
					NOT = { has_character_flag = father_sacrifice }
				}
				mother_even_if_dead = { character_event = { id = pirate.12 days = 5 } }
			}
			clr_character_flag = father_sacrifice
		}
		# Wolf's Blood inheritance
		if = {
			limit = {
				has_dlc = "Horse Lords"
				OR = {
					true_father_even_if_dead = { has_character_modifier = wolf_blood }
					mother_even_if_dead = { has_character_modifier = wolf_blood }
				}
			}
			character_event = { id = HL.1701 days = 150 } # This is when you would start noticing it...
		}
		# Child born to Orys and Argella is stormlander
		if = {
			limit = {
				father_even_if_dead = { character = 1317 }
				mother_even_if_dead = { character = 11544 }
				dynasty = 317
			}
			culture = stormlander
			set_graphical_culture = Baratheon_dyn
		}
		# Chronicle entry
		if = {
			limit = {
				OR = {
					real_father = { e_rebels = { persistent_event_target:chronicle_player = { character = PREVPREV } } }
					e_rebels = {
						persistent_event_target:chronicle_player = {
							is_parent_of = ROOT
						}
					}
				}
			}
			character_event = { id = CM.19011 days = 2 } # Delay to allow for naming of child.
		}
		#babies born in seclusion gain seclusion
		if = {
			limit = {
				host = {
					has_character_modifier = in_seclusion
				}
			}
			add_character_modifier = {
				name = in_seclusion
				duration = -1
			}
		}
		# Lannister-baratheon descendent
		if = {
			limit = {
				OR = {
					dynasty = 190
					dynasty = 317
				}
				OR = {
					father = { dynasty = ROOT has_character_flag = baratheon-lannister }
					mother_even_if_dead = { dynasty = ROOT has_character_flag = baratheon-lannister }
				}
			}
			set_character_flag = baratheon-lannister
		}
		# Brightflame descendent
		if = {
			limit = {
				dynasty = 496
				OR = {
					father = { has_character_flag = aerion_brightflame }
					mother_even_if_dead = { has_character_flag = aerion_brightflame }
				}
			}
			set_character_flag = aerion_brightflame
		}
		# Breakspear descendent
		if = {
			limit = {
				dynasty = 496
				OR = {
					father = { has_character_flag = baelor_breakspear }
					mother_even_if_dead = { has_character_flag = baelor_breakspear }
				}
			}
			set_character_flag = baelor_breakspear
		}
		# Rhaegel descendent
		if = {
			limit = {
				dynasty = 496
				OR = {
					father = { has_character_flag = rhaegel_targaryen }
					mother_even_if_dead = { has_character_flag = rhaegel_targaryen }
				}
			}
			set_character_flag = rhaegel_targaryen
		}
		# Bad-Apple descendent
		if = {
			limit = {
				dynasty = 261
				OR = {
					father = { has_character_flag = bad_apple }
					mother_even_if_dead = { has_character_flag = bad_apple }
				}
			}
			set_character_flag = bad_apple
		}
		# Renly Baratheon descendent
		if = {
			limit = {
				dynasty = 317
				OR = {
					father = { has_character_flag = renly_baratheon }
					mother_even_if_dead = { has_character_flag = renly_baratheon }
				}
			}
			set_character_flag = renly_baratheon
		}
		# Apple Eater descendent
		if = {
			limit = {
				dynasty = 999078
				OR = {
					father = { has_character_flag = apple_eater }
					mother_even_if_dead = { has_character_flag = apple_eater }
				}
			}
			set_character_flag = apple_eater
		}
		# Otto Hightower descendent
		if = {
			limit = {
				dynasty = 285
				OR = {
					father = { has_character_flag = otto_hightower }
					mother_even_if_dead = { has_character_flag = otto_hightower }
				}
			}
			set_character_flag = otto_hightower
		}
		# Stark/Frey
		if = {
			limit = {
				dynasty = 127
				OR = {
					father = { has_character_flag = elmar_frey }
					mother_even_if_dead = { has_character_flag = arya_stark }
				}
			}
			set_character_flag = frey_stark
		}
		# Hayford/Lannister
		if = {
			limit = {
				dynasty = 32
				OR = {
					father = { has_character_flag = tyrek_lannister }
					mother_even_if_dead = { has_character_flag = ermesande_hayford }
				}
			}
			set_character_flag = hayford_lannister
		}
		# Hayford/Lannister
		if = {
			limit = {
				dynasty = 190
				OR = {
					father = { has_character_flag = tyrek_lannister }
					mother_even_if_dead = { has_character_flag = ermesande_hayford }
				}
			}
			set_character_flag = hayford_lannister
		}
		# Baratheon-Durrandon descendent
		if = {
			limit = {
				dynasty = 317
				OR = {
					mother_even_if_dead = {
						character = 11544
					}
				}
			}
			mother_even_if_dead = {
				any_owned_bloodline = {
					limit = { has_bloodline_flag = historical_bloodline }
					add_bloodline_member = ROOT
				}
			}
		}
		# Jon Snow descendent
		if = {
			limit = {
				dynasty = 59
				OR = {
					father = { has_character_flag = jon_coa }
					mother_even_if_dead = { has_character_flag = jon_coa }
				}
				NOR = {
					father = {
						NOR = {
							has_landed_title = e_iron_throne
							has_landed_title = c_winterfell
							has_landed_title = d_winterfell
							has_landed_title = k_north
							has_landed_title = e_north
						}
					}
					mother_even_if_dead = {
						NOR = {
							has_landed_title = e_iron_throne
							has_landed_title = c_winterfell
							has_landed_title = d_winterfell
							has_landed_title = k_north
							has_landed_title = e_north
						}
					}
				}
			}
			set_character_flag = jon_coa
		}
		# Rhaenyra descendent
		if = {
			limit = {
				dynasty = 52
				OR = {
					father = { has_character_flag = targaryen_black }
					mother_even_if_dead = { has_character_flag = targaryen_black }
				}
			}
			set_character_flag = targaryen_black
		}
		#mother_even_if_dead took part in fertility feast, chance of blessed girl.
		if = {
			limit = {
				mother_even_if_dead = {
					has_character_modifier = mother_fertility_festival_2
				}
				is_female = yes
			}
			random_list = {
				40 = {
					modifier = {
						factor = 1.75
						mother_even_if_dead = { is_ugly_trigger = yes }
					}
					modifier = {
						factor = 1.75
						true_father_even_if_dead = { is_ugly_trigger = yes }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { is_fair_trigger = yes }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { is_fair_trigger = yes }
					}
					modifier = {
						factor = 1.75
						mother_even_if_dead = { any_child = { is_fair_trigger = yes } } #Avoid entire litters of them.
					}
					modifier = {
						factor = 1.75
						true_father_even_if_dead = { any_child = { is_fair_trigger = yes } } #Avoid entire litters of them.
					}
				}
				60 = {
					remove_trait = hunchback
					remove_trait = dwarf
					remove_trait = dwarf_1
					remove_trait = dwarf_2
					remove_trait = ugly
					remove_trait = ugly_1
					remove_trait = ugly_2
					remove_trait = inbred
					remove_trait = sickly
					remove_trait = harelip
					remove_trait = lisp
					remove_trait = lisp_1
					remove_trait = lisp_2
					mother = { character_event = { id = HFP.20055 days = 3600 random = 200 } }
					father = { character_event = { id = HFP.20055 days = 3600 random = 200 } }
				}
			}
		}
		# #Catholic/Orthodox rulers: chance of Churching after the first pregnancy is over.
		# if = {
			# limit = {
				# mother_even_if_dead = {
					# religion = the_seven
					# is_married = yes
					# NOT = { num_of_children = 2 }
					# NOT = { society_member_of = the_satanists }
					# OR = {
						# is_ruler = yes
						# spouse = { is_ruler = yes }
					# }
					# NOR = {
						# has_character_modifier = adulteress
						# has_character_modifier = incestuous_adulteress
					# }
				# }
			# }
			# mother_even_if_dead = { character_event = { id = HFP.20018 days = 24 } }
		# }
		if = {
			limit = { #The Papal orgy bears fruits.
				mother_even_if_dead = { has_character_flag = flag_vatican_prince }
			}
			mother_even_if_dead = {
				clr_character_flag = flag_vatican_prince
				character_event = { id = HFP.20598 days = 7 random = 7 } #Notify mother_even_if_dead.
			}
		}
		if = {
			limit = {
				mother_even_if_dead = { trait = troubled_pregnancy }
			}
			random_list = {
				80 = { set_character_flag = flag_troubled_pregnancy_child
				}
				20 = { } #Nothing happens
			}
		}
		if = {
			limit = {
				mother_even_if_dead = { trait = stressed }
			}
			random_list = {
				30 = {
					mother_even_if_dead = {
						character_event = { id = HFP.20581 days = 30 random = 50 } #chance to recover from stressed.
					}
				}
				70 = { } #Nothing happens
			}
		}
		if = {
			limit = {
				mother_even_if_dead = { has_character_flag = mother_craved_quail }
			}
			random_list = {
				70 = {
					add_trait = clubfooted
					mother_even_if_dead = {
						character_event = { id = HFP.20582 days = 950 random = 550 } #Notify mother_even_if_dead child gains 2 diplomacy.
						clr_character_flag = mother_craved_quail
					}
				}
				30 = { mother_even_if_dead = { clr_character_flag = mother_craved_quail } } #Nothing happens
			}
		}
		if = {
			limit = {
				mother_even_if_dead = { has_character_flag = mother_craved_hare }
			}
			random_list = {
				70 = {
					add_trait = harelip
					mother_even_if_dead = {
						character_event = { id = HFP.20583 days = 950 random = 550 } #Notify mother_even_if_dead child gains 2 intrigue.
						clr_character_flag = mother_craved_hare
					}
				}
				30 = { mother_even_if_dead = { clr_character_flag = mother_craved_hare } } #Nothing happens
			}
		}
		if = {
			limit = {
				mother_even_if_dead = { has_character_flag = mother_craved_trout }
			}
			random_list = {
				70 = {
					add_trait = ugly
					mother_even_if_dead = {
						character_event = { id = HFP.20584 days = 950 random = 550 } #Notify mother_even_if_dead child gains 2 learning.
						clr_character_flag = mother_craved_trout
					}
				}
				30 = { mother_even_if_dead = { clr_character_flag = mother_craved_trout } } #Nothing happens
			}
		}
		if = {
			limit = {
				mother_even_if_dead = { has_character_flag = mom_hopes_child_warrior }
			}
			#Small chance of child actually gaining positive trait.
			random_list = {
				20 = {
					modifier = {
						factor = 0.5
						mother_even_if_dead = { is_weak_trigger = yes }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { trait = feeble }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { trait = inbred }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { trait = hunchback }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { is_short_trigger = yes }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { is_weak_trigger = yes }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { trait = feeble }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { trait = inbred }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { trait = hunchback }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { is_short_trigger = yes }
					}
					if = {
						limit = { is_weak_trigger = yes }
						remove_trait = weak
						remove_trait = weak_1
						remove_trait = weak_2
					}
					if = {
						limit = { trait = feeble }
						remove_trait = feeble
					}
					if = {
						limit = { trait = inbred }
						remove_trait = inbred
					}
					if = {
						limit = { trait = hunchback }
						remove_trait = hunchback
					}
					if = {
						limit = { is_short_trigger = yes }
						remove_trait = dwarf
						remove_trait = dwarf_1
						remove_trait = dwarf_2
					}
					if = {
						limit = { trait = sickly }
						remove_trait = sickly
					}

				}
				80 = { #No luck.

				}
			}
			#Notify mother_even_if_dead.
			if = {
				limit = {
					NOR = {
						is_weak_trigger = yes
						trait = feeble
						trait = inbred
						trait = hunchback
						is_short_trigger = yes
						trait = sickly
					}
				}
				mother_even_if_dead = {
					character_event = { id = HFP.20585 days = 250 random = 250 } #Notify mother_even_if_dead child gains 2 martial.
					clr_character_flag = mom_hopes_child_warrior
				}
			}
		} #Close what if warrior child

		#mother_even_if_dead offered sacrifice for strong child
		if = {
			limit = {
				mother_even_if_dead = { has_character_flag = mom_hopes_child_strong }
			}
			#Small chance of child actually gaining positive trait.
			random_list = {
				20 = {
					modifier = {
						factor = 0.5
						mother_even_if_dead = { is_weak_trigger = yes }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { trait = feeble }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { trait = inbred }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { trait = hunchback }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { is_short_trigger = yes }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { is_weak_trigger = yes }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { trait = feeble }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { trait = inbred }
					}
					remove_trait = weak
					remove_trait = weak_1
					remove_trait = weak_2
					remove_trait = sickly
					add_trait = strong

				}
				80 = { #No luck.
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { is_strong_trigger = yes }
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = { is_strong_trigger = yes }
					}

				}
			}
			#Notify mother_even_if_dead.
			if = {
				limit = { is_strong_trigger = yes
				}
				mother_even_if_dead = {
					character_event = { id = HFP.20586 days = 250 random = 250 } #Notify mother_even_if_dead child is growing strong.
					clr_character_flag = mom_hopes_child_strong
				}
			}
			mother_even_if_dead = { clr_character_flag = mom_hopes_child_strong }
		}
		#mother_even_if_dead offered sacrifice for pretty child
		if = {
			limit = {
				mother_even_if_dead = { has_character_flag = mom_hopes_child_pretty }
			}
			#Small chance of child actually gaining positive trait.
			random_list = {
				20 = {
					modifier = {
						factor = 0.5
						mother_even_if_dead = { is_ugly_trigger = yes }
					}
					modifier = {
						factor = 2
						mother_even_if_dead = { is_fair_trigger = yes }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { is_ugly_trigger = yes }
					}
					modifier = {
						factor = 2
						true_father_even_if_dead = { is_fair_trigger = yes }
					}
					remove_trait = harelip
					remove_trait = ugly
					remove_trait = ugly_1
					remove_trait = ugly_2
					add_trait = fair

				}
				80 = { #No luck.

				}
			}
			#Notify mother_even_if_dead.
			if = {
				limit = { is_fair_trigger = yes }
				mother_even_if_dead = {
					character_event = { id = HFP.20587 days = 250 random = 250 } #Notify mother_even_if_dead child is growing strong.
					clr_character_flag = mom_hopes_child_pretty
				}
			}
			mother_even_if_dead = { clr_character_flag = mom_hopes_child_pretty }
		}
		#mother_even_if_dead offered sacrifice for smart child
		if = {
			limit = {
				mother_even_if_dead = { has_character_flag = mom_hopes_child_smart }
			}
			#Small chance of child actually gaining positive trait.
			random_list = {
				20 = {
					modifier = {
						factor = 0.5
						mother_even_if_dead = { is_slow_trigger = yes }
					}
					modifier = {
						factor = 0.25
						mother_even_if_dead = { is_imbecile_trigger = yes }
					}
					modifier = {
						factor = 1.5
						mother_even_if_dead = { is_quick_trigger = yes }
					}
					modifier = {
						factor = 2
						mother_even_if_dead = { is_genius_trigger = yes }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { is_slow_trigger = yes }
					}
					modifier = {
						factor = 0.25
						true_father_even_if_dead = { is_imbecile_trigger = yes }
					}
					modifier = {
						factor = 0.5
						true_father_even_if_dead = { is_ugly_trigger = yes }
					}
					modifier = {
						factor = 1.5
						true_father_even_if_dead = { is_quick_trigger = yes }
					}
					modifier = {
						factor = 2
						true_father_even_if_dead = { is_genius_trigger = yes }
					}
					remove_trait = slow
					remove_trait = slow_1
					remove_trait = imbecile
					remove_trait = imbecile_1
					if = {
						limit = { is_quick_trigger = yes }
						remove_trait = quick
						remove_trait = quick_1
						add_trait = genius
					}
					if = {
						limit = { NOT = { is_quick_trigger = yes } }
						add_trait = quick
					}
				}
				80 = { #No luck.

				}
			}
			#Notify mother_even_if_dead.
			if = {
				limit = {
					OR = {
						is_quick_trigger = yes
						is_genius_trigger = yes
					}
				}
				mother_even_if_dead = {
					character_event = { id = HFP.20588 days = 450 random = 450 } #Notify mother_even_if_dead child is growing smart.
					clr_character_flag = mom_hopes_child_smart
				}
			}
			mother_even_if_dead = { clr_character_flag = mom_hopes_child_smart }
		}
		#mother_even_if_dead wanted a boy/girl
		if = {
			limit = {
				mother_even_if_dead = {
					OR = {
						has_character_flag = mom_hopes_child_boy
						has_character_flag = mom_hopes_child_girl
					}
				}
			}
			mother_even_if_dead = {
				character_event = { id = HFP.20589 days = 15 random = 15 } #Did the bet pay out?
			}
		}
		#mother_even_if_dead made a vow to the Holy Virgin
		if = {
			limit = {
				mother_even_if_dead = {
					OR = {
						has_character_modifier = mother_vow_chastity
						has_character_modifier = mother_vow_humility
						has_character_modifier = mother_vow_charity
						has_character_modifier = mother_vow_temperance
					}
				}
			}
			#Possible divine intervention
			random_list = {
				70 = { #Nothing happens
				}
				30 = {
					#Broke the vow, decreased chance.
					modifier = {
						factor = 0.5
						mother_even_if_dead = {
							has_character_modifier = mother_vow_temperance
							OR = {
								trait = gluttonous
								trait = hedonist
							}
						}
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = {
							has_character_modifier = mother_vow_charity
							trait = greedy
						}
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = {
							has_character_modifier = mother_vow_humility
							trait = proud
						}
					}
					modifier = {
						factor = 0.5
						mother_even_if_dead = {
							has_character_modifier = mother_vow_chastity
							trait = lustful
						}
					}


					#Remained true to the vow, increased chance.
					modifier = {
						factor = 1.75
						mother_even_if_dead = {
							has_character_modifier = mother_vow_temperance
							trait = temperate
						}
					}
					modifier = {
						factor = 1.75
						mother_even_if_dead = {
							has_character_modifier = mother_vow_charity
							trait = charitable
						}
					}
					modifier = {
						factor = 1.75
						mother_even_if_dead = {
							has_character_modifier = mother_vow_humility
							trait = humble
						}
					}
					modifier = {
						factor = 1.75
						mother_even_if_dead = {
							has_character_modifier = mother_vow_chastity
							OR = {
								trait = chaste
								trait = celibate
							}
						}
					}
					remove_trait = sickly
					remove_trait = inbred
					remove_trait = harelip
					remove_trait = clubfooted
					remove_trait = hunchback
					remove_trait = lisp
					remove_trait = lisp_1
					remove_trait = lisp_2
					remove_trait = stutter
					remove_trait = stutter_1
					remove_trait = stutter_2
					remove_trait = ugly
					remove_trait = ugly_1
					remove_trait = ugly_2
					remove_trait = dwarf
					remove_trait = dwarf_1
					remove_trait = dwarf_2
					remove_trait = slow
					remove_trait = slow_1
					remove_trait = imbecile
					remove_trait = imbecile_1
					remove_trait = weak
					remove_trait = weak_1
					remove_trait = weak_2
				}
			}
			mother_even_if_dead = {
				character_event = { id = HFP.20590 days = 25 random = 25 } #Did it work? If so, does she keep her word?
			}
		}
		# Inherit bloodlines from mother
		if = {
			limit = {
				mother_even_if_dead = {
					any_owned_bloodline = {
						OR = {
							has_bloodline_flag = inherit_matrilineal_same_dynasty
							has_bloodline_flag = dynastic_bloodline
						}
					}
				}
			}
			character_event = { id = traditional_claims.220 days = 5 } #delay to allow for dynasty changes
			character_event = { id = traditional_claims.199 days = 10 } #check for traditional dynastic claims
		}
		if = { # Stable Doctrine gives chance to shield newborn heir from harm.
			limit = {
				has_religion_feature = religion_stable
				liege = { is_parent_of = ROOT }
			}
			character_event = { id = HF.23750 }
		}
		# Random events
		random = {
			chance = 1
			modifier = {
				factor = 0.5
			}
			character_event = { id = RoI.10000 days = 2 } # Reincarnation?
		}
		random = {
			chance = 1
			character_event = { id = HL.1000 days = 2 } # Child born with Wolf's Blood
		}
		if = {
			limit = { mother_even_if_dead = { has_character_flag = orgy_impregnated } }
			mother_even_if_dead = { clr_character_flag = orgy_impregnated }
			if = {
				limit = {
					magic_returned_trigger = yes
				}
				random = {
					chance = 1
					modifier = {
						factor = 0.05
						NOT = { mother_even_if_dead = { ai = no } }
						NOT = { father = { ai = no } }
					}
					character_event = { id = SoA.3001 days = 730 }
				}
			}
		}
		random_list = { #Chance of imprinting (mother_even_if_dead)
			50 = {
				modifier = {
					factor = 0.5
					mother_even_if_dead = { num_of_children = 2 }
				}
				modifier = {
					factor = 0.35
					mother_even_if_dead = { num_of_children = 3 }
				}
				modifier = {
					factor = 0.25
					mother_even_if_dead = { num_of_children = 4 }
				}
				modifier = {
					factor = 0.1
					mother_even_if_dead = { num_of_children = 5 }
				}
				modifier = {
					factor = 0.5
					mother_even_if_dead = { age = 30 }
				}
				modifier = {
					factor = 1.5
					mother_even_if_dead = { trait = kind }
				}
				modifier = {
					factor = 1.5
					mother_even_if_dead = { trait = charitable }
				}
				modifier = {
					factor = 0.5
					mother_even_if_dead = { trait = envious }
				}
				modifier = {
					factor = 0.5
					mother_even_if_dead = { trait = cruel }
				}
				modifier = {
					factor = 0.5
					mother_even_if_dead = { trait = ruthless }
				}
				mother_even_if_dead = { character_event = { id = HFP.20599 days = 70 } }
			}
			50 = {  }
		}
		random_list = { #Chance of imprinting (father)
			50 = {
				modifier = {
					factor = 0.5
					father = { num_of_children = 2 }
				}
				modifier = {
					factor = 0.35
					father = { num_of_children = 3 }
				}
				modifier = {
					factor = 0.25
					father = { num_of_children = 4 }
				}
				modifier = {
					factor = 0.1
					father = { num_of_children = 5 }
				}
				modifier = {
					factor = 0.5
					father = { age = 30 }
				}
				modifier = {
					factor = 1.5
					father = { trait = kind }
				}
				modifier = {
					factor = 1.5
					father = { trait = charitable }
				}
				modifier = {
					factor = 0.5
					father = { trait = envious }
				}
				modifier = {
					factor = 0.5
					father = { trait = cruel }
				}
				modifier = {
					factor = 0.5
					father = { trait = ruthless }
				}
				father = { character_event = { id = HFP.20000 days = 700 random = 500 } }
			}
			50 = {  }
		}
	}
	after = {
		clr_character_flag = was_conceived_a_bastard
	}
}

#############################################
# EVENTS LEADING UP TO BASTARD PREGNANCY
# (Attraction grows between the male ruler and a female courtier)
#############################################

# A courtier initiates romance with their liege
character_event = {
	id = 450
	desc = EVTDESC450
	picture = "GFX_gentle_kiss"
	is_triggered_only = yes

	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		OR = { #If ruler must be at liege's court
			is_ruler = no
			liege = {
				at_location = ROOT
				NOT = { character = ROOT }
			}
		}
		OR = {
			is_female = no
			NOT = { age = 40 }
		}
		independent = no
		has_lover = no
		is_pregnant = no
		is_consort = no
		is_senior_consort_party = no
		is_ill = no
		NOT = { trait = infirm }
		NOT = { trait = celibate }
		NOT = { trait = eunuch }
		NOT = { trait = dragon }
		NOT = { is_inaccessible_trigger = yes }

		OR = {
			is_married = no
			trait = lustful
			trait = deceitful
			spouse = {
				NOT = { is_lover = ROOT }
				NOT = { reverse_opinion = { who = ROOT value = 50 } }
			}
		}

		liege = {
			possibly_romantically_interested_in_each_other_trigger = yes
			age = 16
			NOT = { character = ROOT }
			NOT = { num_of_lovers = 5 }
			is_pregnant = no
			prisoner = no
			is_ill = no
			NOT = { trait = infirm }
			NOT = { is_inaccessible_trigger = yes }
			OR = {
				is_married = no
				trait = lustful
				trait = deceitful
				spouse = {
					NOT = { is_lover = PREV }
					NOT = { reverse_opinion = { who = PREV value = 50 } }
				}
			}
			OR = {
				is_female = no
				NOT = { age = 40 }
			}
			NOT = {
				has_character_modifier = lustful_affair_timer
			}
			NOT = {
				has_opinion_modifier = {
					who = ROOT
					modifier = opinion_former_lover
				}
			}
			NOT = { is_married = ROOT }
		}
	}


	weight_multiplier = {
		days = 1

		modifier = {
			factor = 0.5
			has_dlc = "Way of Life"
			NOT = { has_focus = focus_seduction }
			NOT = { liege = { has_focus = focus_seduction } }
		}
		modifier = {
			factor = 2.0
			has_ambition = obj_make_the_eight
		}
		modifier = {
			factor = 0.025 #make it possible (but unlikely) for a courtier to 'come out of the closet' to make a pass at the liege
			NOT = { trait = homosexual }
			liege = { same_sex = ROOT }
			OR = { #Dornish need not be homosexual if lustful
				NOT = { trait = lustful	}
				NOT = { culture_group = dornish }
			}
		}
		modifier = {
			factor = 0.25
			liege = { num_of_lovers = 1 }
		}
		modifier = {
			factor = 0.25
			liege = { num_of_lovers = 2 }
		}
		modifier = {
			factor = 0.33
			liege = { num_of_lovers = 3 }
		}
		modifier = {
			factor = 0.4
			liege = { num_of_lovers = 4 }
		}
		modifier = {
			factor = 0.5
			is_drowned_god_religion_trigger = yes
		}
		modifier = {
			factor = 3.0
			trait = homosexual #to balance for fewer potential lovers
		}
		modifier = {
			factor = 3.0
			has_character_flag = debutante
			NOT = {
				had_character_flag = {
					flag = debutante
					days = 730
				}
			}
		}
		modifier = {
			factor = 1.5
			NOT = { age = 20 }
		}
		modifier = {
			factor = 0.03 #Incest should be rare
			liege = {
				is_close_relative = ROOT
				practices_incest_trigger = no
			}
		}
		modifier = {
			factor = 2
			practices_incest_trigger = yes
			liege = {
				is_close_relative = ROOT
				practices_incest_trigger = yes
			}
		}
		modifier = {
			factor = 0.5
			age = 30
		}
		modifier = {
			factor = 3.0
			has_ambition = obj_find_lover
		}
		modifier = {
			factor = 3.0
			liege = { has_ambition = obj_find_lover }
		}
		modifier = {
			factor = 2.0
			trait = hedonist
		}
		modifier = {
			factor = 2.0
			liege = { trait = hedonist }
		}
		modifier = {
			factor = 2.0
			trait = lustful
		}
		modifier = {
			factor = 2.0
			liege = { trait = lustful }
		}
		modifier = {
			factor = 2.0
			has_fair_trait_trigger = yes
		}
		modifier = {
			factor = 2.0
			liege = { has_fair_trait_trigger = yes }
		}
		modifier = {
			factor = 0.5
			has_ugly_trait_trigger = yes
		}
		modifier = {
			factor = 0.5
			liege = { has_ugly_trait_trigger = yes }
		}
		modifier = {
			factor = 0.5
			NOT = { opinion = { who = liege value = 0 } }
		}
		modifier = {
			factor = 0.5
			NOT = { reverse_opinion = { who = liege value = 0 } }
		}
		modifier = {
			factor = 0.75
			NOT = { opinion = { who = liege value = 25 } }
		}
		modifier = {
			factor = 0.75
			NOT = { reverse_opinion = { who = liege value = 25 } }
		}
		modifier = {
			factor = 1.25
			opinion = { who = liege value = 50 }
		}
		modifier = {
			factor = 1.25
			reverse_opinion = { who = liege value = 50 }
		}
		modifier = {
			factor = 1.25
			opinion = { who = liege value = 75 }
		}
		modifier = {
			factor = 1.25
			reverse_opinion = { who = liege value = 75 }
		}
		modifier = {
			factor = 0.1
			trait = chaste
		}
		modifier = {
			factor = 0.1
			liege = { trait = chaste }
		}
		modifier = {
			factor = 0.5
			liege = { any_child = { trait = bastard } }
		}
	}

	option = {
		name = "EVTOPTA450"
		if = {
			limit = {
				NOT = { trait = homosexual }
				liege = { same_sex = ROOT }
				OR = { #Dornish need not be homosexual if lustful
					NOT = { trait = lustful	}
					NOT = { culture_group = dornish }
				}
			}
			add_trait = homosexual
		}
		liege = {
			add_character_modifier = {
				name = lustful_affair_timer
				duration = 1460
				hidden = yes
			}
			character_event = { id = 451 tooltip = EVTTOOLTIP451 }
		}
	}
}

# The liege responds to his/her advances
character_event = {
	id = 451
	desc = EVTDESC451
	picture = "GFX_gentle_kiss"
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA451
		ai_chance = {
			factor = 90
			modifier = {
				factor = 4
				trait = lustful
			}
			modifier = {
				factor = 2
				trait = hedonist
			}
			modifier = {
				factor = 0.1
				is_close_relative = FROM
				trait = honorable
				practices_incest_trigger = no
			}
			modifier = {
				factor = 0.05
				NOT = { trait = homosexual }
				same_sex = FROM
				OR = { #Dornish need not be homosexual if lustful
					NOT = { trait = lustful	}
					NOT = { culture_group = dornish }
				}
			}
		}
		FROM = { character_event = { id = 452 tooltip = EVTTOOLTIP452 } }
		hedonist_trait_chance_effect = yes
	}

	option = {
		name = EVTOPTB451
		trigger = {
			OR = {
				OR = {
					NOT = { trait = lustful }
					NOT = {
						AND = {
							NOT = { trait = homosexual }
							NOT = { same_sex = FROM }
						}
						AND = {
							trait = homosexual
							same_sex = FROM
						}
						#Dornish need not be homosexual if lustful
						culture_group = dornish
					}
				}
				ai = yes
			}
		}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 0.01
				has_focus = focus_seduction
			}
			modifier = {
				factor = 3
				num_of_lovers = 1
			}
			modifier = {
				factor = 3
				num_of_lovers = 2
			}
			modifier = {
				factor = 3
				num_of_lovers = 3
			}
			modifier = {
				factor = 3
				num_of_lovers = 4
			}
			modifier = {
				factor = 10
				trait = chaste
			}
			modifier = {
				factor = 2
				trait = temperate
			}
			modifier = {
				factor = 0.5
				trait = greedy
			}
			modifier = {
				factor = 20
				is_close_relative = FROM
				NOT = { trait = lustful }
				practices_incest_trigger = no
			}
		}
	}

	option = {
		name = EVTOPTC451
		trigger = {
			trait = lustful
			ai = no
			OR = {
				AND = {
					NOT = { trait = homosexual }
					NOT = { same_sex = FROM }
				}
				AND = {
					trait = homosexual
					same_sex = FROM
				}
				#Dornish need not be homosexual if lustful
				culture_group = dornish
			}
		}
		tooltip_info = lustful
		piety = 15
		if = {
			limit = { NOT = { trait = stressed } }
			random = {
				chance = 15
				add_trait = stressed
				hidden_tooltip = { character_event = { id = 38282 } }
			}
		}
	}
}

# The courtier accepts or spurns the liege lord
character_event = {
	id = 452
	desc = EVTDESC452
	picture = "GFX_gentle_kiss"

	is_triggered_only = yes

	trigger = {
		is_alive = yes
		FROM = { is_alive = yes }
	}

	option = {
		name = EVTOPTA452
		ai_chance = {
			factor = 90
			modifier = {
				factor = 0.1
				is_close_relative = FROM
				trait = honorable
				practices_incest_trigger = no
			}
		}
		trigger = {
			fertility = 0.33
			FROM = { fertility = 0.33 }
		}
		add_lover = FROM
		FROM = { character_event = { id = 453 days = 1 tooltip = EVTTOOLTIP453 } }
		#log = "452: [From.GetBestName] tumbles [Root.GetBestName]"
		if = {
			limit = {
				is_female = yes
				NOT = { age = 45 }
				FROM = { is_female = no }
				is_married = yes
			}
			random = {
				chance = 50
				impregnate_cuckoo = FROM
				#log = "452: [From.GetBestName] cuckoo impregnates [Root.GetBestName]"
			}
		}
		if = {
			limit = {
				is_female = yes
				NOT = { age = 45 }
				FROM = { is_female = no }
				is_married = no
			}
			random = {
				chance = 50
				impregnate = FROM
				#log = "452: [From.GetBestName] impregnates [Root.GetBestName]"
			}
		}
		if = {
			limit = {
				is_female = no
				FROM = {
					NOT = { age = 45 }
					is_female = yes
					is_married = yes
				}
			}
			random = {
				chance = 50
				FROM = {
					impregnate_cuckoo = ROOT
					#log = "452: [From.GetBestName] cuckoo impregnates [Root.GetBestName]"
				}
			}
		}
		if = {
			limit = {
				is_female = no
				FROM = {
					NOT = { age = 45 }
					is_female = yes
					is_married = no
				}
			}
			random = {
				chance = 50
				FROM = {
					impregnate = ROOT
					#log = "452: [From.GetBestName] impregnates [Root.GetBestName]"
				}
			}
		}
		hedonist_trait_chance_effect = yes


		FROM = {
			if = {
				limit = { has_ambition = obj_make_the_eight }
				hidden_tooltip = { character_event = { id = ambition.1 } }
			}
		}
	}
	option = {
		name = "EVTOPTA452"
		ai_chance = {
			factor = 90
			modifier = {
				factor = 0.1
				is_close_relative = FROM
				trait = honorable
				practices_incest_trigger = no
			}
		}
		trigger = {
			OR = {
				NOT = { fertility = 0.33 }
				NOT = { FROM = { fertility = 0.33 } }
			}
		}
		hedonist_trait_chance_effect = yes
		add_lover = FROM
		FROM = { character_event = { id = 453 days = 1 tooltip = EVTTOOLTIP453 } }
		FROM = {
			if = {
				limit = { has_ambition = obj_make_the_eight }
				hidden_tooltip = { character_event = { id = ambition.1 } }
			}
		}
	}

	option = {
		name = "EVTOPTB452"
		ai_chance = {
			factor = 5
			modifier = {
				factor = 10
				trait = chaste
			}
			modifier = {
				factor = 2
				FROM = { is_female = no }
				is_female = yes
			}
			modifier = {
				factor = 2
				trait = temperate
			}
			modifier = {
				factor = 0.5
				trait = greedy
			}
			modifier = {
				factor = 10
				is_close_relative = FROM
				NOT = { trait = lustful }
				practices_incest_trigger = no
			}
			modifier = {
				factor = 0.1
				liege = {
					OR = {
						trait = seducer
						trait = seductress
					}
				}
			}
		}
		trigger = {
			NOT = { trait = lustful }
			NOT = { trait = hedonist }
		}
		FROM = { character_event = { id = 454 days = 1 tooltip = EVTTOOLTIP454 } }
		#log = "452: [Root.GetBestName] rebuffs [From.GetBestName]"
	}

	option = {
		name = "EVTOPTC452"
		trigger = {
			FROM = { is_female = no }
			is_female = yes
			NOT = { trait = lustful }
			NOT = { trait = hedonist }
		}
		ai_chance = {
			factor = 5
			modifier = {
				factor = 10
				trait = chaste
			}
			modifier = {
				factor = 2
				trait = temperate
			}
			modifier = {
				factor = 0.5
				trait = greedy
			}
			modifier = {
				factor = 10
				is_close_relative = FROM
				NOT = { trait = lustful }
				practices_incest_trigger = no
			}
			modifier = {
				factor = 0.1
				liege = {
					OR = {
						trait = seducer
						trait = seductress
					}
				}
			}
		}
		FROM = { character_event = { id = 455 days = 1 tooltip = EVTTOOLTIP455 } }
		#log = "452: [Root.GetBestName] embarrasses [From.GetBestName]"
	}
}

# The ruler becomes his/her lover
character_event = {
	id = 453

	desc = EVTDESC453
	picture = GFX_evt_lovers
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA453
		add_lover = FROM
		FROM = {
			if = {
				limit = { has_ambition = obj_make_the_eight }
				hidden_tooltip = { character_event = { id = ambition.1 } }
			}
		}
	}
}

# The ruler is spurned and disappointed
character_event = {
	id = 454
	picture = GFX_evt_quarrel

	is_triggered_only = yes

	desc = EVTDESC454

	option = {
		name = EVTOPTA454
		opinion = {
			who = FROM
			modifier = opinion_spurned
			years = 5
		}
	}
}

# The ruler is spurned and embarrassed
character_event = {
	id = 455
	picture = GFX_evt_quarrel

	is_triggered_only = yes

	desc = EVTDESC455

	option = {
		name = EVTOPTA455
		opinion = {
			who = FROM
			modifier = opinion_embarrassed
			years = 5
		}
	}
}

#############################################
# PREGNANCY STARTS SHOWING EVENTS
#############################################

# On-action event: Pregnancy starts showing
character_event = {
	id = 400
	desc = {
		text = EVTDESC400
		trigger = { #The father is alive and a spouse
			is_married = yes
			father_of_unborn = {
				is_alive = yes
				any_spouse = { character = ROOT }
			}
		}
	}
	desc = {
		text = EVTDESC400_widow
		trigger = { #The father is dead and a spouse
			is_married = no
			father_of_unborn = {
				is_alive = no
				ROOT = { any_spouse_even_if_dead = { character = PREVPREV } }
			}
		}
	}
	desc = {
		text = EVTDESC400_CONSORT
		trigger = { #Not married, but is consort
			is_married = no
			NOT = { num_of_consorts = 2 }
			NOT = {
				father_of_unborn = {
					is_alive = no
					ROOT = { any_spouse_even_if_dead = { character = PREVPREV } }
				}
			}
		}
	}
	desc = {
		text = EVTDESC400_CONSORTS
		trigger = { #Not married, and multiple consorts
			is_married = no
			num_of_consorts = 2
			NOT = {
				father_of_unborn = {
					is_alive = no
					ROOT = { any_spouse_even_if_dead = { character = PREVPREV } }
				}
			}
		}
	}
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	trigger = {
		NOT = { trait = pregnant }
		is_consort = no
		father_of_unborn = {
			OR = {
				AND = { #The father is alive and a spouse
					is_alive = yes
					is_married = ROOT
				}
				AND = { #The father is dead and a spouse
					is_alive = no
					ROOT = { any_spouse_even_if_dead = { character = PREVPREV } }
				}
				any_consort = {
					character = ROOT
					is_senior_consort_party = yes
				}
			}
		}
	}

	immediate = {
		clr_character_flag = forced_child
		add_trait = pregnant
	}

	option = {
		name = OK
		ai_chance = { factor = 95 }
		clr_character_flag = flag_no_cuckoo
		tooltip = { add_trait = pregnant }
		prestige = 10

		hidden_tooltip = {
			random_list = {
				80 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.9
						trait = possessed
					}
					modifier = {
						factor = 0.9
						trait = paranoid
					}
					modifier = {
						factor = 0.9
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.9
						age = 37
					}
					modifier = {
						factor = 0.9
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						num_of_children = 8
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					modifier = {
						factor = 1.5
						is_tribal = yes
					}
					modifier = {
						factor = 1.5
						is_nomadic = yes
					}
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 0.5
						trait = is_malnourished
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}

					modifier = {
						factor = 1.75
						trait = robust
					}
					modifier = {
						factor = 1.5
						trait = sturdy
					}
				}
				20 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					# modifier = {
						# factor = 2
						# has_character_modifier = hashish_addict
					# }
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
		}

		# Mark father's location
		hidden_tooltip = {
			if = {
				limit = {
					father_of_unborn = {
						OR = {
							NOT = { at_location = ROOT }
							trait = infirm
							is_crippled_trigger = yes
							trait = homosexual
							trait = inbred
							is_ill = yes
						}
					}
				}
				set_character_flag = flag_mysterious_conception_mother
			}
		}

		# Stillbirths, potentially
		stillbirth_chance_effect = yes

		hidden_tooltip  = {
			if = {
				limit = {
					OR = {
						has_character_modifier = abomination_of_incest
						father_of_unborn = {
							OR = {
								has_character_modifier = abomination_of_incest
								sibling = ROOT
								is_parent_of = ROOT
								mother = { character = ROOT }
							}
						}
					}
				}
				character_event = { id = 370 days = 300 }
			}
		}
		if = {
			limit = {
				father_of_unborn = {
					is_alive = yes
					is_consort = no #No authority to be paranoid. Indeed, he has no way of knowing the child is his.
				}
			}

			hidden_tooltip = {
				if = {
					limit = {
						father_of_unborn = {
							trait = paranoid
							NOT = { trait = slave }
						}
					}
					random = {
						chance = 50
						father_of_unborn = { character_event = { id = 404 } }
						break = yes
					}
				}
				if = {
					limit = {
						father_of_unborn = {
							NOT = { trait = paranoid }
							NOT = { trait = trusting }
							NOT = { trait = slave }
						}
					}
					random = {
						chance = 1
						father_of_unborn = { character_event = { id = 404 } }
						break = yes
					}
				}
			}

			father_of_unborn = {
				show_scope_change = no
				character_event = { id = 403 tooltip = EVTTOOLTIP403 }
			}
		}
	}

	option = {
		# Moon Tea
		name = "EVTOPTB400"
		trigger = {
			OR = { #Only important people have access
				is_ruler = yes
				liege = { is_close_relative = ROOT }
				liege = { is_married = ROOT }
				liege = { dynasty = ROOT }
				prestige = 100
				intrigue = 12
				wealth = 25
			}
			NOT = { trait = slave } #No access to tea
			prisoner = no #No access to tea
		}
		wealth = -15
		piety = -15
		custom_tooltip = { text = tooltip_20404_abortion }
		remove_trait = pregnant
		add_character_modifier = { modifier = aborted_child years = 1 }
		hidden_tooltip  = {
			cancel_pregnancy = yes
			moon_tea_effects = yes #random events
			if = {
				limit = {
					OR = {
						has_character_modifier = abomination_of_incest
						father_of_unborn = {
							OR = {
								has_character_modifier = abomination_of_incest
								sibling = ROOT
								is_parent_of = ROOT
								mother = { character = ROOT }
							}
						}
					}
				}
				character_event = { id = 370 days = 300 }
			}
		}
		ai_chance = {
			factor = 5

			#Must have a reason to do this against spouse
			modifier = {
				factor = 0
				OR = { #young and lustful
					age = 21
					AND = {
						NOT = { trait = lustful }
						NOT = { trait = hedonist }
					}
				}
				#Is either depressed, lunatic, posessed
				NOT = { trait = depressed }
				NOT = { trait = lunatic }
				NOT = { trait = possessed }

				spouse = { reverse_opinion = { who = ROOT value = -39 } } #dislikes husband
				any_lover = { #has a lover and is not husband's lover
					is_female = no
					NOT = { is_married = ROOT }
				}
			}

			#Rulers have further restrictions
			modifier = {
				factor = 0
				is_ruler = yes
				NOT = { trait = depressed }
				NOT = { trait = lunatic }
				NOT = { trait = possessed }
				OR = {
					NOT = { current_heir = { is_child_of = ROOT } }
					NOT = {
						any_lover = {
							is_female = no
							NOT = { is_married = ROOT }
						}
					}
					has_ambition = obj_have_a_daughter
					has_ambition = obj_have_a_son
					has_ambition = obj_five_children
				}
			}

			modifier = {
				factor = 1.5
				trait = lustful
			}
			modifier = {
				factor = 1.5
				NOT = { age = 21 }
				trait = lustful
			}
			modifier = {
				factor = 1.5
				trait = hedonist
			}
			modifier = {
				factor = 1.5
				NOT = { age = 21 }
				trait = hedonist
			}

			modifier = {
				factor = 1.25
				trait = humble
			}
			modifier = {
				factor = 2
				trait = craven
			}
			modifier = {
				factor = 2
				trait = depressed
			}

			# Wants to Spite Husband
			modifier = {
				factor = 0.64
				spouse = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 0.64
				spouse = { reverse_opinion = { who = ROOT value = 80 } }
			}
			modifier = {
				factor = 0.64
				spouse = { reverse_opinion = { who = ROOT value = 60 } }
			}
			modifier = {
				factor = 0.64
				spouse = { reverse_opinion = { who = ROOT value = 40 } }
			}
			modifier = {
				factor = 0.64
				spouse = { reverse_opinion = { who = ROOT value = 20 } }
			}

			modifier = {
				factor = 1.56
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -99 } } }
			}
			modifier = {
				factor = 1.56
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -79 } } }
			}
			modifier = {
				factor = 1.56
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -59 } } }
			}
			modifier = {
				factor = 1.56
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -39 } } }
			}
			modifier = {
				factor = 1.56
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -19 } } }
			}

			modifier = {
				factor = 2
				NOT = { spouse = { reverse_opinion = { who = ROOT value = 0 } } }
				trait = wroth
			}
			modifier = {
				factor = 2
				NOT = { spouse = { reverse_opinion = { who = ROOT value = 0 } } }
				trait = envious
			}
			modifier = {
				factor = 2
				NOT = { spouse = { reverse_opinion = { who = ROOT value = 0 } } }
				trait = proud
			}

			modifier = {
				factor = 2
				any_lover = { #has a lover and is not husband's lover
					is_female = no
					NOT = { is_married = ROOT }
				}
			}

			# Personality Obstacles
			modifier = {
				factor = 0.5
				trait = honorable
			}
			modifier = {
				factor = 0.8
				trait = brave
			}
			modifier = {
				factor = 0.8
				trait = proud
			}
			modifier = {
				factor = 0.8
				trait = honest
			}
			modifier = {
				factor = 0.8
				trait = kind
			}
			modifier = {
				factor = 0.5
				trait = zealous
			}
			modifier = {
				factor = 0.5
				trait = familyperson
			}

			# Conflicting Objectives
			modifier = {
				factor = 0.1
				OR = {
					has_ambition = obj_have_a_daughter
					has_ambition = obj_have_a_son
					has_ambition = obj_five_children
				}
			}
		}
	}
}

# On-action event: Pregnancy out of wedlock!
character_event = {
	id = 401
	desc = EVTDESC401
	picture = GFX_evt_pregnancy

	is_triggered_only = yes
	is_married = no

	trigger = {
		NOT = { trait = pregnant }
		is_consort = no
		father_of_unborn = {
			NOR = {
				AND = {
					is_alive = yes
					is_married = ROOT
				}
				AND = { #The father is dead and a spouse
					is_alive = no
					ROOT = { any_spouse_even_if_dead = { character = PREVPREV } }
				}
				any_consort = {
					character = ROOT
					is_senior_consort_party = yes
				}
			}
		}
		NOT = { has_character_flag = forced_child }
	}

	immediate = {
		add_trait = pregnant
	}

	option = {
		name = OK
		clr_character_flag = flag_no_cuckoo
		tooltip = { add_trait = pregnant }
		# Stillbirths, potentially
		stillbirth_chance_effect = yes

		piety = -25
		prestige = -25

		hidden_tooltip = {
			random_list = {
				50 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.8
						trait = possessed
					}
					modifier = {
						factor = 0.8
						trait = paranoid
					}
					modifier = {
						factor = 0.8
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.8
						age = 37
					}
					modifier = {
						factor = 0.8
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 3
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					# modifier = {
						# factor = 0.8
						# trait = shieldmaiden
					# }
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.75
						trait = robust
					}
				}
				50 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					# modifier = {
						# factor = 2
						# has_character_modifier = hashish_addict
					# }
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
		}
		hidden_tooltip  = {
			if = {
				limit = {
					OR = {
						has_character_modifier = abomination_of_incest
						father_of_unborn = {
							OR = {
								has_character_modifier = abomination_of_incest
								sibling = ROOT
								is_parent_of = ROOT
								mother = { character = ROOT }
							}
						}
					}
				}
				character_event = { id = 370 days = 300 }
			}
		}
		ai_chance = { factor = 90 }
	}

	option = {
		# Moon Tea
		name = "EVTOPTB400"
		trigger = {
			NOT = { trait = salt_wife }
			OR = { #Only important people have access
				is_ruler = yes
				liege = { is_close_relative = ROOT }
				liege = { is_married = ROOT }
				liege = { dynasty = ROOT }
				prestige = 100
				intrigue = 12
				wealth = 25
			}
			NOT = { trait = slave } #No access to tea
			prisoner = no #No access to tea
		}
		clr_character_flag = flag_no_cuckoo
		custom_tooltip = { text = tooltip_20404_abortion }
		tooltip = {
			remove_trait = pregnant
			add_character_modifier = { modifier = aborted_child years = 1 }
		}
		hidden_tooltip = {
			if = {
				limit = {
					father_of_unborn = {
						is_alive = yes
						NOT = { character = 0 } #father is unknown
					}
				}
				father_of_unborn = { character_event = { id = 406 } }
			}
			else = {
				remove_trait = pregnant
				cancel_pregnancy = yes
				add_character_modifier = { modifier = aborted_child years = 1 }
				moon_tea_effects = yes #random events
			}
		}

		hidden_tooltip  = {
			if = {
				limit = {
					OR = {
						has_character_modifier = abomination_of_incest
						father_of_unborn = {
							OR = {
								has_character_modifier = abomination_of_incest
								sibling = ROOT
								is_parent_of = ROOT
								mother = { character = ROOT }
							}
						}
					}
				}
				character_event = { id = 370 days = 300 }
			}
		}
		ai_chance = {
			factor = 40

			# Not ready to be a mother
			modifier = {
				factor = 1.5
				NOT = { age = 20 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 19 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 18 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 17 }
			}
			modifier = {
				factor = 2
				trait = craven
			}
			modifier = {
				factor = 2
				trait = depressed
			}
			modifier = {
				factor = 1.25
				trait = humble
			}
			modifier = {
				factor = 1.5
				trait = lustful
			}
			modifier = {
				factor = 1.5
				trait = hedonist
			}
			#Unmarried Courtiers with no means will keep child if father is very important or golddigger
			modifier = {
				factor = 0.1
				#is_ruler = no
				father_of_unborn = { higher_tier_than = ROOT }
				NOT = {
					any_dynasty_member = {
						is_close_relative = ROOT
						ROOT = { father_of_unborn = { lower_tier_than = PREVPREV } }
					}
				}
				OR = {
					trait = ambitious
					trait = greedy
					trait = ruthless
					trait = envious
				}
			}
			modifier = {
				factor = 0.2
				lower_tier_than = KING
				father_of_unborn = { tier = KING }
				NOT = { any_dynasty_member = { is_close_relative = ROOT higher_tier_than = DUKE } }
			}
			modifier = {
				factor = 0.1
				NOT = { tier = EMPEROR }
				father_of_unborn = { tier = EMPEROR }
				NOT = { any_dynasty_member = { is_close_relative = ROOT tier = EMPEROR } }
			}
			# Avoiding Scandal
			modifier = {
				factor = 5
				OR = {
					is_ruler = yes
					any_dynasty_member = { is_close_relative = ROOT higher_tier_than = BARON }
				}
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 2
				trait = paranoid
			}
			modifier = {
				factor = 4
				father_of_unborn = { is_married = yes }
			}
			modifier = {
				factor = 0.75
				father_of_unborn = { has_ambition = obj_make_the_eight }
			}

			# Father unlikely to support child
			modifier = {
				factor = 2
				father_of_unborn = { trait = ruthless }
			}
			modifier = {
				factor = 2
				father_of_unborn = { trait = cruel }
			}
			modifier = {
				factor = 2
				father_of_unborn = { trait = greedy }
			}
			modifier = {
				factor = 2
				father_of_unborn = { trait = slothful }
			}

			# Personality Obstacles
			modifier = {
				factor = 0.8
				trait = brave
			}
			modifier = {
				factor = 0.8
				trait = honest
			}
			modifier = {
				factor = 0.8
				trait = kind
			}
			modifier = {
				factor = 0.5
				trait = zealous
			}
			modifier = {
				factor = 0.5
				trait = familyperson
			}
			modifier = {
				factor = 0
				OR = {
					has_ambition = obj_have_a_daughter
					has_ambition = obj_have_a_son
					has_ambition = obj_five_children
				}
			}
		}
	}
}

# On-action event: Pregnancy in matrimony, with another father!
character_event = {
	id = 402
	desc = EVTDESC402
	picture = "GFX_evt_pregnancy"

	is_triggered_only = yes

	trigger = {
		NOT = { trait = pregnant }
		is_consort = no
		is_married = yes
		spouse = { is_alive = yes }
		father_of_unborn = {
			NOT = { is_married = ROOT }
			NAND = { #The father is dead and a spouse
				is_alive = no
				ROOT = { any_spouse_even_if_dead = { character = PREVPREV } }
			}
			NOT = { any_consort = { character = ROOT } }
		}
		NOT = { has_character_flag = forced_child }
	}

	immediate = {
		add_trait = pregnant
	}

	# Option 1 - Come Clean
	option = {
		name = "EVTOPTA402"
		trigger = { NOT = { trait = slave } }
		tooltip = { add_trait = pregnant }
		set_character_flag = flag_no_cuckoo
		clr_character_flag = first_night_child
		father_of_unborn = {
			tooltip = { show_portrait = yes }
			character_event = { id = 405 tooltip = EVTTOOLTIP405 }
		}

		# Stillbirths, potentially
		stillbirth_chance_effect = yes

		spouse = {
			tooltip = { show_portrait = yes }
			character_event = { id = 40499 tooltip = EVTTOOLTIP40499 }
		}

		hidden_tooltip = {
			random_list = {
				70 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.8
						trait = possessed
					}
					modifier = {
						factor = 0.8
						trait = paranoid
					}
					modifier = {
						factor = 0.8
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.8
						age = 37
					}
					modifier = {
						factor = 0.8
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 3
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					# modifier = {
						# factor = 0.8
						# trait = shieldmaiden
					# }
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.75
						trait = robust
					}
				}
				30 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					modifier = {
						factor = 2
						has_character_modifier = hashish_addict
					}
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
		}

		ai_chance = {
			factor = 33

			# Opinion of Spouse
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 90 } }
			}
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 80 } }
			}
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 70 } }
			}
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 40 } }
			}
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 30 } }
			}
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 20 } }
			}
			modifier = {
				factor = 1.25
				spouse = { reverse_opinion = { who = ROOT value = 10 } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -9 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -19 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -29 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -39 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -59 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -69 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -79 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -89 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { spouse = { reverse_opinion = { who = ROOT value = -99 } } }
			}

			# Spouse's Personality Effects
			modifier = {
				factor = 0.5
				spouse = { trait = wroth }
			}
			modifier = {
				factor = 2
				spouse = { trait = patient }
			}
			modifier = {
				factor = 0.5
				spouse = { trait = cruel }
			}
			modifier = {
				factor = 0.5
				spouse = { trait = envious }
			}
			modifier = {
				factor = 2
				spouse = { trait = kind }
			}
			modifier = {
				factor = 0.5
				spouse = { trait = proud }
			}
			modifier = {
				factor = 2
				spouse = { trait = humble }
			}
		}
	}

	# Option 2 - Moon Tea
	option = {
		name = "EVTOPTB400"
		trigger = {
			NOT = { trait = slave }
			NOT = { trait = salt_wife }
			OR = { #Only important people have access
				is_ruler = yes
				liege = { is_close_relative = ROOT }
				liege = { is_married = ROOT }
				liege = { dynasty = ROOT }
				prestige = 100
				intrigue = 12
				wealth = 25
			}
			prisoner = no #No access to tea
		}
		clr_character_flag = flag_no_cuckoo
		custom_tooltip = { text = tooltip_20404_abortion }
		tooltip = {
			remove_trait = pregnant
			add_character_modifier = { modifier = aborted_child years = 1 }
		}
		hidden_tooltip = {
			if = {
				limit = {
					father_of_unborn = {
						is_alive = yes
						NOT = { character = 0 } #father is unknown
					}
				}
				father_of_unborn = { character_event = { id = 406 } }
			}
			else = {
				remove_trait = pregnant
				cancel_pregnancy = yes
				add_character_modifier = { modifier = aborted_child years = 1 }
				moon_tea_effects = yes #random events
			}
		}
		clr_character_flag = first_night_child

		spouse = {
			if = {
				limit = {
					NOR = {
						NOT = { age = 13 }
						trait = eunuch
						trait = incapable
						trait = celibate
					}
				}
				tooltip = { show_portrait = yes }
				character_event = { id = 403 tooltip = "EVTTOOLTIP403" }
			}
		}
		ai_chance = {
			factor = 33

			# Not ready to be a mother
			modifier = {
				factor = 1.5
				NOT = { age = 20 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 19 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 18 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 17 }
			}
			modifier = {
				factor = 2
				trait = craven
			}
			modifier = {
				factor = 2
				trait = depressed
			}

			# Opinion of Father
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 90 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 80 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 70 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 60 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 40 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 30 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 20 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 10 } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -9 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -19 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -29 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -39 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -59 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -69 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -79 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -89 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -99 } } }
			}

			# Personality Obstacles
			modifier = {
				factor = 0.8
				trait = honorable
			}
			modifier = {
				factor = 0.8
				trait = honest
			}
			modifier = {
				factor = 0.5
				trait = zealous
			}
			modifier = {
				factor = 0.5
				trait = familyperson
			}

			# Conflicting Objective
			modifier = {
				factor = 0.1
				OR = {
					has_ambition = obj_have_a_daughter
					has_ambition = obj_have_a_son
					has_ambition = obj_five_children
				}
			}
		}
	}

	# Option 3 - Pass Child Off as Legitimate
	option = {
		trigger = {
			NOT = { trait = slave }
			NOT = { has_character_flag = first_night_child }
			#Spouse must plausibly be able to have children
			spouse = {
				NOR = {
					NOT = { age = 13 }
					trait = eunuch
					trait = incapable
					trait = celibate
				}
			}
		}
		name = "EVTOPTC402"
		clr_character_flag = flag_no_cuckoo
		tooltip = { add_trait = pregnant }
		if = {
			limit = { father_of_unborn_known = no } #father is unknown
			set_character_flag = bastard_father_unknown
		}
		spouse = {
			tooltip = { show_portrait = yes }
			character_event = { id = 404 tooltip = EVTTOOLTIP404 }
		}
		hidden_tooltip = { father_of_unborn = { character_event = { id = 407 } } }

		# Mark father's location
		hidden_tooltip = {
			if = {
				limit = {
					spouse = {
						OR = {
							NOT = { at_location = ROOT }
							trait = infirm
							is_crippled_trigger = yes
							trait = homosexual
							trait = inbred
							is_ill = yes
						}
					}
				}
				set_character_flag = flag_mysterious_conception_mother
			}
		}

		# Stillbirths, potentially
		stillbirth_chance_effect = yes


		hidden_tooltip = {
			random_list = {
				70 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.8
						trait = possessed
					}
					modifier = {
						factor = 0.8
						trait = paranoid
					}
					modifier = {
						factor = 0.8
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.8
						age = 37
					}
					modifier = {
						factor = 0.8
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 3
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					# modifier = {
						# factor = 0.8
						# trait = shieldmaiden
					# }
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.75
						trait = robust
					}
				}
				30 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					modifier = {
						factor = 2
						has_character_modifier = hashish_addict
					}
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
		}

		hidden_tooltip  = {
			if = {
				limit = {
					OR = {
						has_character_modifier = abomination_of_incest
						father_of_unborn = {
							OR = {
								has_character_modifier = abomination_of_incest
								sibling = ROOT
								is_parent_of = ROOT
								mother = { character = ROOT }
							}
						}
					}
				}
				character_event = { id = 370 days = 300 }
			}
		}
		ai_chance = {
			factor = 33

			#This would be suspicious
			modifier = {
				factor = 0.5
				spouse = {
					OR = {
						NOT = { at_location = ROOT }
						trait = infirm
						is_crippled_trigger = yes
						trait = homosexual
						trait = inbred
						is_ill = yes
					}
				}
			}

			# Personality Modifiers
			modifier = {
				factor = 2
				trait = deceitful
			}
			modifier = {
				factor = 0.5
				trait = honest
			}
			modifier = {
				factor = 2
				trait = ambitious
			}
			modifier = {
				factor = 0.5
				trait = content
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 0.5
				trait = humble
			}

			# Already have secret bastard children
			modifier = {
				factor = 5
				any_child = { has_character_flag = flag_secret_bastard }
			}
		}
	}

	# Slaves
	option = {
		name = "EVTOPTA402"
		trigger = { trait = slave }
		tooltip = { add_trait = pregnant }
		set_character_flag = flag_no_cuckoo
		clr_character_flag = first_night_child
		father_of_unborn = { character_event = { id = 40399 tooltip = EVTTOOLTIP405 } }

		# Stillbirths, potentially
		stillbirth_chance_effect = yes

		hidden_tooltip = {
			random_list = {
				70 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.8
						trait = possessed
					}
					modifier = {
						factor = 0.8
						trait = paranoid
					}
					modifier = {
						factor = 0.8
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.8
						age = 37
					}
					modifier = {
						factor = 0.8
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 3
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					# modifier = {
						# factor = 0.8
						# trait = shieldmaiden
					# }
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.75
						trait = robust
					}
				}
				30 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					modifier = {
						factor = 2
						has_character_modifier = hashish_addict
					}
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
		}
	}
}

# On-action event: Forced Pregnancy
character_event = {
	id = 40299
	desc = EVTDESC40299
	picture = "GFX_evt_pregnancy"

	is_triggered_only = yes

	has_character_flag = forced_child

	trigger = {
		NOT = { trait = pregnant }
		father_of_unborn = {
			NOT = { is_married = ROOT }
			NOT = { any_consort = { character = ROOT } }
		}
	}

	immediate = {
		clr_character_flag = forced_child
		add_trait = pregnant
	}

	# Option 1 - Keep Child
	option = {
		name = "EVTOPTA40299"
		clr_character_flag = flag_no_cuckoo
		tooltip = { add_trait = pregnant }
		if = {
			limit = { is_married = yes }
			set_character_flag = flag_no_cuckoo
		}
		clr_character_flag = first_night_child
		hidden_tooltip = { father_of_unborn = { character_event = { id = 40599 } } }

		# Stillbirths, potentially
		stillbirth_chance_effect = yes

		hidden_tooltip = { spouse = { character_event = { id = 40598 } } }

		hidden_tooltip = {
			random_list = {
				70 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.8
						trait = possessed
					}
					modifier = {
						factor = 0.8
						trait = paranoid
					}
					modifier = {
						factor = 0.8
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.8
						age = 37
					}
					modifier = {
						factor = 0.8
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 3
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					# modifier = {
						# factor = 0.8
						# trait = shieldmaiden
					# }
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.75
						trait = robust
					}
				}
				30 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					modifier = {
						factor = 2
						has_character_modifier = hashish_addict
					}
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
		}

		ai_chance = {
			factor = 13
		}
	}

	# Option 2 - Moon Tea
	option = {
		name = "EVTOPTB400"
		trigger = {
			NOT = { trait = slave }
			NOT = { trait = salt_wife }
			OR = { #Only important people have access
				is_ruler = yes
				liege = { is_close_relative = ROOT }
				liege = { is_married = ROOT }
				liege = { dynasty = ROOT }
				prestige = 100
				intrigue = 12
				wealth = 25
			}
			prisoner = no #No access to tea
		}
		clr_character_flag = flag_no_cuckoo
		clr_character_flag = first_night_child
		custom_tooltip = { text = tooltip_20404_abortion }
		remove_trait = pregnant
		add_character_modifier = { modifier = aborted_child years = 1 }
		hidden_tooltip = {
			cancel_pregnancy = yes
			moon_tea_effects = yes #random events
		}

		spouse = { character_event = { id = 40597 tooltip = "EVTTOOLTIP40597" } }
		ai_chance = {
			factor = 100

			# Not ready to be a mother
			modifier = {
				factor = 1.5
				NOT = { age = 20 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 19 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 18 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 17 }
			}
			modifier = {
				factor = 2
				trait = craven
			}
			modifier = {
				factor = 2
				trait = depressed
			}

			# Opinion of Father
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 90 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 80 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 70 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 60 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 50 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 40 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 30 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 20 } }
			}
			modifier = {
				factor = 0.8
				father_of_unborn = { reverse_opinion = { who = ROOT value = 10 } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -9 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -19 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -29 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -39 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -49 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -59 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -69 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -79 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -89 } } }
			}
			modifier = {
				factor = 1.25
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -99 } } }
			}

			# Personality Obstacles
			modifier = {
				factor = 0.8
				trait = honorable
			}
			modifier = {
				factor = 0.8
				trait = honest
			}
			modifier = {
				factor = 0.5
				trait = zealous
			}
			modifier = {
				factor = 0.5
				trait = familyperson
			}

			# Conflicting Objective
			modifier = {
				factor = 0.1
				OR = {
					has_ambition = obj_have_a_daughter
					has_ambition = obj_have_a_son
					has_ambition = obj_five_children
				}
			}
		}
	}
}

# The husband is a proud father!
character_event = {
	id = 403
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	desc = EVTDESC403

	option = {
		name = EXCELLENT
		prestige = 5
	}
}

# Expecting a slave's child
character_event = {
	id = 40399
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	desc = EVTDESC40399

	option = {
		name = OK
		prestige = 5
	}
}
# Expecting a forced child
character_event = {
	id = 40599
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	desc = EVTDESC40599

	option = {
		name = OK
	}
}
# Inform spouse forced child
character_event = {
	id = 40598
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	desc = EVTDESC40598

	option = {
		name = OK
		prestige = -25
	}
}
# Inform spouse forced child moon tea
character_event = {
	id = 40597
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	desc = EVTDESC40597

	option = {
		name = OK
	}
}

# The husband suspects something ain't right
character_event = {
	id = 404
	picture = GFX_evt_pregnancy
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	desc = {
		text = EVTDESC404_KF
		trigger = {
			FROM = {
				father_of_unborn_known = yes
				father_of_unborn = {
					NOT = { character = ROOT }
				}
			}
		}
	}

	desc = {
		text = EVTDESC404
		trigger = {
			NOT = { random = 50 }
			FROM = {
				OR = {
					father_of_unborn_known = no
					father_of_unborn = { character = ROOT }
				}
			}
		}
	}

	desc = {
		text = EVTDESC404_2
		trigger = {
			random = 50
			FROM = {
				OR = {
					father_of_unborn_known = no
					father_of_unborn = { character = ROOT }
				}
			}
		}
	}

	option = {
		name = EVTOPTC404 # ...
		trigger = { trait = incapable }
	}

	option = {
		name = EVTOPTA404 # Doubt besets me...
		trigger = {
			is_incapable = no
			FROM = {
				OR = {
					father_of_unborn_known = no
					father_of_unborn = { character = ROOT }
				}
			}
		}
		if = {
			limit = {
				NOT = { trait = trusting }
				OR = {
					trait = paranoid
					NOT = { at_location = FROM }
					trait = infirm
					is_crippled_trigger = yes
					trait = homosexual
					trait = inbred
					is_ill = yes
					intrigue = 10
					random = 25 # 75% chance
				}
			}
			hidden_tooltip = {
				FROM = { character_event = { id = 21000 days = 7 random = 16 } } # Investigate this further
			}
		}
	}

	option = {
		name = EVTOPTB404 # Denounce them both as traitors!
		trigger = {
			is_incapable = no
			FROM = {
				father_of_unborn_known = yes
				father_of_unborn = {
					NOT = { character = ROOT }
				}
			}
		}

		hidden_tooltip = {
			FROM = {
				father_of_unborn = {
					save_event_target_as = target_adulterer
				}
				character_event = { id = 20 } # Adultery fallout
			}
		}

		FROM = {
			father_of_unborn = {
				hidden_tooltip = {
					character_event = { id = 21006 }
				}
			}

			hidden_tooltip = {
				character_event = { id = 21005 }
			}
		}
	}
}

# Hidden bounce event: The husband might investigate
character_event = {
	id = 21000

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = { character_event = { id = 21001 } }
	}

	option = {
		name = OK
	}
}

# Husband suspects wife is pregnant with another man
character_event = {
	id = 21001

	desc = EVTDESC21001
	picture = GFX_evt_lunatic
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA21001 # Hire someone to find out
		ai_chance = {
			factor = 100

			modifier = {
				factor = 2
				NOT = { at_location = FROM }
			}
			modifier = {
				factor = 2
				trait = infirm
			}
			modifier = {
				factor = 2
				is_crippled_trigger = yes
			}
			modifier = {
				factor = 2
				trait = homosexual
			}
			modifier = {
				factor = 2
				trait = inbred
			}
			modifier = {
				factor = 2
				is_ill = yes
			}

			modifier = {
				factor = 0
				trait = trusting
			}
			modifier = {
				factor = 0.25
				trait = craven
			}
			modifier = {
				factor = 0.25
				trait = kind
			}
			modifier = {
				factor = 0.5
				trait = arbitrary
			}
			modifier = {
				factor = 0.5
				trait = temperate
			}
			modifier = {
				factor = 2.0
				trait = deceitful
			}
			modifier = {
				factor = 2.0
				trait = wroth
			}
			modifier = {
				factor = 5.0
				trait = cruel
			}
			modifier = {
				factor = 5.0
				trait = impaler
			}
			modifier = {
				factor = 10
				trait = paranoid
			}
		}
		scaled_wealth = { value = -0.1 min = -10 max = -75 }
		hidden_tooltip = {
			FROM = { character_event = { id = 21002 } } # Investigate this further
		}
	}

	option = {
		name = EVTOPTB21001 # No, I trust her word!
		ai_chance = {
			factor = 100
		}
	}
}

# Wife: Hidden bounce event: The husband is investigating
character_event = {
	id = 21002

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_pregnant = yes
	}

	option = {
		name = OK # Success

		trigger = {
			father_of_unborn = {
				NOT = { character = FROM }
			}
		}

		clr_character_flag = final_unfaithful_investigation

		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.5
				FROM = {
					intrigue < 2
				}
			}
			modifier = {
				factor = 0.5
				FROM = {
					intrigue < 5
				}
			}
			modifier = {
				factor = 2.0
				FROM = {
					intrigue = 10
				}
			}
			modifier = {
				factor = 3.0
				FROM = {
					intrigue = 15
				}
			}
			modifier = {
				factor = 1.5
				FROM = {
					trait = deceitful
				}
			}
			modifier = {
				factor = 2.0
				FROM = {
					trait = schemer
				}
			}
			modifier = {
				factor = 2.0
				FROM = {
					any_courtier = {
						has_opinion_modifier = {
							modifier = opinion_chasing_friend
							who = ROOT
						}
					}
				}
			}
			modifier = {
				factor = 2.0
				FROM = {
					any_courtier = {
						has_opinion_modifier = {
							modifier = opinion_chasing_spouse
							who = ROOT
						}
					}
				}
			}
			modifier = {
				factor = 2.0
				FROM = {
					any_courtier = {
						has_opinion_modifier = {
							modifier = opinion_chasing_child
							who = ROOT
						}
					}
				}
			}
			modifier = {
				factor = 2.0
				FROM = {
					has_focus = focus_intrigue
				}
			}
		}

		set_character_flag = spies_adultery
		FROM = { character_event = { id = 21003 days = 10 random = 30 } }
	}

	option = {
		name = OK # No success yet
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0.5
				intrigue < 2
			}
			modifier = {
				factor = 0.5
				intrigue < 5
			}
			modifier = {
				factor = 2.0
				intrigue = 10
			}
			modifier = {
				factor = 3.0
				intrigue = 15
			}
			modifier = {
				factor = 1.5
				trait = deceitful
			}
			modifier = {
				factor = 1.5
				trait = seducer
			}
			modifier = {
				factor = 2.0
				trait = schemer
			}
			modifier = {
				factor = 5.0
				has_character_modifier = wol_court_vixen
			}
			modifier = {
				factor = 5.0
				father_of_unborn = {
					has_character_modifier = wol_court_tomcat
				}
			}
			modifier = {
				factor = 2.0
				has_focus = focus_intrigue
			}
		}

		if = {
			limit = { has_character_flag = final_unfaithful_investigation }
			clr_character_flag = final_unfaithful_investigation
			FROM = { character_event = { id = 21011 days = 15 random = 30 } } # Husband fails
			break = yes
		}

		FROM = { character_event = { id = 21010 days = 15 random = 30 } } # Husband can escalate investigation
	}
}

# Husband's investigation is not going well. What now?
character_event = {
	id = 21010

	desc = EVTDESC21010
	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA21010 # What a relief!
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				trait = paranoid
			}
			modifier = {
				factor = 0.1
				has_focus = focus_intrigue
			}
			modifier = {
				factor = 3.0
				trait = trusting
			}
		}
	}

	option = {
		name = EVTOPTB21010 # Confront her directly
		ai_chance = {
			factor = 100
		}
		hidden_tooltip = {
			FROM = { character_event = { id = 21012 days = 2 } }
		}
	}
	option = {
		name = EVTOPTC21010 # Hire more spies!
		ai_chance = {
			factor = 100
			modifier = {
				factor = 0
				wealth < 100
			}
			modifier = {
				factor = 0.1
				trait = greedy
			}
		}
		scaled_wealth = { value = -0.25 min = -25 max = -125 }
		hidden_tooltip = {
			FROM = {
				set_character_flag = final_unfaithful_investigation
				character_event = { id = 21002 }
			}
		}
	}
	option = {
		name = EVTOPTD21010 # Lay a trap
		trigger = {
			FROM = {
				intrigue < 9
				NOT = { trait = schemer }
				NOT = { has_character_modifier = wol_court_vixen }
				father_of_unborn = {
					is_alive = yes
					NOT = { character = ROOT }
					NOT = { has_character_modifier = wol_court_tomcat }
				}
			}
			OR = {
				intrigue = 12
				trait = schemer
				AND = {
					has_focus = focus_intrigue
					intrigue = 5
				}
			}
		}
		tooltip_info = intrigue
		ai_chance = {
			factor = 10000
		}

		hidden_tooltip = {
			FROM = {
				character_event = { id = 21016 days = 2 }
			}
		}
	}
}

# Husband's investigation fails
character_event = {
	id = 21011

	desc = EVTDESC21011
	picture = GFX_evt_lunatic
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA21011 # Damnation
		opinion = {
			who = FROM
			modifier = opinion_suspected_adultery
			months = 60
		}
	}
}

# Husband confronts wife directly
character_event = {
	id = 21012

	desc = EVTDESC21012
	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA21012 # Deny
		ai_chance = {
			factor = 100
		}
		FROM = { character_event = { id = 21013 days = 1 } }
	}
	option = {
		name = EVTOPTB21012 # Tearfully confess
		trigger = {
			father_of_unborn = {
				NOT = { character = FROM }
			}
		}

		ai_chance = {
			factor = 10
			modifier = {
				factor = 0
				trait = deceitful
			}
			modifier = {
				factor = 0
				trait = cruel
			}
			modifier = {
				factor = 10.0
				trait = kind
			}
			modifier = {
				factor = 10.0
				trait = just
			}
			modifier = {
				factor = 20.0
				opinion = {
					who = FROM
					value = 50
				}
			}
		}
		set_character_flag = confessed_adultery
		FROM = { character_event = { id = 21003 days = 1 } }
	}

	option = {
		name = EVTOPTC21012 # Skillfully manipulate him
		trigger = {
			OR = {
				intrigue = 12
				has_focus = focus_intrigue
				has_focus = focus_seduction
				has_character_modifier = wol_court_vixen
				trait = seductress
			}
			FROM = {
				NOT = { has_focus = focus_intrigue }
				intrigue < 9
			}
		}
		tooltip_info = intrigue
		ai_chance = {
			factor = 10000
		}
		FROM = { character_event = { id = 21015 days = 1 } }
	}
}

# Wife denies. Husband's investigation fails.
character_event = {
	id = 21013

	desc = EVTDESC21013
	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	trigger = {
		FROM = { is_alive = yes }
	}

	option = {
		name = EVTOPTA21013 # Alright
		opinion = {
			who = FROM
			modifier = opinion_suspected_adultery
			months = 60
		}
	}
}

# Wife caught. Consequences...
character_event = {
	id = 21003

	desc = {
		text = EVTDESC21003_CR
		trigger = {
			FROM = {
				has_character_flag = spies_adultery
				father_of_unborn = {
					is_close_relative = PREV
				}
			}
		}
	}

	desc = {
		text = EVTDESC21003
		trigger = {
			FROM = {
				has_character_flag = spies_adultery
				father_of_unborn = {
					NOT = { is_close_relative = PREV }
				}
			}
		}
	}

	desc = {
		text = EVTDESC21003_CONF_CR
		trigger = {
			FROM = {
				has_character_flag = confessed_adultery
				father_of_unborn = {
					is_close_relative = PREV
				}
			}
		}
	}

	desc = {
		text = EVTDESC21003_CONF
		trigger = {
			FROM = {
				has_character_flag = confessed_adultery
				father_of_unborn = {
					NOT = { is_close_relative = PREV }
				}
			}
		}
	}

	desc = {
		text = EVTDESC21003_TRAP_CR
		trigger = {
			FROM = {
				has_character_flag = trap_adultery
				father_of_unborn = {
					is_close_relative = PREV
				}
			}
		}
	}

	desc = {
		text = EVTDESC21003_TRAP
		trigger = {
			FROM = {
				has_character_flag = trap_adultery
				father_of_unborn = {
					NOT = { is_close_relative = PREV }
				}
			}
		}
	}

	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	trigger = {
		FROM = { is_alive = yes }
	}

	immediate = {
		if = {
			limit = {
				OR = {
					has_character_flag = trap_adultery
					has_character_flag = spies_adultery
				}
			}
			if = {
				limit = {
					NOT = { trait = paranoid }
					NOT = { trait = trusting }
				}
				random = {
					chance = 10
					add_trait = paranoid
					hidden_tooltip = {
						character_event = { id = 38275 days = 3 } # Paranoid gained
					}
				}
			}

			if = {
				limit = { trait = trusting }
				random = {
					chance = 20
					remove_trait = trusting
					hidden_tooltip = {
						character_event = { id = 38306 days = 3 } # Trusting lost
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTA21003 # Keep this quiet
		ai_chance = {
			factor = 10
			modifier = {
				factor = 0
				trait = wroth
			}
			modifier = {
				factor = 0
				trait = cruel
			}
			modifier = {
				factor = 0
				trait = envious
			}
			modifier = {
				factor = 0
				trait = zealous
			}
			modifier = {
				factor = 0.5
				trait = just
			}
			modifier = {
				factor = 3
				trait = craven
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
			modifier = {
				factor = 2
				trait = temperate
			}
			modifier = {
				factor = 5
				trait = kind
			}
			modifier = {
				factor = 5
				trait = cynical
			}
		}

		FROM = {
			clr_character_flag = trap_adultery
			clr_character_flag = confessed_adultery
			clr_character_flag = spies_adultery

			reverse_opinion = {
				who = ROOT
				modifier = opinion_unfaithful_private
				months = 60
			}
			father_of_unborn = {
				reverse_opinion = {
					who = ROOT
					modifier = opinion_cuckolded_private
					months = 60
				}
			}
		}
	}

	option = {
		name = {
			text = EVTOPTB21003 # Unholy!
			trigger = {
				practices_incest_trigger = no
				FROM = {
					father_of_unborn = {
						is_close_relative = PREV
					}
				}
			}
		}
		name = {
			text = EVTOPTC21003 # Holy, but they are still traitors!
			trigger = {
				practices_incest_trigger = yes
				FROM = {
					father_of_unborn = {
						is_close_relative = PREV
					}
				}
			}
		}
		name = {
			text = EVTOPTD21003 # Traitors!
			trigger = {
				FROM = {
					father_of_unborn = {
						NOT = { is_close_relative = PREV }
					}
				}
			}
		}

		ai_chance = {
			factor = 100
		}

		hidden_tooltip = {
			FROM = {
				father_of_unborn = {
					save_event_target_as = target_adulterer
				}
				character_event = { id = 20 } # Adultery fallout
			}
		}

		FROM = {
			father_of_unborn = {
				hidden_tooltip = {
					character_event = { id = 21006 }
				}
			}

			hidden_tooltip = {
				if = {
					limit = { has_character_flag = spies_adultery }
					character_event = { id = 21005 }
				}
			}

			clr_character_flag = trap_adultery
			clr_character_flag = confessed_adultery
			clr_character_flag = spies_adultery
		}
	}
}

# Wife denies and manipulates husband.
character_event = {
	id = 21015

	desc = EVTDESC21015
	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	trigger = {
		FROM = { is_alive = yes }
	}

	option = {
		name = EVTOPTA21015 # Alright

		opinion = {
			who = FROM
			modifier = opinion_regrets_accusation
			months = 36
		}

		if = {
			limit = {
				NOT = { trait = paranoid }
				NOT = { trait = trusting }
			}
			random = {
				chance = 20
				add_trait = trusting
				hidden_tooltip = {
					character_event = { id = 38250 } # Trusting gained
				}
			}
		}

		if = {
			limit = { trait = paranoid }
			random = {
				chance = 20
				remove_trait = paranoid
				hidden_tooltip = {
					character_event = { id = 38305 } # Paranoid lost
				}
			}
		}
	}
}

# Wife: husband has laid a trap
character_event = {
	id = 21016

	desc = EVTDESC21016
	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	trigger = {
		FROM = { is_alive = yes }
	}

	option = {
		name = EVTOPTA21016 # That conniving bastard!

		set_character_flag = trap_adultery
		FROM = {
			character_event = { id = 21003 tooltip = EVTTOOLTIP21003_TRAP }
		}
	}
}

# The unfaithful wife is notified that the husband knows
character_event = {
	id = 21005
	desc = EVTDESC21005

	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA21005 # Damn!
	}
}

# The adulterer is notified that the husband knows
character_event = {
	id = 21006
	desc = EVTDESC21006

	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA21006 # Damn!
		trigger = { is_liege_or_above = FROM }
	}
	option = {
		name = EVTOPTB21006 # Damn!
		trigger = { NOT = { is_liege_or_above = FROM } }
	}
}

# The husband's wife comes clean about the pregnancy
character_event = {
	id = 40499
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	desc = EVTDESC40499

	option = {
		name = EVTOPTA40499
		hidden_tooltip = {
			FROM = {
				father_of_unborn = {
					save_event_target_as = target_adulterer
				}
				character_event = { id = 20 } # Adultery fallout
			}
		}
		FROM = {
			set_character_flag = flag_no_cuckoo
			father_of_unborn = { tooltip = { show_portrait = yes } }
		}
	}
}

# Your lover comes clean about your affair
character_event = {
	id = 405
	picture = GFX_evt_scandal
	is_triggered_only = yes
	desc = "EVTDESC405"
	option = {
		name = "EVTOPTA405"
		character_event = { id = 64046 tooltip = "EVTTOOLTIP64045" }
		ai_chance = {
			factor = 50
			modifier = {
				factor = 0.5
				trait = just
			}
			modifier = {
				factor = 0.5
				trait = honorable
			}
			modifier = {
				factor = 0.5
				trait = honest
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 2
				trait = deceitful
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 100 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 90 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 80 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 70 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 60 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 50 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 40 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 30 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 20 }
			}
			modifier = {
				factor = 0.8
				opinion = { who = FROM value = 10 }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -9 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -19 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -29 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -39 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -49 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -59 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -69 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -79 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -89 } }
			}
			modifier = {
				factor = 1.25
				NOT = { opinion = { who = FROM value = -99 } }
			}
		}
	}

	option = {
		name = "EVTOPTB405"
		ai_chance = { factor = 50 }
	}
}

# Your lover is drinking moon tea to cover up the affair
character_event = {
	id = 406
	picture = GFX_evt_scandal

	is_triggered_only = yes

	desc = {
		text = "EVTDESC406"
		trigger = { NOT = { has_character_flag = hard_pregnancy } }
	}
	desc = {
		text = "EVTDESC406B"
		trigger = { has_character_flag = hard_pregnancy }
	}

	option = {
		name = "EVTOPTA406" #OK
		ai_chance = {
			factor = 75
			# Not ready to be a father
			modifier = {
				factor = 1.5
				NOT = { age = 20 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 19 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 18 }
			}
			modifier = {
				factor = 1.5
				NOT = { age = 17 }
			}
			modifier = {
				factor = 2
				trait = craven
			}
			modifier = {
				factor = 2
				trait = depressed
			}
			modifier = {
				factor = 3
				trait = kind
			}
			modifier = {
				factor = 3
				trait = humble
			}
			modifier = {
				factor = 2
				FROM = {
					spouse = { higher_tier_than = ROOT }
				}
			}
			modifier = {
				factor = 2
				any_liege = { is_married = FROM }
			}
		}
		hidden_tooltip = {
			#opinion = { who = FROM modifier = opinion_using_moon_tea }
			FROM = {
				remove_trait = pregnant
				cancel_pregnancy = yes
				add_character_modifier = { modifier = aborted_child years = 1 }
				moon_tea_effects = yes #random events
			}
			clr_character_flag = hard_pregnancy
		}
	}

	option = {
		name = "EVTOPTB406"  #Protest
		trigger = { NOT = { has_character_flag = hard_pregnancy } }
		ai_chance = {
			factor = 25
			modifier = {
				factor = 3
				trait = cruel
			}
			modifier = {
				factor = 3
				trait = proud
			}
			modifier = {
				factor = 2
				is_ruler = yes
			}
			modifier = {
				factor = 2
				is_lover = FROM
			}
			modifier = {
				factor = 10
				OR = {
					has_ambition = obj_have_a_daughter
					has_ambition = obj_have_a_son
					has_ambition = obj_five_children
				}
			}
		}
		FROM = { character_event = { id = birth.50 days = 1 tooltip = TOOLTIPbirth.50 } }
	}
}
# Your lover protests moon tea
character_event = {
	id = birth.50
	desc = "EVTDESCbirth.50"
	picture = GFX_evt_scandal
	is_triggered_only = yes

	option = {
		name = "EVTOPTAbirth.50" #Fine
		ai_chance = {
			factor = 50

			modifier = {
				factor = 0.2
				spouse = {
					OR = {
						NOT = { age = 13 }
						trait = eunuch
						trait = incapable
						trait = celibate
					}
				}
			}
			modifier = {
				factor = 3
				trait = craven
			}
			modifier = {
				factor = 3
				trait = shy
			}
			modifier = {
				factor = 3
				trait = humble
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 20 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 40 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 60 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 80 }
			}
			modifier = {
				factor = 1.5
				opinion = { who = FROM value = 100 }
			}
			modifier = {
				factor = 2
				is_lover = FROM
			}
			modifier = {
				factor = 2
				FROM = { higher_tier_than = ROOT }
			}
			modifier = {
				factor = 2
				any_liege = { character = FROM }
			}
			modifier = {
				factor = 2
				FROM = { trait = authoritative }
			}
		}
		custom_tooltip = { text = TOOLTIPbirth.51 }
		if = {
			limit = {
				is_married = yes
				NOT = { is_married = FROM }
			}
			spouse = { #if spouse obviously cant have children, must reveal
				if = {
					limit = {
						OR = {
							NOT = { age = 13 }
							trait = eunuch
							trait = incapable
							trait = celibate
						}
					}
					ROOT = {
						set_character_flag = flag_no_cuckoo
						clr_character_flag = first_night_child
					}
					tooltip = { show_portrait = yes }
					character_event = { id = 40499 tooltip = EVTTOOLTIP40499 }
				}
			}
			custom_tooltip = { text = TOOLTIPbirth.51B }
		}
		custom_tooltip = { text = TOOLTIPambition.13ENDLINE }
		hidden_tooltip = { FROM = { character_event = { id = birth.51 } } }
		if = {
			limit = { spouse = { NOT = { character = FROM } } }
			spouse = { character_event = { id = 403 tooltip = "EVTTOOLTIP403" } }
		}
		# Stillbirths, potentially
		stillbirth_chance_effect = yes
		hidden_tooltip = {
			random_list = {
				70 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.8
						trait = possessed
					}
					modifier = {
						factor = 0.8
						trait = paranoid
					}
					modifier = {
						factor = 0.8
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.8
						age = 37
					}
					modifier = {
						factor = 0.8
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 3
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					# modifier = {
						# factor = 0.8
						# trait = shieldmaiden
					# }
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.75
						trait = robust
					}
				}
				30 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					# modifier = {
						# factor = 2
						# has_character_modifier = hashish_addict
					# }
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
		}
	}

	option = {
		name = "EVTOPTBbirth.50"  #No
		ai_chance = {
			factor = 50
			modifier = {
				factor = 3
				trait = brave
			}
			modifier = {
				factor = 3
				trait = authoritative
			}
			modifier = {
				factor = 3
				trait = proud
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -20 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -40 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -60 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -80 } }
			}
			modifier = {
				factor = 1.5
				NOT = { opinion = { who = FROM value = -99 } }
			}
			modifier = {
				factor = 2
				higher_tier_than = FROM
			}
			modifier = {
				factor = 2
				FROM = { any_liege = { character = ROOT } }
			}
		}
		remove_trait = pregnant
		add_character_modifier = { modifier = aborted_child years = 1 }
		hidden_tooltip = {
			cancel_pregnancy = yes
			moon_tea_effects = yes #random events
		}
		FROM = {
			opinion = {
				who = ROOT
				modifier = opinion_aborted_my_child
			}
			#hidden_tooltip = { opinion = { who = ROOT modifier = opinion_using_moon_tea } }
			if = {
				limit = { is_lover = ROOT }
				tooltip = { remove_lover = ROOT }
				if = {
					limit = {
						is_female = yes
					}
					set_character_flag = recent_lover
				}
				tooltip = {
					opinion = {
						who = ROOT
						modifier = opinion_former_lover
					}
					reverse_opinion = {
						who = ROOT
						modifier = opinion_former_lover
					}
				}
				if = {
					limit = { has_ambition = obj_make_the_eight }
					hidden_tooltip = { character_event = { id = ambition.1 } }
				}
			}
			hidden_tooltip = { character_event = { id = birth.52 } }
		}
	}
}
# Your lover agrees to not use moon tea
character_event = {
	id = birth.51
	picture = GFX_evt_scandal
	is_triggered_only = yes

	desc = {
		text = EVTDESCbirth.51
		trigger = {
			FROM = {
				is_married = yes
				NOT = { is_married = ROOT }
			}
		}
	}

	desc = {
		text = EVTDESCbirth.51B
		trigger = {
			FROM = {
				OR = {
					is_married = no
					is_married = ROOT
				}
			}
		}
	}

	option = {
		name = "EVTOPTAbirth.51"
		FROM = {
			opinion = {
				who = ROOT
				modifier = opinion_coerced_into_having_child
			}
		}
	}
}
# Your lover refuses to not use moon tea
character_event = {
	id = birth.52
	desc = "EVTDESCbirth.52"
	picture = GFX_evt_scandal
	is_triggered_only = yes

	option = {
		name = "EVTOPTAbirth.52"
		if = {
			limit = { is_lover = FROM }
			remove_lover = FROM
			if = {
				limit = {
					is_female = yes
				}
				set_character_flag = recent_lover
			}
			opinion = {
				who = FROM
				modifier = opinion_former_lover
			}
			reverse_opinion = {
				who = FROM
				modifier = opinion_former_lover
			}
			if = {
				limit = { has_ambition = obj_make_the_eight }
				hidden_tooltip = { character_event = { id = ambition.1 } }
			}
		}
	}
}
# Your lover has chosen to pass your child off as her husband's
character_event = {
	id = 407
	desc = "EVTDESC407"
	picture = GFX_evt_scandal
	is_triggered_only = yes

	option = { name = "EVTOPTA407" }
}

# Consort: Pregnancy starts showing
character_event = {
	id = 410
	desc = EVTDESC410
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	trigger = {
		NOT = { trait = pregnant }
		is_consort = yes
		father_of_unborn = {
			any_consort = { character = ROOT }
		}
		NOT = { has_character_flag = forced_child }
	}

	immediate = {
		add_trait = pregnant
	}

	option = {
		name = OK
		clr_character_flag = flag_no_cuckoo
		tooltip = { add_trait = pregnant }
		prestige = 10

		# Mark father's location
		hidden_tooltip = {
			random_list = {
				70 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.8
						trait = possessed
					}
					modifier = {
						factor = 0.8
						trait = paranoid
					}
					modifier = {
						factor = 0.8
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.8
						age = 37
					}
					modifier = {
						factor = 0.8
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 3
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					# modifier = {
						# factor = 0.8
						# trait = shieldmaiden
					# }
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.75
						trait = robust
					}
				}
				30 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					modifier = {
						factor = 2
						has_character_modifier = hashish_addict
					}
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
			if = {
				limit = {
					father_of_unborn = { NOT = { at_location = ROOT } }
				}
				set_character_flag = flag_mysterious_conception_mother
			}
		}

		# Stillbirths, potentially
		stillbirth_chance_effect = yes

		hidden_tooltip  = {
			if = {
				limit = {
					OR = {
						has_character_modifier = abomination_of_incest
						father_of_unborn = {
							OR = {
								has_character_modifier = abomination_of_incest
								sibling = ROOT
								is_parent_of = ROOT
								mother = { character = ROOT }
							}
						}
					}
				}
				character_event = { id = 370 days = 300 }
			}
		}
		if = {
			limit = {
				father_of_unborn = {
					is_alive = yes
				}
			}

			hidden_tooltip = {
				if = {
					limit = {
						father_of_unborn = {
							trait = paranoid
						}
					}
					random = {
						chance = 50
						father_of_unborn = { character_event = { id = 404 } }
						break = yes
					}
				}
				if = {
					limit = {
						father_of_unborn = {
							NOT = { trait = paranoid }
							NOT = { trait = trusting }
						}
					}
					random = {
						chance = 1
						father_of_unborn = { character_event = { id = 404 } }
						break = yes
					}
				}
			}

			father_of_unborn = { character_event = { id = 413 tooltip = EVTTOOLTIP413 } }
		}
	}
	option = {
		# Moon Tea
		name = "EVTOPTB400"
		trigger = {
			is_senior_consort_party = yes
			prisoner = no #No access to tea
		}
		wealth = -15
		piety = -15
		custom_tooltip = { text = tooltip_20404_abortion }
		remove_trait = pregnant
		add_character_modifier = { modifier = aborted_child years = 1 }
		hidden_tooltip  = {
			cancel_pregnancy = yes
			moon_tea_effects = yes #random events
		}
		ai_chance = {
			factor = 5

			#Must have a reason to do this against spouse
			modifier = {
				factor = 0
				OR = { #young and lustful
					age = 21
					AND = {
						NOT = { trait = lustful }
						NOT = { trait = hedonist }
					}
				}
				#Is either depressed, lunatic, posessed
				NOT = { trait = depressed }
				NOT = { trait = lunatic }
				NOT = { trait = possessed }

				father_of_unborn = { reverse_opinion = { who = ROOT value = -39 } } #dislikes husband
				any_lover = { #has a lover and is not husband's lover
					is_female = no
					NOT = { any_consort = { character = ROOT } }
				}
			}

			#Rulers have further restrictions
			modifier = {
				factor = 0
				is_ruler = yes
				NOT = { trait = depressed }
				NOT = { trait = lunatic }
				NOT = { trait = possessed }
				OR = {
					NOT = { current_heir = { is_child_of = ROOT } }
					NOT = {
						any_lover = {
							is_female = no
							NOT = { any_consort = { character = ROOT } }
						}
					}
					has_ambition = obj_have_a_daughter
					has_ambition = obj_have_a_son
					has_ambition = obj_five_children
				}
			}

			modifier = {
				factor = 1.5
				trait = lustful
			}
			modifier = {
				factor = 1.5
				NOT = { age = 21 }
				trait = lustful
			}
			modifier = {
				factor = 1.5
				trait = hedonist
			}
			modifier = {
				factor = 1.5
				NOT = { age = 21 }
				trait = hedonist
			}

			modifier = {
				factor = 1.25
				trait = humble
			}
			modifier = {
				factor = 2
				trait = craven
			}
			modifier = {
				factor = 2
				trait = depressed
			}

			# Wants to Spite Husband
			modifier = {
				factor = 0.64
				father_of_unborn = { reverse_opinion = { who = ROOT value = 100 } }
			}
			modifier = {
				factor = 0.64
				father_of_unborn = { reverse_opinion = { who = ROOT value = 80 } }
			}
			modifier = {
				factor = 0.64
				father_of_unborn = { reverse_opinion = { who = ROOT value = 60 } }
			}
			modifier = {
				factor = 0.64
				father_of_unborn = { reverse_opinion = { who = ROOT value = 40 } }
			}
			modifier = {
				factor = 0.64
				father_of_unborn = { reverse_opinion = { who = ROOT value = 20 } }
			}

			modifier = {
				factor = 1.56
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -99 } } }
			}
			modifier = {
				factor = 1.56
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -79 } } }
			}
			modifier = {
				factor = 1.56
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -59 } } }
			}
			modifier = {
				factor = 1.56
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -39 } } }
			}
			modifier = {
				factor = 1.56
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = -19 } } }
			}

			modifier = {
				factor = 2
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = 0 } } }
				trait = wroth
			}
			modifier = {
				factor = 2
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = 0 } } }
				trait = envious
			}
			modifier = {
				factor = 2
				NOT = { father_of_unborn = { reverse_opinion = { who = ROOT value = 0 } } }
				trait = proud
			}

			modifier = {
				factor = 2
				any_lover = { #has a lover and is not husband's lover
					is_female = no
					NOT = { any_consort = { character = ROOT } }
				}
			}

			# Personality Obstacles
			modifier = {
				factor = 0.5
				trait = honorable
			}
			modifier = {
				factor = 0.8
				trait = brave
			}
			modifier = {
				factor = 0.8
				trait = proud
			}
			modifier = {
				factor = 0.8
				trait = honest
			}
			modifier = {
				factor = 0.8
				trait = kind
			}
			modifier = {
				factor = 0.5
				trait = zealous
			}
			modifier = {
				factor = 0.5
				trait = familyperson
			}

			# Conflicting Objectives
			modifier = {
				factor = 0.1
				OR = {
					has_ambition = obj_have_a_daughter
					has_ambition = obj_have_a_son
					has_ambition = obj_five_children
				}
			}
		}
	}
}

# Consort: Pregnancy with another father!
character_event = {
	id = 412
	desc = EVTDESC412
	picture = "GFX_evt_pregnancy"

	is_triggered_only = yes

	trigger = {
		NOT = { trait = pregnant }
		is_consort = yes
		father_of_unborn = {
			NOT = { any_consort = { character = ROOT } }
		}
	}

	immediate = {
		add_trait = pregnant
	}

	# Option 3 - Pass Child Off as Legitimate
	option = {
		name = "EVTOPTC402"
		clr_character_flag = flag_no_cuckoo
		tooltip = { add_trait = pregnant }
		if = {
			limit = { father_of_unborn_known = no } #father is unknown
			set_character_flag = bastard_father_unknown
		}
		consort = {
			tooltip = { show_portrait = yes }
			character_event = { id = 404 tooltip = EVTTOOLTIP404 }
		}
		hidden_tooltip = {
			father_of_unborn = { character_event = { id = 407 } }
			random_list = {
				70 = {
					modifier = {
						factor = 0.8
						trait = shy
					}
					modifier = {
						factor = 0.8
						is_ill = yes
					}
					modifier = {
						factor = 0.8
						trait = possessed
					}
					modifier = {
						factor = 0.8
						trait = paranoid
					}
					modifier = {
						factor = 0.8
						trait = lunatic
					}
					modifier = {
						factor = 0.8
						is_weak_trigger = yes
					}
					modifier = {
						factor = 0.8
						age = 37
					}
					modifier = {
						factor = 0.8
						NOT = { age = 20 }
					}
					modifier = {
						factor = 0.8
						num_of_children = 3
					}
					modifier = {
						factor = 0.8
						num_of_children = 4
					}
					modifier = {
						factor = 0.8
						num_of_children = 5
					}
					modifier = {
						factor = 0.8
						num_of_children = 6
					}
					modifier = {
						factor = 0.8
						num_of_children = 7
					}
					modifier = {
						factor = 0.8
						has_character_flag = special_marshal
					}
					# modifier = {
						# factor = 0.8
						# trait = shieldmaiden
					# }
					modifier = {
						factor = 0.6
						trait = feeble
					}
					modifier = {
						factor = 1.75
						is_strong_trigger = yes
					}
					modifier = {
						factor = 1.75
						trait = strong
					}
				}
				30 = {
					modifier = {
						factor = 0.5
						is_ill = no
					}
					modifier = {
						factor = 0.25
						age = 18
						NOT = { age = 40 }
					}
					modifier = {
						factor = 2
						trait = drunkard
					}
					modifier = {
						factor = 2
						has_character_modifier = hashish_addict
					}
					modifier = {
						factor = 3
						has_character_modifier = withdrawal_symptoms
					}
					character_event = { id = HFP.20404	days = 10 random = 5 } #Hard pregnancy
				}
			}
		}

		# Mark father's location
		hidden_tooltip = {
			if = {
				limit = { NOT = { consort = { at_location = ROOT } } }
				set_character_flag = flag_mysterious_conception_mother
			}
		}

		# Stillbirths, potentially
		stillbirth_chance_effect = yes

		hidden_tooltip  = {
			if = {
				limit = {
					OR = {
						has_character_modifier = abomination_of_incest
						father_of_unborn = {
							OR = {
								has_character_modifier = abomination_of_incest
								sibling = ROOT
								is_parent_of = ROOT
								mother = { character = ROOT }
							}
						}
					}
				}
				character_event = { id = 370 days = 300 }
			}
		}
	}
}

# The consort's liege is a proud father!
character_event = {
	id = 413
	picture = GFX_evt_pregnancy

	is_triggered_only = yes

	desc = EVTDESC413

	option = {
		name = OK
		prestige = 5
	}
}

# The consort's liege suspects something ain't right
# character_event = {
	# id = 414
	# picture = GFX_evt_pregnancy

	# is_triggered_only = yes

	# desc = EVTDESC414

	# option = {
		# name = EVTOPTA414
		# if = {
			# limit = {
				# FROM = {
					# father_of_unborn_known = yes
				# }
			# }
			# opinion = {
				# who = FROM
				# modifier = opinion_potential_cuckold
				# months = 7
			# }
			# FROM = { father_of_unborn = { reverse_opinion = { who = ROOT modifier = cuckolded months = 7 } } }
		# }
	# }
# }

#############################################
# EVENTS ON THE BIRTH OF A BASTARD CHILD
#############################################
# A child is born out of wedlock
character_event = {
	id = 300
	picture = GFX_evt_birth

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { mother = { has_character_flag = flag_no_cuckoo } }
			father_even_if_dead = { #remove from wrong bloodlines
				any_owned_bloodline = {
					remove_bloodline_member = ROOT
				}
			}
			mother = { clr_character_flag = flag_no_cuckoo }
			real_father_even_if_dead = {
				ROOT = {
					set_father = PREV
					set_character_flag = father_found
				}
			}
			#Failsafe: if real father not found remove mother's spouse as father
			if = {
				limit = { NOT = { has_character_flag = father_found } }
				set_father = 0
				if = {
					limit = {
						NOR = {
							is_lowborn = yes
							mother_even_if_dead = { dynasty = PREV }
							mother_even_if_dead = { is_lowborn = yes }
						}
					}
					dynasty = mother_bastard
				}
				if = {
					limit = {
						mother_even_if_dead = { is_lowborn = yes }
					}
					dynasty = none
				}
			}
			#move to correct court
			if = {
				limit = { mother = { is_alive = yes } }
				mother = {
					if = {
						limit = { is_ruler = yes }
						ROOT = { move_character = PREV }
					}
					if = {
						limit = { is_ruler = no }
						liege = { ROOT = { move_character = PREV } }
					}
				}
			}
			if = {
				limit = {
					mother = { is_alive = no }
					father = { is_alive = yes }
				}
				father = {
					if = {
						limit = { is_ruler = yes }
						ROOT = { move_character = PREV }
					}
					if = {
						limit = { is_ruler = no }
						liege = { ROOT = { move_character = PREV } }
					}
				}
			}
			clr_character_flag = father_found
		}
		if = {
			limit = {
				father_even_if_dead = { #no concept of bastardry
					culture = dothraki
					OR = {
						is_ruler = yes
						liege = { culture = dothraki }
					}
					NOT = {
						ROOT = {
							mother = {
								higher_tier_than = PREVPREV
								NOT = { culture = dothraki }
							}
						}
					}
				}
			}
			father_even_if_dead = { ROOT = { dynasty = PREV } }
			remove_trait = bastard
			break = yes
		}
		if = { #Mother may sometimes decide
			limit = {
				mother = {
					is_alive = yes
					OR = {
						AND = {
							is_ruler = yes
							OR = {
								primary_title = { has_law = true_cognatic_succession }
								tier = EMPEROR
							}
							ROOT = {
								OR = {
									father_even_if_dead = { ROOT = { mother = { higher_tier_than = PREVPREV } } }
									NOT = { father_even_if_dead = { always = yes } }
								}
							}
						}
						AND = {
							is_ruler = yes
							primary_title = {
								OR = {
									has_law = enatic_cognatic_succession
									has_law = enatic_succession
								}
							}
						}
						AND = {
							is_ruler = no
							liege = {
								primary_title = {
									OR = {
										has_law = enatic_cognatic_succession
										has_law = enatic_succession
									}
								}
							}
						}
					}
				}
			}
			mother = { character_event = { id = 301 } } # The mother's reaction
			break = yes
		}
		father = {
			if = {
				limit = { is_alive = yes }
				character_event = { id = 301 } # The father's reaction
				break = yes
			}
		}
		#No parents available
		add_trait = bastard
		if = {
			limit = {
				father_even_if_dead = {
					is_lowborn = no
				}
			}
			father_even_if_dead = { ROOT = { dynasty = PREV } }
		}
		else_if = {
			limit = {
				is_lowborn = no
				NOT = { mother_even_if_dead = { dynasty = ROOT } }
			}
			dynasty = father_bastard
		}
		bastard_nickname_mother_effect = yes
		if = {
			limit = { has_bastard_nickname_trigger = no }
			bastard_nickname_father_effect = yes
		}
	}

	option = {
		name = OK
	}
}

# The father reacts to the bastard birth (mother if female enatic/cognatic)
character_event = {
	id = 301
	picture = GFX_evt_birth
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	desc = {
		text = EVTDESC301
		trigger = { FROM = { is_alive = yes } }
	}
	desc = {
		text = EVTDESC301B
		trigger = { FROM = { is_alive = no } }
	}

	trigger = { FROM = { is_child_of = ROOT } }

	option = {
		name = {
			text = EVTOPTA301 # Legitimize the child
			trigger = { can_legitimise_bastards_trigger = yes }
		}
		name = {
			text = EVTOPTA301B # Ask for Legitimization
			trigger = { can_legitimise_bastards_trigger = no }
		}
		trigger = {
			NOT = { trait = bastard }
			is_lowborn = no
			can_press_claims_trigger = yes
		}
		ai_chance = {
			factor = 5

			modifier = {
				factor = 0.5
				OR = {
					NOT = { age = 40 }
					current_heir = { dynasty = PREV }
					primary_title = { has_elective_law_trigger = yes }
				}
			}
			modifier = {
				factor = 0.1
				OR = {
					trait = honorable
					trait = just
					current_heir = { is_child_of = PREV }
					AND = {
						FROM = { is_female = yes }
						primary_title = {
							OR = {
								has_law = cognatic_succession
								has_law = agnatic_succession
							}
						}
					}
					AND = {
						FROM = { is_female = no }
						primary_title = {
							OR = {
								has_law = enatic_succession
								has_law = enatic_cognatic_succession
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.5
				FROM = { NOT = { graphical_culture = ROOT } }
			}
			modifier = {
				factor = 0.1
				culture = eastern_valyrian
				FROM = { NOT = { graphical_culture = ROOT } }
			}
			modifier = {
				factor = 0.5
				FROM = { is_alive = no }
			}
			modifier = {
				factor = 3
				age = 35
				NOT = { any_child = { is_alive = yes } }
				FROM = { is_alive = yes }
			}
			modifier = {
				factor = 3
				age = 35
				NOT = { any_child = { is_alive = yes is_female = no } }
				FROM = { is_female = no is_alive = yes }
			}
			modifier = {
				factor = 2
				trait = familyperson
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
			modifier = {
				factor = 2
				trait = lunatic
			}
		}
		if = {
			limit = { can_legitimise_bastards_trigger = yes }
			piety = -20
			FROM = {
				legitimise_newborn_FROM_effect = yes # The child gets the father's dynasty
				if = {
					limit = {
						ROOT = {
							is_female = no
							NOT = { culture = summer_islander } #Promiscious culture does not care
						}
					}
					mother = {
						character_event = { id = 303 tooltip = EVTTOOLTIP303 } # The child's mother is very pleased
						any_spouse = {
							character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's husband is pissed off
						}
						consort = {
							character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's lord is pissed off
						}
					}
				}
				if = {
					limit = {
						ROOT = {
							is_female = yes
							NOT = { culture = summer_islander } #Promiscious culture does not care
						}
					}
					father = {
						character_event = { id = 303 tooltip = EVTTOOLTIP303A } # The child's father is very pleased
						any_spouse = {
							character_event = { id = 304 tooltip = EVTTOOLTIP304A } # The child's father's wife is pissed off
						}
					}
				}
			}
			if = {
				limit = { ROOT = { NOT = { culture = summer_islander } } }#Promiscious culture does not care
				any_child = {
					limit = {
						NOT = { character = FROM }
						dynasty = ROOT
						NOT = { trait = bastard }
					}
					opinion = {
						who = ROOT
						modifier = legitimized_bastard
						months = 60
					}
				}
			}
			recalc_succession = yes
		}
		else = {
			hidden_tooltip = { #temporarily make them acknowledged bastard just in case event fails
				FROM = {
					dynasty = ROOT
					add_trait = bastard
					if = {
						limit = { mother_even_if_dead = { always = yes } }
						bastard_nickname_mother_effect = yes
					}
					if = {
						limit = { NOT = { mother_even_if_dead = { always = yes } } }
						bastard_nickname_father_effect = yes
					}
				}
			}
			if = { #find liege for legitmisation
				limit = {
					any_liege = {
						tier = KING
						can_legitimise_bastards_trigger = yes
						NOT = { war_with = PREV }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_refused_legit } }
					}
				}
				set_character_flag = legitimising_bastard
				any_liege = {
					limit = { tier = KING }
					save_event_target_as = liege_to_ask_for_legit
					custom_tooltip = {
						text = TOOLTIP301LEGITREQUEST
						hidden_tooltip = { FROM = { character_event = { id = bastard.600 } } }
					}
				}
			}
			else_if = { #find liege for legitmisation
				limit = {
					liege = {
						can_legitimise_bastards_trigger = yes
						NOT = { war_with = PREV }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_refused_legit } }
					}
				}
				set_character_flag = legitimising_bastard
				liege = {
					save_event_target_as = liege_to_ask_for_legit
					custom_tooltip = {
						text = TOOLTIP301LEGITREQUEST
						hidden_tooltip = { FROM = { character_event = { id = bastard.600 } } }
					}
				}
			}
			else_if = { #find liege for legitmisation
				limit = {
					top_liege = {
						can_legitimise_bastards_trigger = yes
						NOT = { war_with = PREV }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_refused_legit } }
					}
				}
				set_character_flag = legitimising_bastard
				top_liege = {
					save_event_target_as = liege_to_ask_for_legit
					custom_tooltip = {
						text = TOOLTIP301LEGITREQUEST
						hidden_tooltip = { FROM = { character_event = { id = bastard.600 } } }
					}
				}
			}
			else = {
				random_independent_ruler = {
					limit = {
						higher_tier_than = ROOT
						reverse_has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
						can_legitimise_bastards_trigger = yes
						NOT = { war_with = ROOT }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_refused_legit } }
					}
					ROOT = { set_character_flag = legitimising_bastard }
					save_event_target_as = liege_to_ask_for_legit
					custom_tooltip = {
						text = TOOLTIP301LEGITREQUEST
						hidden_tooltip = { FROM = { character_event = { id = bastard.600 } } }
					}
					break = yes
				}
				custom_tooltip = { #if no liege, found acknowledge them
					text = TOOLTIPlegit_bastard_fail
					FROM = {
						acknowledge_newborn_FROM_effect = yes
						if = {
							limit = {
								ROOT = {
									is_female = no
									NOT = { culture = summer_islander } #Promiscious culture does not care
								}
							}
							mother = {
								character_event = { id = 307 tooltip = EVTTOOLTIP307 } # The child's mother is pleased
								any_spouse = {
									character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's husband is pissed off
								}
								consort = {
									character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's lord is pissed off
								}
							}
						}
						if = {
							limit = {
								ROOT = {
									is_female = yes
									NOT = { culture = summer_islander } #Promiscious culture does not care
								}
							}
							father = {
								character_event = { id = 307 tooltip = EVTTOOLTIP307A } # The child's father is pleased
								any_spouse = {
									character_event = { id = 304 tooltip = EVTTOOLTIP304A } # The child's father's wife is pissed off
								}
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTB301 # Acknowledge the child
		ai_chance = {
			factor = 30

			modifier = {
				factor = 0.5
				FROM = { is_alive = no }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { reverse_opinion = { who = ROOT value = 100 } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { reverse_opinion = { who = ROOT value = 75 } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { reverse_opinion = { who = ROOT value = 50 } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { reverse_opinion = { who = ROOT value = 25 } } }
			}
			modifier = {
				factor = 1.5
				FROM = { is_female = no }
			}
			modifier = {
				factor = 3
				trait = familyperson
			}
			modifier = {
				factor = 3
				trait = humble
			}
			modifier = {
				factor = 3
				trait = kind
			}
			modifier = {
				factor = 3
				trait = honorable
			}
			modifier = {
				factor = 3
				trait = just
			}
		}
		piety = -10
		FROM = {
			acknowledge_newborn_FROM_effect = yes # The child gets the father's dynasty, but is not legitimized.
			if = {
				limit = {
					ROOT = {
						is_female = no
						NOT = { culture = summer_islander } #Promiscious culture does not care
					}
				}
				mother = {
					character_event = { id = 307 tooltip = EVTTOOLTIP307 } # The child's mother is pleased
					any_spouse = {
						character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's husband is pissed off
					}
					consort = {
						character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's lord is pissed off
					}
				}
			}
			if = {
				limit = {
					ROOT = {
						is_female = yes
						NOT = { culture = summer_islander } #Promiscious culture does not care
					}
				}
				father = {
					character_event = { id = 307 tooltip = EVTTOOLTIP307A } # The child's father is pleased
					any_spouse = {
						character_event = { id = 304 tooltip = EVTTOOLTIP304A } # The child's father's wife is pissed off
					}
				}
			}
		}
		if = {
			limit = { trait = nightswatch }
			piety = -75
			add_character_modifier = {
				name = NW_broken_vows
				duration = 365
			}
		}
		recalc_succession = yes
	}

	option = {
		name = EVTOPTC301 # Denounce the child
		trigger = { is_female = no }
		ai_chance = {
			factor = 30
			modifier = {
				factor = 1.5
				FROM = { mother = { NOT = { reverse_opinion = { who = ROOT value = -24 } } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { NOT = { reverse_opinion = { who = ROOT value = -49 } } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { NOT = { reverse_opinion = { who = ROOT value = -74 } } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { NOT = { reverse_opinion = { who = ROOT value = -99 } } } }
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 2
				trait = cruel
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 2
				trait = selfish
			}
		}
		piety = -10
		FROM = {
			denounce_newborn_FROM_effect = yes #  The child founds a new bastard dynasty
			if = {
				limit = { ROOT = { NOT = { culture = summer_islander } } }#Promiscious culture does not care
				mother = {
					character_event = { id = 310 tooltip = EVTTOOLTIP310 } # The child's mother is dishonoured
					any_spouse = {
						character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's husband is pissed off
					}
					consort = {
						character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's lord is pissed off
					}
				}
			}
		}
		recalc_succession = yes
	}
}

# The child's mother is very pleased
character_event = {
	id = 303

	is_triggered_only = yes
	desc = EVTDESC303
	picture = GFX_evt_birth
	border = GFX_event_normal_frame_intrigue

	option = {
		name = EVTOPTA303
		opinion = {
			who = FROM
			modifier = legitimized_child
			years = 10
		}
	}
}

# The child's mother's husband is pissed off
character_event = {
	id = 304
	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_intrigue

	desc = {
		text = EVTDESC304
		trigger = { is_female = no }
	}
	desc = {
		text = EVTDESC304B
		trigger = { is_female = yes }
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA304
		if = {
			limit = {
				NOT = { has_opinion_modifier = { who = FROM modifier = opinion_cuckolded } }
				FROM = { is_female = no }
			}
			opinion = {
				who = FROM
				modifier = opinion_cuckolded
			}
		}
		FROM = {
			FROM = {
				reverse_opinion = {
					who = ROOT
					modifier = opinion_cuckold_child
					years = 100
				}
				if = {
					limit = { ROOT = { is_female = no } }
					mother = {
						if = {
							limit = { NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_unfaithful_wife } } }
							reverse_opinion = {
								who = ROOT
								modifier = opinion_unfaithful_wife
							}
						}
					}
				}
				if = {
					limit = { ROOT = { is_female = yes } }
					father = {
						if = {
							limit = { NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_unfaithful_husband } } }
							reverse_opinion = {
								who = ROOT
								modifier = opinion_unfaithful_husband
							}
						}
					}
				}
			}
		}
		#AI might imprison cuckcolder
		FROM = {
			if = {
				limit = {
					ROOT = {
						is_ruler = yes
						ai = yes
					}
					is_liege_or_above = ROOT
					prisoner = no
				}
				save_event_target_as = imprison_target
				ROOT = { character_event = { id = imprisoned.1 days = 1 } }
			}
		}
	}
}

# The father's wife is enraged
character_event = {
	id = 305
	desc = EVTDESC305
	picture = GFX_evt_quarrel

	is_triggered_only = yes
	show_from_from = yes

	trigger = { NOT = { culture = summer_islander } }

	option = {
		name = EVTOPTA305
		FROMFROM = {
			if = {
				limit = { ROOT = { is_female = yes } }
				mother = {
					reverse_opinion = {
						who = ROOT
						modifier = slut_seductress
						years = 20
					}
				}
			}
			# if = {
				# limit = { ROOT = { is_female = no } }
				# father = {
					# reverse_opinion = {
						# who = ROOT
						# modifier = slut_seductress
						# years = 20
					# }
				# }
			# }
			reverse_opinion = {
				who = ROOT
				modifier = opinion_cuckold_child
				years = 100
			}
		}

		FROM = {
			reverse_opinion = {
				who = ROOT
				modifier = legitimized_bastard
				years = 20
			}
		}
	}
}

# The child's mother is pleased
character_event = {
	id = 307

	is_triggered_only = yes

	desc = EVTDESC307
	picture = GFX_evt_birth

	option = {
		name = EVTOPTA307
		opinion = {
			who = FROM
			modifier = acknowledged_child
			years = 10
		}
	}
}

# The father's wife is angered
character_event = {
	id = 308
	picture = GFX_evt_quarrel

	is_triggered_only = yes
	show_from_from = yes

	trigger = { NOT = { culture = summer_islander } }

	desc = {
		text = EVTDESC308
		trigger = { is_female = no }
	}
	desc = {
		text = EVTDESC308B
		trigger = { is_female = yes }
	}

	option = {
		name = EVTOPTA308
		FROMFROM = {
			if = {
				limit = { ROOT = { is_female = yes } }
				mother = {
					reverse_opinion = {
						who = ROOT
						modifier = slut_seductress
						years = 20
					}
				}
			}
			# if = {
				# limit = { ROOT = { is_female = no } }
				# father = {
					# reverse_opinion = {
						# who = ROOT
						# modifier = slut_seductress
						# years = 20
					# }
				# }
			# }
			reverse_opinion = {
				who = ROOT
				modifier = opinion_cuckold_child
				years = 100
			}
		}

		FROM = {
			reverse_opinion = {
				who = ROOT
				modifier = acknowledged_bastard
				years = 10
			}
		}
	}
}

# The child's mother is dishonoured
character_event = {
	id = 310
	picture = GFX_evt_quarrel

	is_triggered_only = yes

	desc = EVTDESC310

	option = {
		name = EVTOPTA310
		opinion = {
			who = FROM
			modifier = denounced_child
			years = 10
		}
	}
}

# The father's wife is displeased
character_event = {
	id = 311
	picture = GFX_evt_quarrel

	is_triggered_only = yes
	show_from_from = yes

	desc = EVTDESC311

	trigger = { NOT = { culture = summer_islander } }

	option = {
		name = EVTOPTA311
		FROMFROM = {
			mother = {
				reverse_opinion = {
					who = ROOT
					modifier = slut_seductress
					years = 20
				}
			}
			reverse_opinion = {
				who = ROOT
				modifier = opinion_cuckold_child
				years = 100
			}
		}

		FROM = {
			reverse_opinion = {
				who = ROOT
				modifier = opinion_unfaithful_husband
			}
		}
	}
}
#Child of consort is born
character_event = {
	id = 312000

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		mother = { clr_character_flag = unborn_child_is_consorts }
		#mother = { ROOT = { dynasty = PREV } }
		if = { #Child of Lengi Empress Consort
			limit = {
				mother = {
					is_senior_consort_party = yes
					has_landed_title = k_leng
					is_feudal = yes
					OR = {
						culture = lengi
						culture = yi_ti
					}
					OR = {
						religion = yiti_gods
						religion = yiti_gods_reformed
						religion = lion_night
						religion = lion_night_reformed
						religion = old_ones
					}
				}
			}
			mother = { ROOT = { dynasty = PREV } }
			break = yes
		}
		#Determine if mother is senior consort

		if = {
			limit = {
				mother = {
					is_senior_consort_party = yes
				}
			}
			mother = { save_event_target_as = primary_consort }
		}
		else = {
			father_even_if_dead = { save_event_target_as = primary_consort }
		}

		if = {
			limit = {
				NAND = { #is not a child of a targ polygamy marriage
					father_even_if_dead = { culture = high_valyrian }
					mother = { has_character_flag = high_valyrian_polygamy_wife }
				}
			}
			event_target:primary_consort = {
				if = {
					limit = { is_drowned_god_religion_trigger = yes }
					ROOT = { add_trait = child_of_consort }
					character_event = { id = 312001 days = 1 } # The father's reaction
					if = {
						limit = { is_alive = no }
						ROOT = {
							dynasty = ROOT
							add_trait = child_of_consort
							add_trait = bastard
							recalc_succession = yes
						}
					}
				}
				else_if = {
					limit = {
						OR = {
							religion = the_seven
							culture = eastern_valyrian
						}
					}
					character_event = { id = 312001 days = 1 } # The father's reaction
					if = {
						limit = { is_alive = no }
						ROOT = {
							add_trait = bastard
							if = {
								limit = {
									is_lowborn = no
									mother_even_if_dead = { is_lowborn = no }
								}
								dynasty = mother_bastard
							}
							if = {
								limit = {
									mother_even_if_dead = { is_lowborn = yes }
								}
								dynasty = none
							}
							bastard_nickname_mother_effect = yes
							if = {
								limit = { event_target:primary_consort = { is_female = no } }
								set_father = 0
								set_real_father = PREV
							}
						}
					}
				}
				else = {
					ROOT = { add_trait = child_of_consort }
				}
			}
		}
		if = {
			limit = {
				real_father = {
					is_alive = yes
					ROOT = {
						father = {
							NOT = { character = PREVPREV }
						}
					}
				}
			}
			real_father = {
				character_event = { id = 319 days = 1 } # The real father is notified
			}
		}
	}

	option = {
		name = "EVTOPTA12"
	}
}

# The father reacts to the consort birth
character_event = {
	id = 312001
	picture = GFX_evt_birth

	is_triggered_only = yes

	trigger = { FROM = { is_child_of = ROOT } }

	desc = {
		text = EVTDESC312001 #Drowned God
		trigger = {
			is_drowned_god_religion_trigger = yes
			FROM = { is_alive = yes }
		}
	}
	desc = {
		text = EVTDESC312001B #Drowned God
		trigger = {
			is_drowned_god_religion_trigger = yes
			FROM = { is_alive = no }
		}
	}
	desc = {
		text = EVTDESC312002 #Dornish Paramour
		trigger = {
			NOT = { is_drowned_god_religion_trigger = yes }
			FROM = { is_alive = yes }
		}
	}
	desc = {
		text = EVTDESC312002B #Dornish Paramour
		trigger = {
			NOT = { is_drowned_god_religion_trigger = yes }
			FROM = { is_alive = no }
		}
	}

	option = { # Ironborn child
		name = {
			text = EVTOPTD301
			trigger = { FROM = { is_alive = yes } }
		}
		name = {
			text = EVTOPTD301B
			trigger = { FROM = { is_alive = no } }
		}
		trigger = {
			is_drowned_god_religion_trigger = yes
		}
		FROM = {
			dynasty = ROOT
			add_trait = bastard
			recalc_succession = yes
		}
		recalc_succession = yes
	}

	option = {
		name = {
			text = EVTOPTA301 # Legitimize the child
			trigger = { can_legitimise_bastards_trigger = yes }
		}
		name = {
			text = EVTOPTA301B # Ask for Legitimization
			trigger = { can_legitimise_bastards_trigger = no }
		}
		trigger = {
			NOT = { trait = bastard }
			is_lowborn = no
			can_press_claims_trigger = yes
			NOT = { is_drowned_god_religion_trigger = yes }
		}
		ai_chance = {
			factor = 5

			modifier = {
				factor = 0.5
				OR = {
					NOT = { age = 40 }
					current_heir = { dynasty = PREV }
					primary_title = { has_elective_law_trigger = yes }
				}
			}
			modifier = {
				factor = 0.1
				OR = {
					trait = honorable
					trait = just
					current_heir = { is_child_of = PREV }
					AND = {
						FROM = { is_female = yes }
						primary_title = {
							OR = {
								has_law = cognatic_succession
								has_law = agnatic_succession
							}
						}
					}
					AND = {
						FROM = { is_female = no }
						primary_title = {
							OR = {
								has_law = enatic_succession
								has_law = enatic_cognatic_succession
							}
						}
					}
				}
			}
			modifier = {
				factor = 0.5
				FROM = { NOT = { graphical_culture = ROOT } }
			}
			modifier = {
				factor = 0.1
				culture = eastern_valyrian
				FROM = { NOT = { graphical_culture = ROOT } }
			}
			modifier = {
				factor = 0.5
				FROM = { is_alive = no }
			}
			modifier = {
				factor = 3
				age = 35
				NOT = { any_child = { is_alive = yes } }
				FROM = { is_alive = yes }
			}
			modifier = {
				factor = 3
				age = 35
				NOT = { any_child = { is_alive = yes is_female = no } }
				FROM = { is_female = no is_alive = yes }
			}
			modifier = {
				factor = 2
				trait = familyperson
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
			modifier = {
				factor = 2
				trait = lunatic
			}
		}
		if = {
			limit = { can_legitimise_bastards_trigger = yes }
			piety = -20
			FROM = {
				legitimise_newborn_FROM_effect = yes # The child gets the father's dynasty
				if = {
					limit = {
						ROOT = {
							is_female = no
							NOT = { culture = summer_islander } #Promiscious culture does not care
						}
					}
					mother = {
						character_event = { id = 303 tooltip = EVTTOOLTIP303 } # The child's mother is very pleased
					}
				}
				if = {
					limit = {
						ROOT = {
							is_female = yes
							NOT = { culture = summer_islander } #Promiscious culture does not care
						}
					}
					father = {
						character_event = { id = 303 tooltip = EVTTOOLTIP303A } # The child's father is very pleased
					}
				}
			}
			if = {
				limit = { ROOT = { NOT = { culture = summer_islander } } }#Promiscious culture does not care
				any_child = {
					limit = {
						NOT = { character = FROM }
						dynasty = ROOT
						NOT = { trait = bastard }
					}
					opinion = {
						who = ROOT
						modifier = legitimized_bastard
						months = 60
					}
				}
			}
			recalc_succession = yes
		}
		else = {
			hidden_tooltip = { #temporarily make them acknowledged bastard just in case event fails
				FROM = {
					dynasty = ROOT
					add_trait = bastard
					if = {
						limit = { mother_even_if_dead = { always = yes } }
						bastard_nickname_mother_effect = yes
					}
					if = {
						limit = { NOT = { mother_even_if_dead = { always = yes } } }
						bastard_nickname_father_effect = yes
					}
				}
			}
			if = { #find liege for legitmisation
				limit = {
					any_liege = {
						tier = KING
						can_legitimise_bastards_trigger = yes
						NOT = { war_with = PREV }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_refused_legit } }
					}
				}
				set_character_flag = legitimising_bastard
				any_liege = {
					limit = { tier = KING }
					save_event_target_as = liege_to_ask_for_legit
					custom_tooltip = {
						text = TOOLTIP301LEGITREQUEST
						hidden_tooltip = { FROM = { character_event = { id = bastard.600 } } }
					}
				}
			}
			else_if = { #find liege for legitmisation
				limit = {
					liege = {
						can_legitimise_bastards_trigger = yes
						NOT = { war_with = PREV }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_refused_legit } }
					}
				}
				set_character_flag = legitimising_bastard
				liege = {
					save_event_target_as = liege_to_ask_for_legit
					custom_tooltip = {
						text = TOOLTIP301LEGITREQUEST
						hidden_tooltip = { FROM = { character_event = { id = bastard.600 } } }
					}
				}
			}
			else_if = { #find liege for legitmisation
				limit = {
					top_liege = {
						can_legitimise_bastards_trigger = yes
						NOT = { war_with = PREV }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_refused_legit } }
					}
				}
				set_character_flag = legitimising_bastard
				top_liege = {
					save_event_target_as = liege_to_ask_for_legit
					custom_tooltip = {
						text = TOOLTIP301LEGITREQUEST
						hidden_tooltip = { FROM = { character_event = { id = bastard.600 } } }
					}
				}
			}
			else = {
				random_independent_ruler = {
					limit = {
						higher_tier_than = ROOT
						reverse_has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
						can_legitimise_bastards_trigger = yes
						NOT = { war_with = ROOT }
						NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_refused_legit } }
					}
					ROOT = { set_character_flag = legitimising_bastard }
					save_event_target_as = liege_to_ask_for_legit
					custom_tooltip = {
						text = TOOLTIP301LEGITREQUEST
						hidden_tooltip = { FROM = { character_event = { id = bastard.600 } } }
					}
					break = yes
				}
				custom_tooltip = { #if no liege, found acknowledge them
					text = TOOLTIPlegit_bastard_fail
					FROM = {
						acknowledge_newborn_FROM_effect = yes
						if = {
							limit = {
								ROOT = {
									is_female = no
									NOT = { culture = summer_islander } #Promiscious culture does not care
								}
							}
							mother = {
								character_event = { id = 307 tooltip = EVTTOOLTIP307 } # The child's mother is pleased
								any_spouse = {
									character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's husband is pissed off
								}
								consort = {
									character_event = { id = 304 tooltip = EVTTOOLTIP304 } # The child's mother's lord is pissed off
								}
							}
						}
						if = {
							limit = {
								ROOT = {
									is_female = yes
									NOT = { culture = summer_islander } #Promiscious culture does not care
								}
							}
							father = {
								character_event = { id = 307 tooltip = EVTTOOLTIP307A } # The child's father is pleased
								any_spouse = {
									character_event = { id = 304 tooltip = EVTTOOLTIP304A } # The child's father's wife is pissed off
								}
							}
						}
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTB301 # Acknowledge the child
		trigger = { NOT = { is_drowned_god_religion_trigger = yes } }
		ai_chance = {
			factor = 60

			modifier = {
				factor = 0.75
				culture = eastern_valyrian
				FROM = { NOT = { graphical_culture = ROOT } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { reverse_opinion = { who = ROOT value = 100 } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { reverse_opinion = { who = ROOT value = 75 } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { reverse_opinion = { who = ROOT value = 50 } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { reverse_opinion = { who = ROOT value = 25 } } }
			}
			modifier = {
				factor = 1.5
				FROM = { is_female = no }
			}
			modifier = {
				factor = 3
				trait = familyperson
			}
			modifier = {
				factor = 3
				trait = humble
			}
			modifier = {
				factor = 3
				trait = kind
			}
			modifier = {
				factor = 3
				trait = honorable
			}
			modifier = {
				factor = 3
				trait = just
			}
		}
		# trigger = {
			# FROM = {
				# is_female = no
			# }
		# }
		FROM = {
			add_trait = bastard
			recalc_succession = yes
			acknowledge_newborn_FROM_effect = yes # The child gets the father's dynasty, but is not legitimized.
			if = {
				limit = {
					ROOT = {
						is_female = no
					}
				}
				mother = {
					character_event = { id = 307 tooltip = EVTTOOLTIP307 } # The child's mother is pleased
				}
			}
			if = {
				limit = {
					ROOT = {
						is_female = yes
					}
				}
				father = {
					character_event = { id = 307 tooltip = EVTTOOLTIP307A } # The child's father is pleased
				}
			}
		}
		recalc_succession = yes
	}

	option = {
		name = EVTOPTC301 # Denounce the child
		trigger = {
			NOT = { is_drowned_god_religion_trigger = yes }
			is_female = no
		}
		ai_chance = {
			factor = 30
			modifier = {
				factor = 1.5
				FROM = { mother = { NOT = { reverse_opinion = { who = ROOT value = -24 } } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { NOT = { reverse_opinion = { who = ROOT value = -49 } } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { NOT = { reverse_opinion = { who = ROOT value = -74 } } } }
			}
			modifier = {
				factor = 1.5
				FROM = { mother = { NOT = { reverse_opinion = { who = ROOT value = -99 } } } }
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 2
				trait = cruel
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 2
				trait = selfish
			}
		}
		FROM = {
			add_trait = bastard
			recalc_succession = yes
			denounce_newborn_FROM_effect = yes #  The child founds a new bastard dynasty
			mother = {
				character_event = { id = 310 tooltip = EVTTOOLTIP310 } # The child's mother is dishonoured
			}
		}
		recalc_succession = yes
	}
}
# #Child of forbidden marriage is born
# character_event = {
	# id = 312150 #MERGED with birth.990
	# desc = "EVTDESC312"
	# picture = "GFX_evt_birth"

	# is_triggered_only = yes
# }
# On-action event: Birth complications
character_event = {
	id = 313
	desc = OK

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { age = 1 }
	}

	immediate = {
		#mother pregnancy traits fail safe
		mother = {
			if = {
				limit = { trait = troubled_pregnancy }
				character_event = { id = HFP.20544 days = 30 }
			}
		}
		random_list = {
			90 = {
				# All is well
			}
			10 = {
				modifier = { #Old remedy
					factor = 0.25
					mother = {
						has_character_flag = flag_mother_dark_rest
					}
				}
				add_trait = sickly
				#Sickly infant treatment event
				if = {
					limit = {
						has_dlc = "Reapers"
						host = {
							job_physician = { always = yes }
						}
					}

					save_event_target_as = sickly_infant
					father = { save_event_target_as = sickly_father }

					#Decided which parent will choose treatment
					if = {
						limit = {
							father = { is_ruler = yes }
							host = { character = event_target:sickly_father }
							NOT = { mother = { is_ruler = yes } }
						}
						father = { save_event_target_as = infant_guardian }
					}

					if = {
						limit = {
							NOT = {
								father = { is_ruler = yes }
								host = { character = event_target:sickly_father }
								NOT = { mother = { is_ruler = yes } }
							}
						}
						mother = { save_event_target_as = infant_guardian }
					}

					#Makes court physician examine child
					host = {
						job_physician = {
							character_event = { id = RIP.11066 days = 7 }
						}
					}
				}
			}
		}
	}

	option = { # No complications
		name = OK
		trigger = {
			NOT = {
				mother = { trait = troubled_pregnancy }
			}
		}
		ai_chance = {
			factor = 80
			modifier = {
				factor = 2.0
				mother = {
					health = 6
				}
			}
			modifier = {
				factor = 2.0
				mother = {
					health = 7
				}
			}
			modifier = {
				factor = 2.0
				mother = {
					num_of_children = 3
				}
			}
			modifier = {
				factor = 2.0
				mother = {
					is_strong_trigger = yes
				}
			}
			modifier = {
				factor = 1.2
				mother = { age = 20 }
			}
			modifier = {
				factor = 1.2
				mother = { age = 25 }
			}
			modifier = {
				factor = 1.2
				mother = { age = 30 }
			}
			modifier = {
				factor = 1.3
				liege = {
					job_physician = {
						learning = 10
					}
				}
			}
			modifier = {
				factor = 1.3
				liege = {
					job_physician = {
						learning = 14
					}
				}
			}
			modifier = {
				factor = 1.5
				liege = {
					job_physician = {
						learning = 18
					}
				}
			}
		}
	}
	option = { # Mother gets ill
		name = OK
		trigger = {
			NOT = {
				mother = { trait = troubled_pregnancy }
			}
			NOT = {
				mother = { is_ill = yes }
			}
		}
		ai_chance = {
			factor = 4
			modifier = {
				factor = 2
				mother = {
					trait = hard_pregnancy
				}
			}
			modifier = {
				factor = 2.0
				mother = {
					NOT = { health = 4.1 }
				}
			}
			modifier = {
				factor = 1.5
				mother = {
					NOT = { num_of_children = 2 }
				}
			}
			modifier = {
				factor = 2.0
				mother = {
					is_weak_trigger = yes
				}
			}
		}

		mother = {
			character_event = { id = 315 }
		}
	}
	option = { # Mother has troubled pregnancy.
		name = OK
		trigger = {
			OR = {
				mother = { trait = troubled_pregnancy }
				mother = { is_ill = yes }
				mother = { check_variable = { which = troubled_pregnancy_variable value = 1 } }
			}
		}
		ai_chance = {
			factor = 16

			modifier = {
				factor = 2.0
				mother = {
					NOT = { health = 4.1 }
				}
			}
			modifier = {
				factor = 6.0
				mother = {
					NOT = { health = 3.1 }
				}
			}
			modifier = {
				factor = 1.5
				mother = {
					NOT = { num_of_children = 2 }
				}
			}
			modifier = {
				factor = 1.5
				mother = {
					check_variable = { which = troubled_pregnancy_variable value = 2 }
				}
			}
			modifier = {
				factor = 1.5
				mother = {
					check_variable = { which = troubled_pregnancy_variable value = 3 }
				}
			}
			modifier = {
				factor = 2
				mother = {
					check_variable = { which = troubled_pregnancy_variable value = 4 }
				}
			}
			modifier = {
				factor = 3
				mother = {
					check_variable = { which = troubled_pregnancy_variable value = 5 }
				}
			}
		}

		mother = {
			character_event = { id = 316 } #Troubled pregnancy gets worse.
		}
	}

	#option = { # Mother dies - Obsolete now.
	#	name = OK
	#	ai_chance = {
	#		factor = 2
	#		modifier = {
	#			factor = 2.0
	#			mother = {
	#				NOT = { health = 4.1 }
	#			}
	#		}
	#		modifier = {
	#			factor = 6.0
	#			mother = {
	#				NOT = { health = 3.1 }
	#			}
	#		}
	#		modifier = {
	#			factor = 1.5
	#			mother = {
	#				NOT = { num_of_children = 2 }
	#			}
	#		}
	#	}
	#	mother = {
	#		death = {
	#			death_reason = death_childbirth
	#		}
	#	}
	#}
}

# # On-action event: Birth complications after a stillbirth
# character_event = {
	# id = 314
	# desc = OK

	# hide_window = yes

	# is_triggered_only = yes

	# trigger = {
		# age = 1
	# }

	# option = { # No complications
		# name = OK
		# ai_chance = {
			# factor = 66
			# modifier = {
				# factor = 2.0
				# health = 6
			# }
			# modifier = {
				# factor = 2.0
				# health = 7
			# }
			# modifier = {
				# factor = 2.0
				# num_of_children = 3
			# }
			# modifier = {
				# factor = 1.2
				# age = 20
			# }
			# modifier = {
				# factor = 1.2
				# age = 25
			# }
			# modifier = {
				# factor = 1.2
				# age = 30
			# }
		# }
	# }
	# option = { # Mother gets ill
		# name = OK
		# ai_chance = {
			# factor = 22
			# modifier = {
				# factor = 0
				# trait = pneumonic
			# }
			# modifier = {
				# factor = 2.0
				# NOT = { health = 4.1 }
			# }
			# modifier = {
				# factor = 1.5
				# NOT = { num_of_children = 2 }
			# }
		# }

		# if = {
			# limit = {
				# is_ill = yes
			# }
			# character_event = { id = 315 }
		# }
		# if = {
			# limit = {
				# NOT = { is_ill = yes }
			# }
			# character_event = { id = 314 }
		# }
	# }
	# option = { # Mother gets pneumonia
		# name = OK
		# ai_chance = {
			# factor = 10

			# modifier = {
				# factor = 2.0
				# NOT = { health = 4.1 }
			# }
			# modifier = {
				# factor = 6.0
				# NOT = { health = 3.1 }
			# }
			# modifier = {
				# factor = 1.5
				# NOT = { num_of_children = 2 }
			# }
		# }

		# if = {
			# limit = {
				# OR = {
					# trait = pneumonic
					# has_epidemic = yes
				# }
			# }
			# red_god_resurrect_effect = yes #check for rhllor resurrection
			# death = {
				# death_reason = death_childbirth
			# }
		# }
		# if = {
			# limit = {
				# NOT = {
					# OR = {
						# trait = pneumonic
						# has_epidemic = yes
					# }
				# }
			# }
			# character_event = { id = 315 }
		# }
	# }
	# option = { # Mother dies
		# name = OK
		# ai_chance = {
			# factor = 2
			# modifier = {
				# factor = 2.0
				# NOT = { health = 4.1 }
			# }
			# modifier = {
				# factor = 6.0
				# NOT = { health = 3.1 }
			# }
			# modifier = {
				# factor = 1.5
				# NOT = { num_of_children = 2 }
			# }
		# }
		# red_god_resurrect_effect = yes #check for rhllor resurrection
		# death = {
			# death_reason = death_childbirth
		# }
	# }
# }

# Mother ill after giving birth
character_event = {
	id = 315
	desc = EVTDESC315
	picture = GFX_evt_illness

	is_triggered_only = yes

	# immediate = {
		# add_trait = ill
	# }

	option = {
		name = EVTOPTA315
		if = {
			limit = {
				NOT = {
					has_dlc = "Reapers"
				}
			}
			add_trait = ill
		}
		if = {
			limit = {
				has_dlc = "Reapers"
			}
			add_symptom_effect = yes
		}
	}
}

# Mother troubled after giving birth
character_event = {
	id = 316
	desc = {
		text = EVTDESCA316
		trigger = {
			trait = troubled_pregnancy
		}
	}
	desc = {
		text = EVTDESCB316
		trigger = {
			NOT = {
				trait = troubled_pregnancy
			}
		}
	}
	picture = GFX_evt_illness

	is_triggered_only = yes


	option = {
		name = EVTOPTA315
		if = {
			limit = { NOT = { trait = troubled_pregnancy } }
			set_character_flag = troubled_pregnancy_relapse #Determines different desc for spouse
			add_trait = troubled_pregnancy
		}
		hidden_tooltip = {
			if = {
				limit = { is_married = yes }
				spouse = {
					 character_event = { id = HFP.20552 }
				}
			}
		}
		hidden_tooltip = {
			random_list = {
				30 = { character_event = { id = HFP.20541 days = 12 random = 5 } } #fever
				15 = { character_event = { id = HFP.20542 days = 12 random = 5 } } #hair loss
				20 = { character_event = { id = HFP.20543 days = 12 random = 5 } } #blood
				10 = {

				modifier = {
					factor = 0.7
					persistent_event_target:pregnancy_mother_physician_per = { learning < 5 }
				}
				modifier = {
					factor = 0.8
					persistent_event_target:pregnancy_mother_physician_per = { learning < 10 }
				}
				modifier = {
					factor = 0.9
					persistent_event_target:pregnancy_mother_physician_per = { is_slow_trigger = yes }
				}
				modifier = {
					factor = 0.8
					persistent_event_target:pregnancy_mother_physician_per = { is_imbecile_trigger = yes }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_mother_physician_per = { trait = herbologist }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_mother_physician_per = { trait = physician }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_mother_physician_per = { is_quick_trigger = yes }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_mother_physician_per = { is_genius_trigger = yes }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_mother_physician_per = { learning = 10 }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_mother_physician_per = { learning = 15 }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_mother_physician_per = { learning = 20 }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_mother_physician_per = { learning = 25 }
				}
				modifier = {
					factor = 0.7
					persistent_event_target:pregnancy_spouse_physician_per = { learning < 5 }
				}
				modifier = {
					factor = 0.8
					persistent_event_target:pregnancy_spouse_physician_per = { learning < 10 }
				}
				modifier = {
					factor = 0.9
					persistent_event_target:pregnancy_spouse_physician_per = { is_slow_trigger = yes }
				}
				modifier = {
					factor = 0.8
					persistent_event_target:pregnancy_spouse_physician_per = { is_imbecile_trigger = yes }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_spouse_physician_per = { trait = herbologist }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_spouse_physician_per = { trait = physician }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_spouse_physician_per = { is_quick_trigger = yes }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_spouse_physician_per = { is_genius_trigger = yes }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_spouse_physician_per = { learning = 10 }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_spouse_physician_per = { learning = 15 }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_spouse_physician_per = { learning = 20 }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_spouse_physician_per = { learning = 25 }
				}
				modifier = {
					factor = 0.7
					persistent_event_target:pregnancy_regent_physician_per = { learning < 5 }
				}
				modifier = {
					factor = 0.8
					persistent_event_target:pregnancy_regent_physician_per = { learning < 10 }
				}
				modifier = {
					factor = 0.9
					persistent_event_target:pregnancy_regent_physician_per = { is_slow_trigger = yes }
				}
				modifier = {
					factor = 0.8
					persistent_event_target:pregnancy_regent_physician_per = { is_imbecile_trigger = yes }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_regent_physician_per = { trait = herbologist }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_regent_physician_per = { trait = physician }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_regent_physician_per = { is_quick_trigger = yes }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_regent_physician_per = { is_genius_trigger = yes }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_regent_physician_per = { learning = 10 }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_regent_physician_per = { learning = 15 }
				}
				modifier = {
					factor = 1.25
					persistent_event_target:pregnancy_regent_physician_per = { learning = 20 }
				}
				modifier = {
					factor = 1.5
					persistent_event_target:pregnancy_regent_physician_per = { learning = 25 }
				}
					character_event = { id = HFP.20544 days = 12 random = 5 } } #recovers completely
				20 = { character_event = { id = HFP.20545 days = 12 random = 5 } } #recovers weakened
				2 = { character_event = { id = HFP.20546 days = 12 random = 5 } } #remains infirm
				3 = { character_event = { id = HFP.20547 days = 12 random = 5 } } #DEATH
			}
		}
	}
}

# # On-action event: A bastard child is born, but is not recognized as such by the spouse of the mother
# character_event = { #MERGED with birth.990
	# id = 318
	# desc = "EVTDESC318"
	# picture = "GFX_evt_birth"

	# is_triggered_only = yes
# }

# Ping the mother
character_event = {
	id = 317
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		clr_character_flag = bastard_father_unknown
		FROM = {
			real_father = {
				character_event = { id = 319 }
			}
		}
	}
	option = {
		name = OK
	}
}

character_event = {
	id = 319
	desc = EVTDESC319
	picture = GFX_evt_birth
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA319
		piety = -1

		# Just to get the portraits
		FROMFROM = {
			tooltip = { show_portrait = yes }
		}
		FROMFROM = {
			father_even_if_dead = {
				tooltip = { show_portrait = yes }
			}
		}
	}
}

# A courtier initiates romance with another courtier
character_event = {
	id = 371
	desc = "EVTDESC450"
	picture = "GFX_gentle_kiss"

	is_triggered_only = yes
	min_age = 16
	max_age = 65
	only_capable = yes
	prisoner = no

	trigger = {
		is_ruler = no
		OR = {
			is_female = no
			NOT = { age = 40 }
		}
		has_lover = no
		is_pregnant = no
		is_consort = no
		is_senior_consort_party = no
		is_ill = no
		NOT = { trait = infirm }
		is_incapable = no
		NOT = { trait = celibate }
		NOT = { trait = eunuch }
		NOT = { trait = dragon }
		NOT = { is_inaccessible_trigger = yes }
		OR = {
			is_married = no
			NOT = { trait = chaste }
		}
		liege = { # otherwise we get too many unnecessary children in the game
			OR = {
				ai = no
				higher_tier_than = DUKE
			}
		}
		# Faithful spouses don't cheat
		OR = {
			trait = lustful
			trait = deceitful
			trait = arbitrary
			AND = {
				OR = {
					is_married = no
					spouse = { NOT = { reverse_opinion = { who = ROOT value = 0 } } }
				}
				OR = {
					is_consort = no
					consort = { NOT = { reverse_opinion = { who = ROOT value = 0 } } }
				}
			}
		}
	}


	weight_multiplier = {
		days = 1

		modifier = {
			factor = 2.0
			has_ambition = obj_make_the_eight
		}
		modifier = {
			factor = 3.0
			has_ambition = obj_find_lover
		}
		modifier = {
			factor = 1.5
			spouse = { is_ruler = yes }
		}
		modifier = {
			factor = 0.5
			spouse = { has_lover = yes }
		}
		modifier = {
			factor = 2.0
			NOT = { age = 30 }
			spouse = { age = 50 }
		}
		modifier = {
			factor = 4.0
			trait = homosexual #to balance for fewer potential lovers
		}
		modifier = {
			factor = 1.5
			NOT = { age = 20 }
		}
		modifier = {
			factor = 0.5
			age = 30
		}
		modifier = {
			factor = 2.0
			trait = hedonist
		}
		modifier = {
			factor = 2.0
			trait = lustful
		}
		modifier = {
			factor = 2.0
			has_fair_trait_trigger = yes
		}
		modifier = {
			factor = 0.5
			has_ugly_trait_trigger = yes
		}
		modifier = {
			factor = 0.1
			trait = chaste
		}

		# Harems are well guarded...
		modifier = {
			factor = 0.33
			is_female = yes
			is_married = yes
			has_polygamy = yes
		}

		# Wives and Concubines of rulers have a harder time initiating this (unless it's their Focus)
		modifier = {
			factor = 0.33
			is_female = yes
			NOT = { has_focus = focus_seduction }
			liege = {
				OR = {
					any_consort = { character = ROOT }
					any_spouse = {
						character = ROOT
					}
				}
			}
		}
	}

	option = {
		name = "EVTOPTA450"
		liege = {
			random_courtier = {
				limit = {
					possibly_romantically_interested_in_each_other_trigger = yes
					age = 16
					OR = {
						is_ruler = no
						at_location = ROOT
					}
					NOT = { character = PREV }
					has_lover = no
					is_pregnant = no
					prisoner = no
					is_ill = no
					OR = {
						is_female = no
						NOT = { age = 40 }
					}
					NOT = { trait = infirm }
					NOT = { is_inaccessible_trigger = yes }
					OR = {
						is_married = no
						NOT = { trait = chaste }
					}
					NOT = {
						has_character_modifier = lustful_affair_timer
					}
					NOT = {
						has_opinion_modifier = {
							who = ROOT
							modifier = opinion_former_lover
						}
					}
					NOT = { is_married = ROOT }
					# Faithful spouses don't cheat
					OR = {
						trait = lustful
						trait = deceitful
						trait = arbitrary
						AND = {
							OR = {
								is_married = no
								spouse = { NOT = { reverse_opinion = { who = ROOT value = 0 } } }
							}
							OR = {
								is_consort = no
								consort = { NOT = { reverse_opinion = { who = ROOT value = 0 } } }
							}
						}
					}
				}
				character_event = { id = 451 tooltip = EVTTOOLTIP451 }
			}
		}
	}
}
# Child is born of incest! (AGOT)
character_event = {
	id = 370
	picture = "GFX_evt_pregnancy"

	is_triggered_only = yes

	trigger = {
		any_child = {
			is_alive = yes
			NOT = { trait = dragon }
			NOT = { has_character_modifier = abomination_of_incest }
			NOT = { has_character_modifier = grandchild_of_incest }
			OR = {
				ROOT = { has_character_modifier = abomination_of_incest }
				father_even_if_dead = {
					OR = {
						has_character_modifier = abomination_of_incest
						sibling = ROOT
						any_child = {
							OR = {
								character = ROOT
								is_parent_of = ROOT
							}
						}
						is_child_of = ROOT
						mother_even_if_dead = { is_child_of = ROOT }
						father_even_if_dead = { is_child_of = ROOT }
					}
				}
			}
		}
	}

	desc = "EVTDESC370"

	option = {
		name = "EVTOPTA370"
		any_child = {
			limit = {
				is_alive = yes
				NOT = { trait = dragon }
				NOT = { has_character_modifier = abomination_of_incest }
				NOT = { has_character_modifier = grandchild_of_incest }
			}
			if = {
				limit = {
					father_even_if_dead = {
						OR = {
							sibling = ROOT
							any_child = {
								OR = {
									character = ROOT
									is_parent_of = ROOT
								}
							}
							is_child_of = ROOT
							mother_even_if_dead = { is_child_of = ROOT }
							father_even_if_dead = { is_child_of = ROOT }
						}
					}
				}
				add_character_modifier = {
					name = "abomination_of_incest"
					duration = -1
				}
				break = yes
			}
			if = {
				limit = {
					OR = {
						father_even_if_dead = { has_character_modifier = abomination_of_incest }
						ROOT = { has_character_modifier = abomination_of_incest }
					}
				}
				add_character_modifier = {
					name = "grandchild_of_incest"
					duration = -1
				}
			}
		}
	}
}

# A child is stillborn! (AGOT)
# character_event = {
	# id = 380 #MERGED WITH BIRTH.990
	# picture = "GFX_evt_death"
	# is_triggered_only = yes

	# option = {
		# name = OK
	# }
# }

character_event = {
	id = 381
	picture = "GFX_evt_death"
	desc = "EVTDESC381"

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { ai = no }
			if = {
				limit = { FROM = { trait = bastard } }
				chronicle = {
					entry = CHRONICLE_BIRTH_STILLBORN_BASTARD
					portrait = [From.GetID]
				}
				break = yes
			}
			if = {
				limit = { FROM = { trait = child_of_consort } }
				chronicle = {
					entry = CHRONICLE_BIRTH_STILLBORN_CONSORT
					portrait = [From.GetID]
				}
				break = yes
			}
			chronicle = {
				entry = CHRONICLE_BIRTH_STILLBORN
				portrait = [From.GetID]
			}
			break = yes
		}
	}

	option = {
		name = {
			text = "EVTOPTA381"
			#trigger = { NOT = { has_character_flag = flag_moon_tea } }
		}
		# name = {
			# text = "EVTOPTA381B"
			# trigger = { has_character_flag = flag_moon_tea }
		# }
		ai_chance = {
			factor = 15
		}
		if = {
			limit = {
				#NOT = { has_character_flag = flag_moon_tea }
				NOT = {
					FROM = { mother = { any_consort = { character = ROOT } } }
				}
			}
			if = {
				limit = { trait = depressed }
				random = {
					chance = 2
					death = {
						death_reason = death_suicide
					}
				}
			}
			if = {
				limit = { NOT = { trait = depressed } }
				random = {
					chance = 10
					add_trait = depressed
					hidden_tooltip = {
						character_event = {
							id = 38288 #Notify Depressed
						}
					}
				}
			}
		}
		hidden_tooltip = {
			#clr_character_flag = flag_moon_tea
			#FROM = { mother = { reverse_remove_opinion = { who = ROOT modifier = opinion_using_moon_tea } } }
		}
	}
	option = {
		name = "EVTOPTB381" #Torture wet nurses and mid-wives
		trigger = {
			is_ruler = yes
			is_female = no
			FROM = { is_child_of = ROOT }
			#NOT = { has_character_flag = flag_moon_tea }

			trait = cruel
			OR = {
				trait = lunatic
				trait = paranoid
				trait = impaler
			}
			NOT = { trait = honorable }
			NOT = { trait = just }
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 4
				trait = lunatic
			}
			modifier = {
				factor = 4
				trait = paranoid
			}
			modifier = {
				factor = 4
				trait = impaler
			}
			modifier = {
				factor = 2
				trait = arbitrary
			}
			modifier = {
				factor = 2
				trait = ruthless
			}
			modifier = {
				factor = 2
				trait = wroth
			}
			modifier = {
				factor = 0.5
				trait = patient
			}
			modifier = {
				factor = 0.25
				trait = trusting
			}
		}
		tooltip_info = cruel
		custom_tooltip = {
			text = TOOLTIP381CRUEL
		}
		FROM = {
			mother = {
				opinion = {
					who = ROOT
					modifier = opinion_cruel
				}
			}
		}
		any_courtier = {
			limit = {
				age = 16
				NOT = { character = ROOT }
				is_incapable = no
				NOT = { is_parent_of = FROM }
			}
			opinion = {
				who = ROOT
				modifier = opinion_cruel
			}
		}
		prestige = 50
		piety = -50
		if = {
			limit = { NOT = { trait = lunatic } }
			random = {
				chance = 15
				add_trait = lunatic
				hidden_tooltip = { character_event = { id = 38304 } }
			}
		}
		hidden_tooltip = {
			liege = {
				if = {
					limit = {
						ai = no
						NOT = { character = ROOT }
					}
					character_event = { id = 382 }
				}
			}
			any_realm_lord = {
				limit = { ai = no }
				character_event = { id = 382 }
			}
		}
		if = {
			limit = { ai = no }
			chronicle = {
				entry = CHRONICLE_TORTURED_WET_NURSES
			}
		}
		hidden_tooltip = {
			#clr_character_flag = flag_moon_tea
			#FROM = { mother = { reverse_remove_opinion = { who = ROOT modifier = opinion_using_moon_tea } } }
		}
	}
}
character_event = { #Inform realm wet nurses murdered
	id = 382
	picture = "GFX_evt_death"
	desc = "EVTDESC382"

	is_triggered_only = yes

	option = {
		name = "EVTOPTA382"
	}
}

# Circumstances of conception were mysterious (AGOT)
# character_event = {
	# id = 395 #MERGED WITH BIRTH.990
	# picture = "GFX_evt_pregnancy"
	# is_triggered_only = yes

	# option = { name = "OK" }
# }
